<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[linux同步标准时间]]></title>
      <url>http://yardfarmer.github.io/2017/02/01/2012-08-03-linux%E5%90%8C%E6%AD%A5%E6%A0%87%E5%87%86%E6%97%B6%E9%97%B4/</url>
      <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ntpdate  ph.pool.ntp.org</div></pre></td></tr></table></figure>
<p><a href="http://www.pool.ntp.org/zone/asia" title="地址" target="_blank" rel="external">亚洲ntp server</a></p>
]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>http://yardfarmer.github.io/2017/02/01/%E8%84%9A%E6%9C%AC%E7%9A%84%E7%AC%AC%E4%B8%80%E8%A1%8C/</url>
      <content type="html"><![CDATA[<p>##!/usr/bin/evn</p>
<blockquote>
<p>脚本语言的第一行，目的就是指出，你想要你的这个文件中的代码用什么可执行程序去运行它</p>
</blockquote>
<ol>
<li>#!/usr/bin/python 是告诉操作系统执行这个脚本的时候，调用 <code>/usr/bin</code> 下的python解释器；</li>
</ol>
<ol>
<li><p>#!/usr/bin/env python这种用法是为了防止操作系统用户没有将python装在默认的 <code>/usr/bin</code>路径里。当系统看到这一行的时候，首先会到env设置里查找python的安装路径，再调用对应路径下的解释器程序完成操作。</p>
</li>
<li><p>#!/usr/bin/python 相当于写死了python路径;</p>
</li>
<li><p>#!/usr/bin/env python 会去环境设置寻找python目录,推荐这种写法</p>
</li>
</ol>
<p><code>/usr/bin/evn</code> 是脚本, 执行后输出:</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="attr">TERM_PROGRAM</span>=iTerm.app</div><div class="line"><span class="attr">SHELL</span>=/bin/bash</div><div class="line"><span class="attr">TERM</span>=xterm-<span class="number">256</span>color</div><div class="line"><span class="attr">CLICOLOR</span>=<span class="number">1</span></div><div class="line"><span class="attr">TMPDIR</span>=/var/folders/zn/b4xqz3bx74jb_ntcdpqk3v_c0000gn/T/</div><div class="line"><span class="attr">Apple_PubSub_Socket_Render</span>=/private/tmp/com.apple.launchd.nrRP4C3qd1/Render</div><div class="line"><span class="attr">USER</span>=yakuncyk</div><div class="line"><span class="attr">SSH_AUTH_SOCK</span>=/private/tmp/com.apple.launchd.ResNTqSfuD/Listeners</div><div class="line"><span class="attr">__CF_USER_TEXT_ENCODING</span>=<span class="number">0</span>x1F5:<span class="number">0</span>x19:<span class="number">0</span>x34</div><div class="line"><span class="attr">PATH</span>=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin</div><div class="line"><span class="attr">PWD</span>=/Users/yakuncyk</div><div class="line"><span class="attr">LANG</span>=zh_CN.UTF-<span class="number">8</span></div><div class="line"><span class="attr">ITERM_PROFILE</span>=Default</div><div class="line"><span class="attr">XPC_FLAGS</span>=<span class="number">0</span>x0</div><div class="line"><span class="attr">XPC_SERVICE_NAME</span>=<span class="number">0</span></div><div class="line"><span class="attr">SHLVL</span>=<span class="number">1</span></div><div class="line"><span class="attr">HOME</span>=/Users/yakuncyk</div><div class="line"><span class="attr">ITERM_SESSION_ID</span>=w0t0p0</div><div class="line"><span class="attr">LOGNAME</span>=yakuncyk</div><div class="line"><span class="attr">_</span>=/usr/bin/env</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>http://yardfarmer.github.io/2017/02/01/%E6%B6%88%E9%99%A4%E5%87%BD%E6%95%B0%E7%9A%84%E6%9C%AF%E8%AF%AD%E6%AD%A7%E4%B9%89/</url>
      <content type="html"><![CDATA[<p>#消除函数的术语歧义<br><figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line"></div><div class="line"><span class="javascript">    <span class="comment">/**</span></span></div><div class="line">     * 命名函数表达式 (named function expression)</div><div class="line">     *</div><div class="line">     * 真正的函数名是: add</div><div class="line">     * 函数 add 赋给 变量 add2</div><div class="line">     *</div><div class="line">     * 用在 debug 调试, 或者递归调用时获取函数名</div><div class="line">     *</div><div class="line">     * @param a</div><div class="line">     * @param b</div><div class="line">     * @returns &#123;*&#125;</div><div class="line">     */</div><div class="line">    <span class="keyword">var</span> add2 = <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'function name:'</span>, <span class="built_in">arguments</span>.callee.name);</div><div class="line">        <span class="keyword">return</span> a + b;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(add2(<span class="number">1</span>,<span class="number">3</span>), add2.name);</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 未命名函数表达式, 简称函数表达式,</div><div class="line">     * 也称为 匿名函数 (anonymous function)</div><div class="line">     * @returns &#123;&#123;&#125;&#125;</div><div class="line">     */</div><div class="line">    <span class="keyword">var</span> unNameFunc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'function name:'</span>, <span class="built_in">arguments</span>.callee.name);</div><div class="line">        <span class="keyword">return</span> &#123;&#125;;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(unNameFunc(), unNameFunc.name); <span class="comment">// ""</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 函数声明, 与匿名函数表达式很相似</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 扩展</div><div class="line">     */</div><div class="line"></div><div class="line">    <span class="comment">// 函数表达式, 通过运算符 `!` 连接后面的函数声明,</span></div><div class="line">    <span class="comment">// 转换成了函数表达式, 而函数表达式是可以立即执行的</span></div><div class="line">    !<span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'hello bar!'</span>);</div><div class="line">    &#125;();</div><div class="line"></div><div class="line">    <span class="comment">// 函数表达式, 通过运算符 `+` 连接后面的函数声明,</span></div><div class="line">    <span class="comment">// 转换成了函数表达式, 而函数表达式是可以立即执行的</span></div><div class="line">    +<span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'hello bar+'</span>);</div><div class="line">    &#125;();</div><div class="line"></div><div class="line">    <span class="comment">// 函数表达式, 通过运算符 `()` 连接后面的函数声明,</span></div><div class="line">    <span class="comment">// 转换成了函数表达式, 而函数表达式是可以立即执行的</span></div><div class="line">    (<span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'hello bar()'</span>);</div><div class="line">    &#125;)();</div><div class="line"></div><div class="line"><span class="comment">//    函数声明,不是语句, 不能执行</span></div><div class="line"><span class="comment">//    function bar() &#123;</span></div><div class="line"><span class="comment">//        console.log('hello bar');</span></div><div class="line"><span class="comment">//    &#125;();</span></div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>http://yardfarmer.github.io/2017/02/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<p>#设计模式简介</p>
<p>##工厂模式<br>生产具有相同父类接口的对象</p>
<p>##模块模式<br>对象字面量的形式，内部实现分为 对象字面量 和 function， 对象字面量的特点是兄弟函数之间互相调用需要 this.sibingSomeMethod, 没有办法直接或得到， 都需要先找到根元素，然后查找； 如果采用 function 的形式就很方便了， 内部 function 可以直接互调， 而且可以通过 return 实现私有作用域， 只返回公共部分</p>
<p>##单例模式</p>
<p>各个模块之间要公用的一个对象， 保证是在使用同一个对象， 需要通过这个对象作为桥梁，或者使用这个对象作为公共资源</p>
<p>##建造模式</p>
<p>##观察者模式<br>模型可以建模成，人员管理。 领导看成观察者， 外界有事儿都直接找领导，需要通知员工的时候直接通知领导，领导根据名单去批量分发， 名单中的员工就都知道了，来新人了领导需把新人录入名单，员工离职了领导需要在名单中去除离职员工记录。</p>
<p>主要用于统一管理信息，状态改变时的管理，状态分发， 信息分发。一个被称作被观察者的对象，维护一组被称为观察者的对象，这些对象依赖于被观察者，被观察者自动将自身的状态的任何变化通知给它们。 </p>
]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>http://yardfarmer.github.io/2017/02/01/%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E7%9A%84%E5%88%86%E7%B1%BB/</url>
      <content type="html"><![CDATA[<p>#代码质量的分类</p>
<p>##代码质量</p>
<ol>
<li>Coding style</li>
<li>JSLint/JSHint</li>
<li>CSSLint</li>
<li>Markup Validation Service</li>
</ol>
<p>##单元测试</p>
<ol>
<li>QUnit/Jasmine</li>
<li>Mocha/Should/Chai/Expect</li>
</ol>
<p>##自动化测试</p>
<ol>
<li>WebDriver/Karma Runner/Sahi</li>
<li>phantomjs</li>
<li><a href="https://github.com/laurentj/slimerjs" target="_blank" rel="external">https://github.com/laurentj/slimerjs</a></li>
<li><a href="http://casperjs.org/" target="_blank" rel="external">http://casperjs.org/</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[实际情况是什么样的]]></title>
      <url>http://yardfarmer.github.io/2017/02/01/what_is_true/</url>
      <content type="html"><![CDATA[<p>不去亲身体验，是感受不到身临其境的感受的。 考虑了很久的事，不踏出门槛，可能永远也体验不到真实的情况。 晚上出门走走，发现往日喧嚣杂乱的街道变得明亮，清净而又不时弥漫芳香。因为时机，环境变了，人心里『第一感受』 并不总是那么准确。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[XMLHttpRequest发送put,delete请求]]></title>
      <url>http://yardfarmer.github.io/2017/02/01/2012-08-03-XMLHttpRequest%E5%8F%91%E9%80%81put,delete%E8%AF%B7%E6%B1%82/</url>
      <content type="html"><![CDATA[<p>记得之前有同事问过，能不能用js实现http的put和delete请求。最近看了点REST相关的东西，对HTTP协议的构造也有一些新的认识，原来很多请求已经背离了最早设计HTTP协议的初衷，get/post/put/delete分别对应着查/改/增/删，这很像数据库里的select/ update/insert/delete,感觉HTTP协议当初设计的时候是参考了数据库的操作（RFC最初于1969年制定，但是包含http 1.1的规范 RFC 2616于1996年才制定的，关系数据库是1970年提出的理论，具体是个神马关系，不太好说），我们几乎所有的操作都是get和post，put和delete用得非常少，可能与form目前只能使用get和post有关，html5规范中据说有想<a href="http://www.w3.org/TR/html5/association-of-controls-and-forms.html#attr-fs-method" target="_blank" rel="external">实现form</a>的put和delete,但是最后放弃了，不知何故。</p>
<p>先放几个与REST相关的链接，有些我还没有消化透：</p>
<ul>
<li><a href="http://www.w3.org/QA/2008/10/understanding-http-put.html" target="_blank" rel="external">http://www.w3.org/QA/2008/10/understanding-http-put.html</a></li>
<li><a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html" target="_blank" rel="external">http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html</a></li>
<li><a href="http://www.cnblogs.com/hyddd/archive/2009/03/31/1426026.html" target="_blank" rel="external">http://www.cnblogs.com/hyddd/archive/2009/03/31/1426026.html</a></li>
<li><a href="http://hi.baidu.com/msingle/blog/item/410517229971d1b54623e805.html" target="_blank" rel="external">http://hi.baidu.com/msingle/blog/item/410517229971d1b54623e805.html</a></li>
<li><a href="http://q.sohu.com/forum/5/topic/3464168" target="_blank" rel="external">http://q.sohu.com/forum/5/topic/3464168</a><br>那么到底能不能用js实现put和delete呢？</li>
</ul>
<p>大家都知道XMLHttpRequest对象的open方法第一个参数就是method,有多少人用过除了”GET”和”POST”之外的参数呢？试验了一个，发现了好玩的，哈哈，例子猛击<a href="/demos/1343967804284_httpmethod_test.html" title="点开看看呗">这里</a>，请在不同的浏览器中测试，服务器返回的是请求的method。</p>
<p>在IE6，7，8下，自己乱定义的method jser.me光荣牺牲，报错了，但是put,delete都很正常，并且请求过一次的post，居然也成get了，</p>
<p>在FF,chrome下不仅put,delete很正常，jser.me这个自定义的方法也给力的完成了</p>
<p>小试验证明put和delete是完全可以用XMLHttpRequest来实现的~~~</p>
<p>PS:在本机(apache)测试的时候jser.me是很完美的完成了，在服务器上到nginx时被拦了，看配置也没找到哪出问题了，囧</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[github.io绑定域名]]></title>
      <url>http://yardfarmer.github.io/2017/02/01/2012-11-17-%E8%87%AA%E5%AE%9A%E4%B9%89github-pages%E7%9A%84%E5%9F%9F%E5%90%8D/</url>
      <content type="html"><![CDATA[<p>##什么是github pages<br><a href="http://pages.github.com/" target="_blank" rel="external">github pages</a>是<a href="https://github.io" target="_blank" rel="external">github</a>提供的免费的存放网页的服务，有了它，你就可以轻松使用静态网页构建一个网站，比如搭建笔记的博客.并且如果你有自己的域名，它可以绑定域名。</p>
<p>##设置你的域名dns指向你的github二级域名<br>然后我们在域名控制的地方添加一个A纪录，我的域名基本上都是在godaddy上买的，godaddy上默认的dns经常被墙，所以我把dns换成了国内靠谱的<a href="http://dnspod.cn" target="_blank" rel="external">dnspod.cn</a>。如下设置<br><img src="/images/codesnip_20140804201809.png" alt="20121117181954.png"></p>
<p>正常情况下，几分钟就可以访问了，例如你现在可以访问<a href="http://codinglion.me" target="_blank" rel="external">我的博客</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>http://yardfarmer.github.io/2017/02/01/%E5%89%8D%E7%AB%AF%E6%96%B0%E4%BA%BA%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<p>#1688采购部前端新人入门</p>
<p>##一、前端基础（一个月）</p>
<p>1：html基础</p>
<p>2：css基础</p>
<p>3：静态demo实现</p>
<p>4：js基础</p>
<p>5：DOM基础</p>
<p>6：事件绑定</p>
<p>7：jQuery基础</p>
<p>##二、前端框架</p>
<p>1、lofty常用组件</p>
<p>2、HTML开发规范</p>
<p>3、CSS开发规范</p>
<p>4、JS开发规范</p>
<p>5、切图技巧</p>
<p>6、常用框架，API、工具</p>
<p>##三、前端页面实现</p>
<p>1：运营页面环境</p>
<p>1.1 DCMS简介</p>
<p>1.2 报名工具</p>
<p>1.3 盒子组件</p>
<p>1.4 采购数据源</p>
<p>2：业务实现, 搭建开发环境, 开发流程及部署</p>
<p>2.3 熟悉DPL</p>
<p>3、浏览器调试工具</p>
<p>四、页面分析</p>
<p>1：页面打点</p>
<p>2：页面数据分析</p>
<p>3：页面性能基本要求</p>
<p>五、几个示例分析</p>
<p>Labels:</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[介绍js-assessment]]></title>
      <url>http://yardfarmer.github.io/2017/02/01/2013-03-30-%E4%BB%8B%E7%BB%8Djs-assessment/</url>
      <content type="html"><![CDATA[<p>##js-assessment简介<br><a href="https://github.com/rmurphey/js-assessment" target="_blank" rel="external">js-assessment</a>是一个帮助你通过写单元测试来学习js的小项目，这是一个非常有意思的东西，建议你花时间把这个做完，肯定受益匪浅。</p>
<p>##怎么玩<br>需要你的电脑上有nodejs环境</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git clone https:<span class="comment">//github.com/rmurphey/js-assessment.git</span></div><div class="line">cd js-assessment</div><div class="line">npm install </div><div class="line">node bin/serve</div></pre></td></tr></table></figure>
<p>接着打开你的浏览器访问 <a href="http://localhost:4444" target="_blank" rel="external">http://localhost:4444</a></p>
<p>然后用你的编辑器到目录app下去编辑每个文件，刷新浏览器，使所有的测试用命都能通过。</p>
<p>如果你实在看不懂英文描述那些方法要求的实现结果，可以到tests目录下的app里看每个测试用例是怎么写的，可以学到不少东西，当然不要作弊啊</p>
<p>##学到的一些东西</p>
<ul>
<li>BDD方式开发程序挺有趣的</li>
<li>单纯针对语言特性的单元测试很简单</li>
<li>两个递归的小例子很好玩</li>
<li>写测试用例要覆盖全面，包括一些不常见的情况和边界情况</li>
<li>mocha写测试用例很爽</li>
<li>好的实现方式也更容易测试，比如异步的时候使用promise模式</li>
</ul>
<p>##答案<br>是题就会有答案，当然也只是参考答案，没有绝对答案的，<a href="https://github.com/rmurphey/js-assessment-answers" target="_blank" rel="external">项目自带的</a>、<a href="https://github.com/jserme/js-assessment/tree/master/app" target="_blank" rel="external">小哥我做的</a></p>
<p>##总结<br>完成它和写这个文章相距的时间有点长，当时的有些感悟都忘记了。。。所以，以后还是想到了，直接就写，google reader要关闭了，多写了点文章吧。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[前端优化的小范围记录]]></title>
      <url>http://yardfarmer.github.io/2017/02/01/2013-08-10-%E9%87%8D%E5%B8%83%E5%B1%80%E5%92%8C%E9%87%8D%E7%BB%98/</url>
      <content type="html"><![CDATA[<h2 id="HTML-方面"><a href="#HTML-方面" class="headerlink" title="HTML 方面"></a>HTML 方面</h2><h3 id="重布局和重绘"><a href="#重布局和重绘" class="headerlink" title="重布局和重绘"></a>重布局和重绘</h3><p>重布局和重绘，是 web 页面中最常见的重量级操作。当浏览器需要更新它的呈现模型时，就会发生重布局和重绘。只要加载页面就会发生一次重布局和重绘(浏览器在加载页面时必须至少绘制一次页面）, 但在动态页面的应用中，会发生很多次的重布局和重绘。</p>
<ul>
<li>当改变样式时候，而不该页面的几何布局，将发生重绘。隐藏一个元素，或者改变一个元素的背景色时，都将导致一次重绘</li>
<li>当对页面的结构进行更新时，将导致重布局。从文档中移除元素，或者将元素添加到文档中、改变元素的大小或者改变元素的某些属性，都将导致页面重布局，重布局的代价比重绘大，它涉及到使用当前的 DOM、CSS 的定义，重新计算页面的几何结构。</li>
</ul>
<h3 id="优化措施"><a href="#优化措施" class="headerlink" title="优化措施"></a>优化措施</h3><p> 最少次数的更新 DOM</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="built_in">console</span>.time(<span class="string">'one append, one dom cost'</span>)</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</div><div class="line">		$(<span class="string">"#main table"</span>).append(<span class="string">"&lt;tr&gt;&lt;td&gt;append to row: &lt;/td&gt;&lt;td&gt;"</span> + i + <span class="string">"&lt;/td&gt;&lt;/tr&gt;"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">console</span>.timeEnd(<span class="string">'one append, one dom cost'</span>);</div><div class="line">	<span class="comment">// =&gt; one append, one dom cost: 4952.122ms </span></div><div class="line"></div><div class="line"></div><div class="line">	<span class="built_in">console</span>.time(<span class="string">'accumulate and append cost'</span>);</div><div class="line">	<span class="keyword">var</span> tableRows = <span class="string">""</span>;</div><div class="line">	<span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++ ) &#123;</div><div class="line">		tableRows += <span class="string">"&lt;tr&gt;&lt;td&gt;accumulate and append, now is at :&lt;/td&gt;&lt;td&gt;"</span>+ i +<span class="string">"&lt;/td&gt;&lt;/tr&gt;"</span>;</div><div class="line">	&#125;</div><div class="line">    $(<span class="string">"#main table"</span>).append(tableRows);</div><div class="line">	<span class="built_in">console</span>.timeEnd(<span class="string">'accumulate and append cost'</span>);</div><div class="line">	<span class="comment">// =&gt; accumulate and append cost: 117.491ms</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>采用一次想操作 dom 的方法比每次都操作 dom 快了 42 倍。<br><img src="./images/codesnip_20141229215927.png" alt="显著对比"></p>
<h2 id="JS-方面"><a href="#JS-方面" class="headerlink" title="JS 方面"></a>JS 方面</h2><h3 id="缓存计算值"><a href="#缓存计算值" class="headerlink" title="缓存计算值"></a>缓存计算值</h3><h3 id="恰当的适用循环"><a href="#恰当的适用循环" class="headerlink" title="恰当的适用循环"></a>恰当的适用循环</h3><ul>
<li>for (最快的)</li>
<li>$.each(item)</li>
<li><p>Array.forEach(item,index)</p>
<p>  后两种采用回调的方式，涉及到准备执行上下文,进栈出栈的操作，并且由于所有的操作都在函数进行， 当引用了外部作用域的变量，循环体中的代码会反复的在作用链中向上查找。传统的 for 循环在包含它的上下文中执行，没有创建新的执行上下文的负担，同时循环外的变量依然保持在当前作用域中，省去了作用域的向上查找。 </p>
</li>
</ul>
<h2 id="CSS-方面"><a href="#CSS-方面" class="headerlink" title="CSS 方面"></a>CSS 方面</h2><h3 id="高效的使用选择器"><a href="#高效的使用选择器" class="headerlink" title="高效的使用选择器"></a>高效的使用选择器</h3><ul>
<li>解析引擎自右向左的计算每条规则</li>
<li>尽可能的使用具体化的选择器，id 好于 tag</li>
<li><p>避免不必要的冗余</p>
<p>  无论哪种浏览器，适用 id 选择器或单个类选择器都是选择元素最快的方式。</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#id"</span>)</div><div class="line">$(<span class="string">".class"</span>)</div><div class="line"></div><div class="line"><span class="comment">//  以下为反模式</span></div><div class="line">$(<span class="string">"section div div div &gt; div #id"</span>)</div><div class="line">$(<span class="string">"section div div div &gt; div .class"</span>)</div><div class="line">$(<span class="string">"section div div div p:not('.class')"</span>)</div></pre></td></tr></table></figure>
<p>适当的使用选择器上下文，如果上下文就是费了九牛加二虎的力气选出来的，不如不加</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">".classname"</span>)</div><div class="line"></div><div class="line">$(<span class="string">".classname"</span>,<span class="string">"#id"</span>)  <span class="comment">// 添加一个简单明确的上下文比搜索整个 dom 快些</span></div></pre></td></tr></table></figure>
<h2 id="HTTP-方向"><a href="#HTTP-方向" class="headerlink" title="HTTP 方向"></a>HTTP 方向</h2><ol>
<li>cookie</li>
<li>多域名</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jQuery工具方法]]></title>
      <url>http://yardfarmer.github.io/2017/02/01/2013-01-09.jquery%E5%B7%A5%E5%85%B7%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>jQuery函数库提供了一个jQuery对象（简写为$），这个对象本身是一个构造函数，可以用来生成jQuery对象的实例。有了实例以后，就可以调用许多针对实例的方法，它们定义jQuery.prototype对象上面（简写为$.fn）。</p>
<p>除了实例对象的方法以外，jQuery对象本身还提供一些方法（即直接定义jQuery对象上面），不需要生成实例就能使用。由于这些方法类似“通用工具”的性质，所以我们把它们称为“工具方法”（utilities）。</p>
<h2 id="常用工具方法"><a href="#常用工具方法" class="headerlink" title="常用工具方法"></a>常用工具方法</h2><p><strong>（1）$.trim</strong></p>
<p>$.trim方法用于移除字符串头部和尾部多余的空格。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$.trim(<span class="string">'   Hello   '</span>) <span class="comment">// Hello</span></div></pre></td></tr></table></figure>
<p><strong>（2）$.contains</strong></p>
<p>$.contains方法返回一个布尔值，表示某个DOM元素（第二个参数）是否为另一个DOM元素（第一个参数）的下级元素。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$.contains(<span class="built_in">document</span>.documentElement, <span class="built_in">document</span>.body); </div><div class="line"><span class="comment">// true</span></div><div class="line"></div><div class="line">$.contains(<span class="built_in">document</span>.body, <span class="built_in">document</span>.documentElement); </div><div class="line"><span class="comment">// false</span></div><div class="line"></div><div class="line"></div><div class="line">$.contains 源码解析：</div><div class="line"></div><div class="line"><span class="built_in">document</span>.ownerDocument; <span class="comment">// =&gt; null;</span></div><div class="line"></div><div class="line">contains = hasCompare || rnative.test( docElem.contains ) ?</div><div class="line">		<span class="function"><span class="keyword">function</span>(<span class="params"> a, b </span>) </span>&#123;</div><div class="line">			<span class="keyword">var</span> adown = a.nodeType === <span class="number">9</span> ? a.documentElement : a,</div><div class="line">				bup = b &amp;&amp; b.parentNode;</div><div class="line">			<span class="keyword">return</span> a === bup || !!( bup &amp;&amp; bup.nodeType === <span class="number">1</span> &amp;&amp; (</div><div class="line">				adown.contains ?</div><div class="line">					adown.contains( bup ) :</div><div class="line">					a.compareDocumentPosition &amp;&amp; a.compareDocumentPosition( bup ) &amp; <span class="number">16</span></div><div class="line">			));</div><div class="line">		&#125; :</div><div class="line">		<span class="function"><span class="keyword">function</span>(<span class="params"> a, b </span>) </span>&#123;</div><div class="line">			<span class="keyword">if</span> ( b ) &#123;</div><div class="line">				<span class="keyword">while</span> ( (b = b.parentNode) ) &#123;</div><div class="line">					<span class="keyword">if</span> ( b === a ) &#123;</div><div class="line">						<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">		&#125;;</div></pre></td></tr></table></figure>
<p><strong>（3）$.each，$.map</strong></p>
<p>$.each方法用于遍历数组和对象，然后返回原始对象。它接受两个参数，分别是数据集合和回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$.each([ <span class="number">52</span>, <span class="number">97</span> ], <span class="function"><span class="keyword">function</span>(<span class="params"> index, value </span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log( index + <span class="string">": "</span> + value );</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 0: 52 </span></div><div class="line"><span class="comment">// 1: 97 </span></div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  <span class="attr">p1</span>: <span class="string">"hello"</span>,</div><div class="line">  <span class="attr">p2</span>: <span class="string">"world"</span></div><div class="line">&#125;;</div><div class="line">$.each( obj, <span class="function"><span class="keyword">function</span>(<span class="params"> key, value </span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log( key + <span class="string">": "</span> + value );</div><div class="line">&#125;);</div><div class="line"><span class="comment">// p1: hello</span></div><div class="line"><span class="comment">// p2: world</span></div></pre></td></tr></table></figure>
<p>需要注意的，jQuery对象实例也有一个each方法（$.fn.each），两者的作用差不多。</p>
<p>$.map方法也是用来遍历数组和对象，但是会返回一个新对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> a = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>];</div><div class="line">a = $.map(a, <span class="function"><span class="keyword">function</span> (<span class="params">n, i</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> (n.toUpperCase() + i);</div><div class="line">&#125;);</div><div class="line"><span class="comment">// ["A0", "B1", "C2", "D3", "E4"]</span></div></pre></td></tr></table></figure>
<p><strong>（4）$.inArray</strong></p>
<p>$.inArray方法返回一个值在数组中的位置（从0开始）。如果该值不在数组中，则返回-1。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</div><div class="line">$.inArray(<span class="number">4</span>,a) <span class="comment">// 3</span></div></pre></td></tr></table></figure>
<p><strong>（5）$.extend</strong></p>
<p>$.extend方法用于将多个对象合并进第一个对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> o1 = &#123;<span class="attr">p1</span>:<span class="string">'a'</span>,<span class="attr">p2</span>:<span class="string">'b'</span>&#125;;</div><div class="line"><span class="keyword">var</span> o2 = &#123;<span class="attr">p1</span>:<span class="string">'c'</span>&#125;;</div><div class="line"></div><div class="line">$.extend(o1,o2);</div><div class="line">o1.p1 <span class="comment">// "c"</span></div></pre></td></tr></table></figure>
<p>$.extend的另一种用法是生成一个新对象，用来继承原有对象。这时，它的第一个参数应该是一个空对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> o1 = &#123;<span class="attr">p1</span>:<span class="string">'a'</span>,<span class="attr">p2</span>:<span class="string">'b'</span>&#125;;</div><div class="line"><span class="keyword">var</span> o2 = &#123;<span class="attr">p1</span>:<span class="string">'c'</span>&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> o = $.extend(&#123;&#125;,o1,o2);</div><div class="line">o</div><div class="line"><span class="comment">// Object &#123;p1: "c", p2: "b"&#125;</span></div></pre></td></tr></table></figure>
<p>默认情况下，extend方法生成的对象是“浅拷贝”，也就是说，如果某个属性是对象或数组，那么只会生成指向这个对象或数组的指针，而不会复制值。如果想要“深拷贝”，可以在extend方法的第一个参数传入布尔值true。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> o1 = &#123;<span class="attr">p1</span>:[<span class="string">'a'</span>,<span class="string">'b'</span>]&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> o2 = $.extend(&#123;&#125;,o1);</div><div class="line"><span class="keyword">var</span> o3 = $.extend(<span class="literal">true</span>,&#123;&#125;,o1);</div><div class="line"></div><div class="line">o1.p1[<span class="number">0</span>]=<span class="string">'c'</span>;</div><div class="line"></div><div class="line">o2.p1 <span class="comment">// ["c", "b"]</span></div><div class="line">o3.p1 <span class="comment">// ["a", "b"]</span></div></pre></td></tr></table></figure>
<p>上面代码中，o2是浅拷贝，o3是深拷贝。结果，改变原始数组的属性，o2会跟着一起变，而o3不会。</p>
<p><strong>（6）$.proxy</strong></p>
<p>$.proxy方法类似于ECMAScript 5的bind方法，可以绑定函数的上下文（也就是this对象）和参数，返回一个新函数。</p>
<p>jQuery.proxy()的主要用处是为回调函数绑定上下文对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> o = &#123;</div><div class="line">	<span class="attr">type</span>: <span class="string">"object"</span>,</div><div class="line">	<span class="attr">test</span>: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="keyword">this</span>.type);</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">$(<span class="string">"#button"</span>)</div><div class="line">  .on(<span class="string">"click"</span>, o.test) <span class="comment">// 无输出</span></div><div class="line">  .on(<span class="string">"click"</span>, $.proxy(o.test, o)) <span class="comment">// object</span></div></pre></td></tr></table></figure>
<p>上面的代码中，第一个回调函数没有绑定上下文，所以结果为空，没有任何输出；第二个回调函数将上下文绑定为对象o，结果就为object。</p>
<p>这个例子的另一种等价的写法是：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$(<span class="string">"#button"</span>).on( <span class="string">"click"</span>, $.proxy(o, test))</div></pre></td></tr></table></figure>
<p>上面代码的$.proxy(o, test)的意思是，将o的方法test与o绑定。</p>
<p>这个例子表明，proxy方法的写法主要有两种。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">jQuery.proxy(<span class="function"><span class="keyword">function</span>, <span class="title">context</span>)</span></div><div class="line"></div><div class="line">// <span class="title">or</span></div><div class="line"></div><div class="line"><span class="title">jQuery</span>.<span class="title">proxy</span>(<span class="params">context, name</span>)</div></pre></td></tr></table></figure>
<p>第一种写法是为函数（function）指定上下文对象（context），第二种写法是指定上下文对象（context）和它的某个方法名（name）。</p>
<p>再看一个例子。正常情况下，下面代码中的this对象指向发生click事件的DOM对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$(<span class="string">'#myElement'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $(<span class="keyword">this</span>).addClass(<span class="string">'aNewClass'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>如果我们想让回调函数延迟运行，使用setTimeout方法，代码就会出错，因为setTimeout使得回调函数在全局环境运行，this将指向全局对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$(<span class="string">'#myElement'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="keyword">this</span>).addClass(<span class="string">'aNewClass'</span>);</div><div class="line">    &#125;, <span class="number">1000</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面代码中的this，将指向全局对象window，导致出错。</p>
<p>这时，就可以用proxy方法，将this对象绑定到myElement对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$(<span class="string">'#myElement'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    setTimeout($.proxy(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="keyword">this</span>).addClass(<span class="string">'aNewClass'</span>); </div><div class="line">    &#125;, <span class="keyword">this</span>), <span class="number">1000</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>（7）$.data，$.removeData</strong></p>
<p>$.data方法可以用来在DOM节点上储存数据。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 存入数据</span></div><div class="line">$.data(<span class="built_in">document</span>.body, <span class="string">"foo"</span>, <span class="number">52</span> );</div><div class="line"></div><div class="line"><span class="comment">// 读取数据</span></div><div class="line">$.data(<span class="built_in">document</span>.body, <span class="string">"foo"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 读取所有数据</span></div><div class="line">$.data(<span class="built_in">document</span>.body);</div></pre></td></tr></table></figure>
<p>上面代码在网页元素body上储存了一个键值对，键名为“foo”，键值为52。</p>
<p>$.removeData方法用于移除$.data方法所储存的数据。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$.data(div, <span class="string">"test1"</span>, <span class="string">"VALUE-1"</span>);</div><div class="line">$.removeData(div, <span class="string">"test1"</span>);</div></pre></td></tr></table></figure>
<p><strong>（8）$.parseHTML，$.parseJSON，$.parseXML</strong></p>
<p>$.parseHTML方法用于将字符串解析为DOM对象。</p>
<p>$.parseJSON方法用于将JSON字符串解析为JavaScript对象，作用与原生的JSON.parse()类似。但是，jQuery没有提供类似JSON.stringify()的方法，即不提供将JavaScript对象转为JSON对象的方法。</p>
<p>$.parseXML方法用于将字符串解析为XML对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> html = $.parseHTML(<span class="string">"hello, &lt;b&gt;my name is&lt;/b&gt; jQuery."</span>);</div><div class="line"><span class="keyword">var</span> obj = $.parseJSON(<span class="string">'&#123;"name": "John"&#125;'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> xml = <span class="string">"&lt;rss version='2.0'&gt;&lt;channel&gt;&lt;title&gt;RSS Title&lt;/title&gt;&lt;/channel&gt;&lt;/rss&gt;"</span>;</div><div class="line"><span class="keyword">var</span> xmlDoc = $.parseXML(xml);</div></pre></td></tr></table></figure>
<p><strong>（9）$.makeArray</strong></p>
<p>$.makeArray方法将一个类似数组的对象，转化为真正的数组。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> a = $.makeArray(<span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>));</div></pre></td></tr></table></figure>
<p><strong>（10）$.merge</strong></p>
<p>$.merge方法用于将一个数组（第二个参数）合并到另一个数组（第一个参数）之中。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> a1 = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>];</div><div class="line"><span class="keyword">var</span> a2 = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</div><div class="line">$.merge(a1, a2);</div><div class="line"></div><div class="line">a1</div><div class="line"><span class="comment">// [0, 1, 2, 2, 3, 4]</span></div></pre></td></tr></table></figure>
<p><strong>（11）$.now</strong></p>
<p>$.now方法返回当前时间距离1970年1月1日00:00:00 UTC对应的毫秒数，等同于(new Date).getTime()。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$.now()</div><div class="line"><span class="comment">// 1388212221489</span></div></pre></td></tr></table></figure>
<h2 id="判断数据类型的方法"><a href="#判断数据类型的方法" class="headerlink" title="判断数据类型的方法"></a>判断数据类型的方法</h2><p>jQuery提供一系列工具方法，用来判断数据类型，以弥补JavaScript原生的typeof运算符的不足。以下方法对参数进行判断，返回一个布尔值。</p>
<ul>
<li>jQuery.isArray()：是否为数组。</li>
<li>jQuery.isEmptyObject()：是否为空对象（不含可枚举的属性）。</li>
<li>jQuery.isFunction()：是否为函数。</li>
<li>jQuery.isNumeric()：是否为数值（整数或浮点数）。</li>
<li>jQuery.isPlainObject()：是否为使用“{}”或“new Object”生成的对象，而不是浏览器原生提供的对象。</li>
<li>jQuery.isWindow()：是否为window对象。</li>
<li>jQuery.isXMLDoc()：判断一个DOM节点是否处于XML文档之中。</li>
</ul>
<p>下面是一些例子。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$.isEmptyObject(&#123;&#125;) <span class="comment">// true</span></div><div class="line">$.isPlainObject(<span class="built_in">document</span>.location) <span class="comment">// false</span></div><div class="line">$.isWindow(<span class="built_in">window</span>) <span class="comment">// true</span></div><div class="line">$.isXMLDoc(<span class="built_in">document</span>.body) <span class="comment">// false</span></div></pre></td></tr></table></figure>
<p>除了上面这些方法以外，还有一个$.type方法，可以返回一个变量的数据类型。它的实质是用Object.prototype.toString方法读取对象内部的[[Class]]属性（参见《标准库》的Object对象一节）。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$.type(<span class="regexp">/test/</span>) <span class="comment">// "regexp"</span></div></pre></td></tr></table></figure>
<h2 id="Ajax操作"><a href="#Ajax操作" class="headerlink" title="Ajax操作"></a>Ajax操作</h2><h3 id="ajax"><a href="#ajax" class="headerlink" title="$.ajax"></a>$.ajax</h3><p>jQuery对象上面还定义了Ajax方法（$.ajax()），用来处理Ajax操作。调用该方法后，浏览器就会向服务器发出一个HTTP请求。</p>
<p>$.ajax()的用法主要有两种。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$.ajax(url[, options])</div><div class="line">$.ajax([options])</div></pre></td></tr></table></figure>
<p>上面代码中的url，指的是服务器网址，options则是一个对象参数，设置Ajax请求的具体参数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$.ajax(&#123;</div><div class="line">  <span class="attr">async</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">url</span>: <span class="string">'/url/to/json'</span>,</div><div class="line">  <span class="attr">type</span>: <span class="string">'GET'</span>,</div><div class="line">  <span class="attr">data</span> : &#123; <span class="attr">id</span> : <span class="number">123</span> &#125;,</div><div class="line">  <span class="attr">dataType</span>: <span class="string">'json'</span>,</div><div class="line">  <span class="attr">timeout</span>: <span class="number">30000</span>,</div><div class="line">  <span class="attr">success</span>: successCallback,</div><div class="line">  <span class="attr">error</span>: errorCallback,</div><div class="line">  <span class="attr">complete</span>: completeCallback,</div><div class="line">  <span class="attr">statusCode</span>: &#123;</div><div class="line">        <span class="number">404</span>: handler404,</div><div class="line">        <span class="number">500</span>: handler500</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">successCallback</span>(<span class="params">json</span>) </span>&#123;</div><div class="line">	$(<span class="string">'&lt;h1/&gt;'</span>).text(json.title).appendTo(<span class="string">'body'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">errorCallback</span>(<span class="params">xhr, status</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'出问题了！'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">completeCallback</span>(<span class="params">xhr, status</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'Ajax请求已结束。'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码的对象参数有多个属性，含义如下：</p>
<ul>
<li>accepts：将本机所能处理的数据类型，告诉服务器。</li>
<li>async：该项默认为true，如果设为false，则表示发出的是同步请求。</li>
<li>beforeSend：指定发出请求前，所要调用的函数，通常用来对发出的数据进行修改。</li>
<li>cache：该项默认为true，如果设为false，则浏览器不缓存返回服务器返回的数据。注意，浏览器本身就不会缓存POST请求返回的数据，所以即使设为false，也只对HEAD和GET请求有效。</li>
<li>complete：指定当HTTP请求结束时（请求成功或请求失败的回调函数，此时已经运行完毕）的回调函数。不管请求成功或失败，该回调函数都会执行。它的参数为发出请求的原始对象以及返回的状态信息。</li>
<li>contentType：发送到服务器的数据类型。</li>
<li>context：指定一个对象，作为所有Ajax相关的回调函数的this对象。</li>
<li>crossDomain：该属性设为true，将强制向相同域名发送一个跨域请求（比如JSONP）。</li>
<li>data：向服务器发送的数据，如果使用GET方法，此项将转为查询字符串，附在网址的最后。</li>
<li>dataType：向服务器请求的数据类型，可以设为text、html、script、json、jsonp和xml。</li>
<li>error：请求失败时的回调函数，函数参数为发出请求的原始对象以及返回的状态信息。</li>
<li>headers：指定HTTP请求的头信息。</li>
<li>ifModified：如果该属性设为true，则只有当服务器端的内容与上次请求不一样时，才会发出本次请求。</li>
<li>jsonp：指定JSONP请求“callback=?”中的callback的名称。</li>
<li>jsonpCallback: 指定JSONP请求中回调函数的名称。</li>
<li>mimeType：指定HTTP请求的mime type。</li>
<li>password：指定HTTP认证所需要的密码。</li>
<li>statusCode：值为一个对象，为服务器返回的状态码，指定特别的回调函数。</li>
<li>success：请求成功时的回调函数，函数参数为服务器传回的数据、状态信息、发出请求的原始对象。</li>
<li>timeout: 等待的最长毫秒数。如果过了这个时间，请求还没有返回，则自动将请求状态改为失败。</li>
<li>type：向服务器发送信息所使用的HTTP动词，默认为GET，其他动词有POST、PUT、DELETE。</li>
<li>url：服务器端网址。这是唯一必需的一个属性，其他属性都可以省略。</li>
<li>username：指定HTTP认证的用户名。</li>
<li>xhr：指定生成XMLHttpRequest对象时的回调函数。</li>
</ul>
<p>这些参数之中，url可以独立出来，作为ajax方法的第一个参数。也就是说，上面代码还可以写成下面这样。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$.ajax(<span class="string">'/url/to/json'</span>,&#123;</div><div class="line">  <span class="attr">type</span>: <span class="string">'GET'</span>,</div><div class="line">  <span class="attr">dataType</span>: <span class="string">'json'</span>,</div><div class="line">  <span class="attr">success</span>: successCallback,</div><div class="line">  <span class="attr">error</span>: errorCallback</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>作为向服务器发送的数据，data属性也可以写成一个对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">    url: <span class="string">'/remote/url'</span>,</div><div class="line">    <span class="attr">data</span>: &#123;</div><div class="line">        <span class="attr">param1</span>: <span class="string">'value1'</span>,</div><div class="line">        <span class="attr">param2</span>: <span class="string">'value2'</span></div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 相当于</span></div><div class="line">$.ajax(&#123;</div><div class="line">    <span class="attr">url</span>: <span class="string">'/remote/url?param1=value1&amp;param2=value2...'</span></div><div class="line">&#125;&#125;);</div></pre></td></tr></table></figure>
<h3 id="简便写法"><a href="#简便写法" class="headerlink" title="简便写法"></a>简便写法</h3><p>ajax方法还有一些简便写法。</p>
<ul>
<li>$.get()：发出GET请求。</li>
<li>$.getScript()：读取一个JavaScript脚本文件并执行。</li>
<li>$.getJSON()：发出GET请求，读取一个JSON文件。</li>
<li>$.post()：发出POST请求。</li>
<li>$.fn.load()：读取一个html文件，并将其放入当前元素之中。</li>
</ul>
<p>一般来说，这些简便方法依次接受三个参数：url、数据、成功时的回调函数。</p>
<p><strong>（1）$.get()，$.post()</strong></p>
<p>这两个方法分别对应HTTP的GET方法和POST方法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$.get(<span class="string">'/data/people.html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">html</span>)</span>&#123;</div><div class="line">  $(<span class="string">'#target'</span>).html(html);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">$.post(<span class="string">'/data/save'</span>, &#123;<span class="attr">name</span>: <span class="string">'Rebecca'</span>&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">resp</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(resp));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>get方法和post方法的参数相同，第一个参数是服务器网址，该参数是必需的，其他参数都是可选的。第二个参数是发送给服务器的数据，第三个参数是操作成功后的回调函数。</p>
<p>上面的post方法对应的ajax写法如下。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$.ajax(&#123;</div><div class="line">    <span class="attr">type</span>: <span class="string">'POST'</span>,</div><div class="line">    <span class="attr">url</span>: <span class="string">'/data/save'</span>,</div><div class="line">    <span class="attr">data</span>: &#123;<span class="attr">name</span>: <span class="string">'Rebecca'</span>&#125;,</div><div class="line">    <span class="attr">dataType</span>: <span class="string">'json'</span>,</div><div class="line">    <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">resp</span>)</span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(resp));</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>（2）$.getJSON()</strong></p>
<p>ajax方法的另一个简便写法是getJSON方法。当服务器端返回JSON格式的数据，可以用这个方法代替$.ajax方法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$.getJSON(<span class="string">'url/to/json'</span>, &#123;<span class="string">'a'</span>: <span class="number">1</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(data);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面的代码等同于下面的写法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$.ajax(&#123;</div><div class="line">  <span class="attr">dataType</span>: <span class="string">"json"</span>,</div><div class="line">  <span class="attr">url</span>: <span class="string">'/url/to/data'</span>,</div><div class="line">  <span class="attr">data</span>: &#123;<span class="string">'a'</span>: <span class="number">1</span>&#125;,</div><div class="line">  <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(data);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>（3）$.getScript()</strong></p>
<p>$.getScript方法用于从服务器端加载一个脚本文件。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$.getScript(<span class="string">'/static/js/myScript.js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	functionFromMyScript();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面代码先从服务器加载myScript.js脚本，然后在回调函数中执行该脚本提供的函数。</p>
<p>getScript的回调函数接受三个参数，分别是脚本文件的内容，HTTP响应的状态信息和ajax对象实例。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$.getScript( <span class="string">"ajax/test.js"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data, textStatus, jqxhr</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log( data ); <span class="comment">// test.js的内容</span></div><div class="line">  <span class="built_in">console</span>.log( textStatus ); <span class="comment">// Success</span></div><div class="line">  <span class="built_in">console</span>.log( jqxhr.status ); <span class="comment">// 200</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>getScript是ajax方法的简便写法，因此返回的是一个deferred对象，可以使用deferred接口。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">jQuery.getScript(<span class="string">"/path/to/myscript.js"</span>)</div><div class="line">	.done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="comment">// ...</span></div><div class="line">	&#125;)</div><div class="line">	.fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="comment">// ...</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>（4）$.fn.load()</strong></p>
<p>$.fn.load不是jQuery的工具方法，而是定义在jQuery对象实例上的方法，用于获取服务器端的HTML文件，将其放入当前元素。由于该方法也属于ajax操作，所以放在这里一起讲。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$(<span class="string">'#newContent'</span>).load(<span class="string">'/foo.html'</span>);</div></pre></td></tr></table></figure>
<p>$.fn.load方法还可以指定一个选择器，将远程文件中匹配选择器的部分，放入当前元素，并指定操作完成时的回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$(<span class="string">'#newContent'</span>).load(<span class="string">'/foo.html #myDiv h1:first'</span>,</div><div class="line">	<span class="function"><span class="keyword">function</span>(<span class="params">html</span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'内容更新！'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面代码只加载foo.html中匹配“#myDiv h1:first”的部分，加载完成后会运行指定的回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$(<span class="string">'#main-menu a'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">   event.preventDefault();</div><div class="line"></div><div class="line">   $(<span class="string">'#main'</span>).load(<span class="keyword">this</span>.href + <span class="string">' #main *'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面的代码将指定网页中匹配“#main *”，加载入当前的main元素。星号表示匹配main元素包含的所有子元素，如果不加这个星号，就会加载整个main元素（包括其本身），导致一个main元素中还有另一个main元素。</p>
<p>load方法可以附加一个字符串或对象作为参数，一起向服务器提交。如果是字符串，则采用GET方法提交；如果是对象，则采用POST方法提交。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$( <span class="string">"#feeds"</span> ).load( <span class="string">"feeds.php"</span>, &#123; <span class="attr">limit</span>: <span class="number">25</span> &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log( <span class="string">"已经载入"</span> );</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面代码将<code>{ limit: 25 }</code>通过POST方法向服务器提交。</p>
<p>load方法的回调函数，可以用来向用户提示操作已经完成。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$(<span class="string">'#main-menu a'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">   event.preventDefault();</div><div class="line"> </div><div class="line">   $(<span class="string">'#main'</span>).load(<span class="keyword">this</span>.href + <span class="string">' #main *'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">responseText, status</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (status === <span class="string">'success'</span>) &#123;</div><div class="line">         $(<span class="string">'#notification-bar'</span>).text(<span class="string">'加载成功！'</span>);</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">         $(<span class="string">'#notification-bar'</span>).text(<span class="string">'出错了！'</span>);</div><div class="line">      &#125;</div><div class="line">   &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="Ajax事件"><a href="#Ajax事件" class="headerlink" title="Ajax事件"></a>Ajax事件</h3><p>jQuery提供以下一些方法，用于指定特定的AJAX事件的回调函数。</p>
<ul>
<li>.ajaxComplete()：ajax请求完成。</li>
<li>.ajaxError()：ajax请求出错。</li>
<li>.ajaxSend()：ajax请求发出之前。</li>
<li>.ajaxStart()：第一个ajax请求开始发出，即没有还未完成ajax请求。</li>
<li>.ajaxStop()：所有ajax请求完成之后。</li>
<li>.ajaxSuccess()：ajax请求成功之后。</li>
</ul>
<p>下面是示例。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$(<span class="string">'#loading_indicator'</span>)</div><div class="line">.ajaxStart(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;$(<span class="keyword">this</span>).show();&#125;)</div><div class="line">.ajaxStop(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;$(<span class="keyword">this</span>).hide();&#125;);</div></pre></td></tr></table></figure>
<h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>ajax方法返回的是一个deferred对象，可以用then方法为该对象指定回调函数（详细解释参见《deferred对象》一节）。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$.ajax(&#123;</div><div class="line">  <span class="attr">url</span>: <span class="string">'/data/people.json'</span>,</div><div class="line">  <span class="attr">dataType</span>: <span class="string">'json'</span></div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">resp</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(resp.people);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><p>由于浏览器存在“同域限制”，ajax方法只能向当前网页所在的域名发出HTTP请求。但是，通过在当前网页中插入script元素（\<script\>），可以向不同的域名发出GET请求，这种变通方法叫做JSONP（JSON with Padding）。</script\></p>
<p>ajax方法可以发出JSONP请求，方法是在对象参数中指定dataType为JSONP。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$.ajax(&#123;</div><div class="line">  <span class="attr">url</span>: <span class="string">'/data/search.jsonp'</span>,</div><div class="line">  <span class="attr">data</span>: &#123;<span class="attr">q</span>: <span class="string">'a'</span>&#125;,</div><div class="line">  <span class="attr">dataType</span>: <span class="string">'jsonp'</span>,</div><div class="line">  <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">resp</span>) </span>&#123;</div><div class="line">    $(<span class="string">'#target'</span>).html(<span class="string">'Results: '</span> + resp.results.length);</div><div class="line">  &#125;</div><div class="line">&#125;);)</div></pre></td></tr></table></figure>
<p>JSONP的通常做法是，在所要请求的URL后面加在回调函数的名称。ajax方法规定，如果所请求的网址以类似“callback=?”的形式结尾，则自动采用JSONP形式。所以，上面的代码还可以写成下面这样。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$.getJSON(<span class="string">'/data/search.jsonp?q=a&amp;callback=?'</span>,</div><div class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">resp</span>) </span>&#123;</div><div class="line">    $(<span class="string">'#target'</span>).html(<span class="string">'Results: '</span> + resp.results.length);</div><div class="line">  &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li>David Walsh, <a href="http://davidwalsh.name/loading-scripts-jquery" target="_blank" rel="external">Loading Scripts with jQuery</a></li>
<li>Nguyen Huu Phuoc, <a href="http://programer.tips/2014/09/best-jquery-practices.html" target="_blank" rel="external">Best jQuery practices</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Git修改历史提交的信息]]></title>
      <url>http://yardfarmer.github.io/2017/02/01/2013-07-17-Git%E4%BF%AE%E6%94%B9%E5%8E%86%E5%8F%B2%E6%8F%90%E4%BA%A4%E7%9A%84%E4%BF%A1%E6%81%AF/</url>
      <content type="html"><![CDATA[<p>##起因<br>公司内部使用的gitlab分支上可以使用未注册的用户提交，但是在master分支上必须是注册用户，就算是提交分支成功了，再往master合并的时候也会出错，所以只能修改历史提交纪录</p>
<p>##解决<br>本质上就是使用<code>git filter-branch</code>，<a href="https://www.kernel.org/pub/software/scm/git/docs/git-filter-branch.html" target="_blank" rel="external">这里</a>是这个命令的详细文档，另外github上提供了一个脚本</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">#!/bin/sh</div><div class="line"> </div><div class="line">git filter-branch --env-filter '</div><div class="line"> </div><div class="line">an="$GIT_AUTHOR_NAME"</div><div class="line">am="$GIT_AUTHOR_EMAIL"</div><div class="line">cn="$GIT_COMMITTER_NAME"</div><div class="line">cm="$GIT_COMMITTER_EMAIL"</div><div class="line"> </div><div class="line">if [ "$GIT_COMMITTER_EMAIL" = "your@email.to.match" ]</div><div class="line">then</div><div class="line">    cn="Your New Committer Name"</div><div class="line">    cm="Your New Committer Email"</div><div class="line">fi</div><div class="line">if [ "$GIT_AUTHOR_EMAIL" = "your@email.to.match" ]</div><div class="line">then</div><div class="line">    an="Your New Author Name"</div><div class="line">    am="Your New Author Email"</div><div class="line">fi</div><div class="line"> </div><div class="line">export GIT_AUTHOR_NAME="$an"</div><div class="line">export GIT_AUTHOR_EMAIL="$am"</div><div class="line">export GIT_COMMITTER_NAME="$cn"</div><div class="line">export GIT_COMMITTER_EMAIL="$cm"</div><div class="line">'</div></pre></td></tr></table></figure>
<p><a href="https://help.github.com/articles/changing-author-info" target="_blank" rel="external">地址</a>，注意如果你把cm或者am换成中文的，一定要保证脚本文件是utf-8编码的，否则注释中容易出现乱码</p>
]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>http://yardfarmer.github.io/2017/02/01/neat%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>#开发环境</p>
<p>##一. neat</p>
<p>###gulp 的使用</p>
<ol>
<li><p><strong>gulp </strong> 需要自己去安装, <code>npm install gulp</code>, 然后 gulpfile.js 文件放入根目录.</p>
</li>
<li><p>安装模板</p>
<pre><code>sudo neat install @ali/generator-apm
</code></pre></li>
</ol>
<p>###yo 的使用</p>
<p>在 neat.fdm 的根目录 </p>
<pre><code>sudo tnpm install generator-polymer
</code></pre><p>##二. apm</p>
<p>是1688开发的<strong>组件</strong>平台, 推荐 <strong>commonjs</strong> 语法来写组件</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[karma下测试异步载入的js文件]]></title>
      <url>http://yardfarmer.github.io/2017/02/01/2013-08-21-karma%E4%B8%8B%E6%B5%8B%E8%AF%95%E5%BC%82%E6%AD%A5%E8%BD%BD%E5%85%A5%E7%9A%84js%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>默认情况下<a href="http://karma-runner.github.io/" target="_blank" rel="external">karma</a>是把所有的需要测试文件载入到测试页面，如果我们要对一个jsonp方法或者一个模块载入方法进行测试，它会给出一个找不到文件的提示，原因是karma的本地服务器会把需要测试的文件放在<code>/base/*</code>下，这个搞起来也很方便, 两步就搞定</p>
<ul>
<li>设置karma的conf文件里的<code>files</code></li>
<li>对需要测试的方法进行mock，如果是本地请求路径，加上<code>/base/</code></li>
</ul>
<h2 id="需要测试的方法"><a href="#需要测试的方法" class="headerlink" title="需要测试的方法"></a>需要测试的方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadScript</span> (<span class="params">url, success, charset</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> node = doc.createElement(<span class="string">'script'</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (charset) &#123;</div><div class="line">        node.charset = charset;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> re = <span class="regexp">/^(?:loaded|complete|undefined)$/</span>;</div><div class="line">    node.onreadystatechange = node.onload = node.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (re.test(node.readyState)) &#123;</div><div class="line">            node.onload = node.onerror = node.onreadystatechange = <span class="literal">null</span>;</div><div class="line"></div><div class="line">            success.call(node);</div><div class="line">            node = <span class="literal">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    node.async = <span class="literal">true</span>;</div><div class="line">    node.src = url;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> head = documentElement.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>] || doc.documentElement;</div><div class="line">    head.insertBefore(node, head.firstChild);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="karma-conf-js"><a href="#karma-conf-js" class="headerlink" title="karma.conf.js"></a>karma.conf.js</h2><p>测试的代码写在tests/mainSpec.js里，我们要载入tests/loader/1.js，修改karma的配置</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">... other config code ...</div><div class="line"></div><div class="line">        files: [</div><div class="line">                <span class="comment">//保证loader下的文件可以访问,但是又不会直接引用到页面上</span></div><div class="line">                &#123; <span class="attr">pattern</span>: <span class="string">'tests/loader/*.js'</span>, <span class="attr">included</span>: <span class="literal">false</span> &#125;, </div><div class="line">                <span class="string">'tests/lib/jquery-1.7.2.min.js'</span>,</div><div class="line">                <span class="string">'tests/lib/expect.js'</span>,</div><div class="line">                <span class="string">'tests/configData.js'</span>,</div><div class="line">                <span class="string">'src/loader.js'</span>,</div><div class="line">                <span class="string">'tests/**/*Spec.js'</span></div><div class="line">        ],</div><div class="line">... other config code ...</div></pre></td></tr></table></figure>
<h2 id="mainSpec-js里的改造"><a href="#mainSpec-js里的改造" class="headerlink" title="mainSpec.js里的改造"></a>mainSpec.js里的改造</h2><p>需要在karma的环境中，改造一下loadScript方法，其它环境中可以忽略</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.__karma__) &#123; <span class="comment">//只处理在karma的环境中</span></div><div class="line">    <span class="keyword">var</span> __loadScript = loadScript;</div><div class="line">    loadScript= <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</div><div class="line">        <span class="comment">//只处理本地路径 </span></div><div class="line">        <span class="keyword">if</span> (args[<span class="number">0</span>].indexOf(<span class="string">'http://'</span>) == <span class="number">-1</span>) &#123;</div><div class="line">            args[<span class="number">0</span>] = <span class="string">'/base/tests/'</span> + args[<span class="number">0</span>];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        __loadScript.apply(<span class="literal">null</span>, args);</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后写一句最近非常大的一个感悟：没有测试代码的代码都是狗屎代码！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[javascript的几种使用多行字符串的方式]]></title>
      <url>http://yardfarmer.github.io/2017/02/01/2013-08-20-javascript%E7%9A%84%E5%87%A0%E7%A7%8D%E4%BD%BF%E7%94%A8%E5%A4%9A%E8%A1%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>JS里并没有标准的多行字符串的表示方法，但是在用模板的时候，为了保证模板的可阅读性，我们又不可避免的使用多行字符串，所以出现了各种搞法，这里以一段jade的模板作为示例，简单总结和对比一下。</p>
<h2 id="字符串相加"><a href="#字符串相加" class="headerlink" title="字符串相加"></a>字符串相加</h2><p>这是最容易理解也很常用的一种形式，如下</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> tmpl =<span class="string">''</span>+</div><div class="line">    <span class="string">'!!! 5'</span> +</div><div class="line">    <span class="string">'html'</span> +</div><div class="line">    <span class="string">'  include header'</span> +</div><div class="line">    <span class="string">'  body'</span> +</div><div class="line">    <span class="string">'    //if IE 6'</span> +</div><div class="line">    <span class="string">'        .alert.alert-error'</span> +</div><div class="line">    <span class="string">'            center 对不起，我们不支持IE6，请升级你的浏览器'</span> +</div><div class="line">    <span class="string">'                a(href="http://windows.microsoft.com/zh-CN/internet-explorer/download-ie") | IE8官方下载'</span> +</div><div class="line">    <span class="string">'                a(href="https://www.google.com/intl/en/chrome/browser/") | Chrome下载'</span> +</div><div class="line">    <span class="string">'    include head'</span> +</div><div class="line">    <span class="string">'    .container'</span> +</div><div class="line">    <span class="string">'        .row-fluid'</span> +</div><div class="line">    <span class="string">'            .span8'</span> +</div><div class="line">    <span class="string">'                block main'</span> +</div><div class="line">    <span class="string">'                include pagerbar'</span> +</div><div class="line">    <span class="string">'            .span4'</span> +</div><div class="line">    <span class="string">'                include sidebar'</span> +</div><div class="line">    <span class="string">'    include footer'</span> +</div><div class="line">    <span class="string">'    include script'</span></div></pre></td></tr></table></figure>
<p>优点:</p>
<ul>
<li>易理解，简单，可靠 </li>
<li>足够灵活，可以在单个字符串中添加js逻辑 </li>
</ul>
<p>缺点 :</p>
<ul>
<li>并不是真正意义上的多行字符串, 如果想要真正的多行，需要自己加<code>\n</code> </li>
<li>大量的<code>+</code>号看上去满天星,大量的<code>&#39;</code>和<code>&quot;</code>, 丑陋</li>
</ul>
<h2 id="反斜线"><a href="#反斜线" class="headerlink" title="反斜线"></a>反斜线</h2><p>这个叫续行符, 这个并非一种很常见的方式, 但是一旦用上了，还是很容易上瘾，只需要加一个字符</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> tmpl =<span class="string">'\</span></div><div class="line">    !!! 5\</div><div class="line">    html\</div><div class="line">      include header\</div><div class="line">      body\</div><div class="line">        //if IE 6\</div><div class="line">            .alert.alert-error\</div><div class="line">                center 对不起，我们不支持IE6，请升级你的浏览器\</div><div class="line">                    a(href="http://windows.microsoft.com/zh-CN/internet-explorer/download-ie") | IE8官方下载\</div><div class="line">                    a(href="https://www.google.com/intl/en/chrome/browser/") | Chrome下载\</div><div class="line">        include head\</div><div class="line">        .container\</div><div class="line">            .row-fluid\</div><div class="line">                .span8\</div><div class="line">                    block main\</div><div class="line">                    include pagerbar\</div><div class="line">                .span4\</div><div class="line">                    include sidebar\</div><div class="line">        include footer\</div><div class="line">        include script'</div></pre></td></tr></table></figure>
<p>优点:</p>
<ul>
<li>简单,每一行只需要有多一个<code>\</code></li>
<li>高效！在大部分的浏览器上，这种方式都是最快的，看这个<a href="http://jsperf.com/zp-string-concatenation/6" target="_blank" rel="external">效率对比</a></li>
</ul>
<p>缺点 :</p>
<ul>
<li>致命缺陷，每一行的<code>\</code>必须不可以有空格，否则直接脚本错误 </li>
<li>并不是真正意义上的多行字符串, 如果想要真正的多行，需要自己加<code>\n</code> </li>
<li>尽管绝大部分的js引擎都支持它，但是它并不是ECMAScript的一部分(我并没有研究规范，这句话是从<a href="http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml?showone=Multiline_string_literals#Multiline_string_literals" target="_blank" rel="external">google的编码规范</a>翻译过来的)</li>
</ul>
<h2 id="字符串数组join"><a href="#字符串数组join" class="headerlink" title="字符串数组join"></a>字符串数组join</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> tmpl = [</div><div class="line">    <span class="string">'!!! 5'</span> ,</div><div class="line">    <span class="string">'html'</span> ,</div><div class="line">    <span class="string">'  include header'</span> ,</div><div class="line">    <span class="string">'  body'</span> ,</div><div class="line">    <span class="string">'    //if IE 6'</span> ,</div><div class="line">    <span class="string">'        .alert.alert-error'</span> ,</div><div class="line">    <span class="string">'            center 对不起，我们不支持IE6，请升级你的浏览器'</span> ,</div><div class="line">    <span class="string">'                a(href="http://windows.microsoft.com/zh-CN/internet-explorer/download-ie") | IE8官方下载'</span> ,</div><div class="line">    <span class="string">'                a(href="https://www.google.com/intl/en/chrome/browser/") | Chrome下载'</span> ,</div><div class="line">    <span class="string">'    include head'</span> ,</div><div class="line">    <span class="string">'    .container'</span> ,</div><div class="line">    <span class="string">'        .row-fluid'</span> ,</div><div class="line">    <span class="string">'            .span8'</span> ,</div><div class="line">    <span class="string">'                block main'</span> ,</div><div class="line">    <span class="string">'                include pagerbar'</span> ,</div><div class="line">    <span class="string">'            .span4'</span> ,</div><div class="line">    <span class="string">'                include sidebar'</span> ,</div><div class="line">    <span class="string">'    include footer'</span> ,</div><div class="line">    <span class="string">'    include script'</span>].join(<span class="string">'\n'</span>);</div></pre></td></tr></table></figure>
<p>优点:</p>
<ul>
<li>真正意义上的多行字符串 </li>
<li>易理解，简单，可靠 </li>
<li>足够灵活，可以在单个字符串中添加js逻辑 </li>
</ul>
<p>缺点 :</p>
<ul>
<li>大量的<code>,</code>号和<code>&#39;</code>、<code>&quot;</code>, 丑陋</li>
</ul>
<h2 id="String-prototype-concat"><a href="#String-prototype-concat" class="headerlink" title="String.prototype.concat"></a>String.prototype.concat</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> tmpl = <span class="built_in">String</span>.prototype.concat.call(</div><div class="line">    <span class="string">'!!! 5'</span> ,</div><div class="line">    <span class="string">'html'</span> ,</div><div class="line">    <span class="string">'  include header'</span> ,</div><div class="line">    <span class="string">'  body'</span> ,</div><div class="line">    <span class="string">'    //if IE 6'</span> ,</div><div class="line">    <span class="string">'        .alert.alert-error'</span> ,</div><div class="line">    <span class="string">'            center 对不起，我们不支持IE6，请升级你的浏览器'</span> ,</div><div class="line">    <span class="string">'                a(href="http://windows.microsoft.com/zh-CN/internet-explorer/download-ie") | IE8官方下载'</span> ,</div><div class="line">    <span class="string">'                a(href="https://www.google.com/intl/en/chrome/browser/") | Chrome下载'</span> ,</div><div class="line">    <span class="string">'    include head'</span> ,</div><div class="line">    <span class="string">'    .container'</span> ,</div><div class="line">    <span class="string">'        .row-fluid'</span> ,</div><div class="line">    <span class="string">'            .span8'</span> ,</div><div class="line">    <span class="string">'                block main'</span> ,</div><div class="line">    <span class="string">'                include pagerbar'</span> ,</div><div class="line">    <span class="string">'            .span4'</span> ,</div><div class="line">    <span class="string">'                include sidebar'</span> ,</div><div class="line">    <span class="string">'    include footer'</span> ,</div><div class="line">    <span class="string">'    include script'</span>);</div></pre></td></tr></table></figure>
<p>优点:</p>
<ul>
<li>不常用，事实上字符串的concat方法远没有<code>+</code>号常见</li>
<li>易理解，简单，可靠 </li>
<li>足够灵活，可以在单个字符串中添加js逻辑 </li>
</ul>
<p>缺点 :</p>
<ul>
<li>并不是真正意义上的多行字符串 </li>
<li>大量的<code>,</code>号和<code>&#39;</code>、<code>&quot;</code>, 丑陋</li>
</ul>
<h2 id="heredoc"><a href="#heredoc" class="headerlink" title="heredoc"></a>heredoc</h2><p>这是一种很有技巧的解决办法, 利用了function的toString方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">heredoc</span>(<span class="params">fn</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> fn.toString().split(<span class="string">'\n'</span>).slice(<span class="number">1</span>,<span class="number">-1</span>).join(<span class="string">'\n'</span>) + <span class="string">'\n'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> tmpl = heredoc(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">/*</span></div><div class="line">    !!! 5</div><div class="line">    html</div><div class="line">      include header</div><div class="line">      body</div><div class="line">        //if IE 6</div><div class="line">            .alert.alert-error</div><div class="line">                center 对不起，我们不支持IE6，请升级你的浏览器</div><div class="line">                    a(href="http://windows.microsoft.com/zh-CN/internet-explorer/download-ie") | IE8官方下载</div><div class="line">                    a(href="https://www.google.com/intl/en/chrome/browser/") | Chrome下载</div><div class="line">        include head</div><div class="line">        .container</div><div class="line">            .row-fluid</div><div class="line">                .span8</div><div class="line">                    block main</div><div class="line">                    include pagerbar</div><div class="line">                .span4</div><div class="line">                    include sidebar</div><div class="line">        include footer</div><div class="line">        include script</div><div class="line"> */&#125;);</div></pre></td></tr></table></figure>
<p>优点:</p>
<ul>
<li>模板字符串内不必写多余的任何字符，干净，简单 </li>
<li>真正意义上的多行字符串, 有<code>\n</code>哦 </li>
</ul>
<p>缺点 :</p>
<ul>
<li>不可以在单个字符串中添加js逻辑 </li>
<li>容易被压缩器压缩掉，yui compressor可以通过<code>/*!</code>来避免被压缩掉，<a href="https://github.com/mishoo/UglifyJS2" target="_blank" rel="external">uglifyjs</a>和<a href="https://developers.google.com/closure/compiler/" target="_blank" rel="external">gcc</a>也可以通过选项配置不删除特定的注释，这个不是大问题</li>
</ul>
<h2 id="coffeescript"><a href="#coffeescript" class="headerlink" title="coffeescript"></a>coffeescript</h2><p>相当于换了一个语言，其实这种语言上缺少的功能，通过<a href="http://coffeescript.org/#strings" target="_blank" rel="external">coffeescript</a>这种以js为编译目标的语言来实现是一种非常棒的选择。    </p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">var tmpl = <span class="string">""" </span></div><div class="line">    !!! 5</div><div class="line">    html</div><div class="line">      include header</div><div class="line">      body</div><div class="line">        //if IE 6</div><div class="line">            .alert.alert-error</div><div class="line">                center 对不起，我们不支持IE6，请升级你的浏览器</div><div class="line">                    a(href="http://windows.microsoft.com/zh-CN/internet-explorer/download-ie") | IE8官方下载</div><div class="line">                    a(href="https://www.google.com/intl/en/chrome/browser/") | Chrome下载</div><div class="line">        include head</div><div class="line">        .container</div><div class="line">            .row-fluid</div><div class="line">                .span8</div><div class="line">                    block main</div><div class="line">                    include pagerbar</div><div class="line">                .span4</div><div class="line">                    include sidebar</div><div class="line">        include footer</div><div class="line">        include script</div><div class="line">    """</div></pre></td></tr></table></figure>
<p>优点:</p>
<ul>
<li>易理解，简单，可靠 </li>
</ul>
<p>缺点 :</p>
<ul>
<li>需要了解coffeescript </li>
<li>整个文件都需要用coffeescript来写</li>
</ul>
<h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><p>ES6的有一个新的特性，<a href="http://wiki.ecmascript.org/doku.php?id=harmony:quasis" target="_blank" rel="external">Template Strings</a>, 这是语言层面上第一次实现了多行字符串, 在<a href="https://www.google.com/intl/en/chrome/browser/canary.html" target="_blank" rel="external">chrome canary</a>里打开<code>Enable Experimental JavaScript</code>就可以使用这个特性，另外<a href="http://www.typescriptlang.org/" target="_blank" rel="external">typescript</a>也会支持这种方式</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> tmpl = </div><div class="line">   <span class="string">`!!! 5</span></div><div class="line">    html</div><div class="line">      include header</div><div class="line">      body</div><div class="line">        //if IE 6</div><div class="line">            .alert.alert-error</div><div class="line">                center 对不起，我们不支持IE6，请升级你的浏览器</div><div class="line">                    a(href="http://windows.microsoft.com/zh-CN/internet-explorer/download-ie") | IE8官方下载</div><div class="line">                    a(href="https://www.google.com/intl/en/chrome/browser/") | Chrome下载</div><div class="line">        include head</div><div class="line">        .container</div><div class="line">            .row-fluid</div><div class="line">                .span8</div><div class="line">                    block main</div><div class="line">                    include pagerbar</div><div class="line">                .span4</div><div class="line">                    include sidebar</div><div class="line">        include footer</div><div class="line">        include script`</div></pre></td></tr></table></figure>
<p>优点:</p>
<ul>
<li>易理解，原生支持 </li>
<li>真正的多行字符串</li>
</ul>
<p>缺点 :</p>
<ul>
<li>JS引擎支持有限 </li>
</ul>
<p>##总结</p>
<p>看了这么些写法，如何选择？如果你用的是coffeescript，放心大胆的使用它支持的多行字符串写法；如果是在客户端，同时你解决了你的压缩器去掉注释的问题，推荐使用heredoc；如果你无法解决压缩器的问题，使用反斜线连接吧，每行只需要加一个字符。</p>
]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>http://yardfarmer.github.io/2017/02/01/node_harmony/</url>
      <content type="html"><![CDATA[<p>#node harmony<br>They have done away with the –harmony flag - which in Node 0.11+ you had to include if you wanted to use any ES6 features at all. In io.js, you get them right out of the box! The current list of ES6 features enabled by default are:</p>
<p>iojs 已经可以默认支持这些了。</p>
<ul>
<li>let</li>
<li>const</li>
<li>Map</li>
<li>WeakMap/WeakSet</li>
<li>Generators</li>
<li>Binary and Octal literals, 二进制和八进制的字面量</li>
<li>Promises</li>
<li>Pro string method</li>
<li>Symbols</li>
<li>Template strings</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[利用github的api显示当前文章的历史记录]]></title>
      <url>http://yardfarmer.github.io/2017/02/01/2013-10-06-%E5%88%A9%E7%94%A8github%E7%9A%84api%E6%98%BE%E7%A4%BA%E5%BD%93%E5%89%8D%E6%96%87%E7%AB%A0%E7%9A%84%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>利用github放blog也有一段时间了，一直想做一个小功能，就是展示某个文章的历史纪录，简单来说就是<code>git log 某个文章</code></p>
<h2 id="两种思路"><a href="#两种思路" class="headerlink" title="两种思路"></a>两种思路</h2><ul>
<li>写一个jekyll的插件</li>
<li>js利用github的api</li>
</ul>
<h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><p>由于github上的jekyll生成网站时是不允许使用的自定义插件的，这个思路暂时忽略。事实上，可以在本地生成静态网站，然后上传到github上，直接使用<code>gh-pages</code>分支来展示，因为不太想重新建一个repo，这个思路暂时忽略吧。</p>
<h3 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h3><p>利用github的<a href="http://developer.github.com/v3/repos/commits/" target="_blank" rel="external">commits api</a>，比如一个文章的commits可以用下面的请求获取, 指定<code>path</code>参数就可以获取特定文件的提交纪录。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$.getJSON(<span class="string">'https://api.github.com/repos/jserme/jserme.github.io/commits?path=_posts%2F2013-07-29-lion%E4%B8%8B%E7%9A%84safari6%E5%AF%B9%E7%BA%AF%E6%95%B0%E5%AD%97%E4%BD%BF%E7%94%A8toString%E6%8A%A5%E9%94%99.md'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;<span class="built_in">console</span>.log(data)&#125;)</div></pre></td></tr></table></figure>
<p>返回的数据格式是一个数组，在每个文章页面加上下面一个id为history的div，然后通过下面的js渲染出对应html，展示效果见每个文章的下方</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取脚本函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadJs</span>(<span class="params">src, callback</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> doc = <span class="built_in">document</span>;</div><div class="line">    <span class="keyword">var</span> head = doc.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>];</div><div class="line">    <span class="keyword">var</span> script = doc.createElement(<span class="string">'script'</span>);</div><div class="line">    <span class="keyword">var</span> re = <span class="regexp">/^(?:loaded|complete|undefined)$/</span>;</div><div class="line"></div><div class="line">    script.onreadystatechange = script.onload = script.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (re.test(script.readyState)) &#123;</div><div class="line">            callback();</div><div class="line">            script.onload = script.onerror = script.onreadystatechange = <span class="literal">null</span>;</div><div class="line">            script = <span class="literal">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    script.src = src;</div><div class="line">    script.async = <span class="literal">true</span>;</div><div class="line"></div><div class="line">    head.insertBefore(script, head.firstChild);</div><div class="line">&#125;</div><div class="line"></div><div class="line">loadJs(<span class="string">'/js/jquery-1.7.2.min.js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    loadJs(<span class="string">'/js/md5.min.js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">//取到文章的路径，追加到请求地址上</span></div><div class="line">        <span class="comment">//可以通过&#123;&#123;page.path&#125;&#125;来取到</span></div><div class="line">        <span class="keyword">var</span> articlePath =<span class="string">'&#123;&#123;page.path&#125;&#125;'</span></div><div class="line">        <span class="keyword">var</span> api = <span class="string">'https://api.github.com/repos/jserme/jserme.github.io/commits?path='</span></div><div class="line">        <span class="keyword">var</span> tmpl = <span class="string">'&lt;div class="article"&gt;\</span></div><div class="line">                        &lt;span class="datetime"&gt;&#123;date&#125;&lt;/span&gt;\</div><div class="line">                        &lt;span&gt;\</div><div class="line">                            &lt;image src="&#123;src&#125;" title="&#123;author&#125;"&gt;\</div><div class="line">                            &#123;message&#125;\</div><div class="line">                        &lt;/span&gt;\</div><div class="line">                    &lt;/div&gt;'</div><div class="line">            <span class="keyword">var</span> gravstarurl = <span class="string">'https://1.gravatar.com/avatar/&#123;md5hash&#125;?s=16'</span>; </div><div class="line">            $.getJSON(api + articlePath,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">                <span class="keyword">if</span>( data.length == <span class="number">0</span> )&#123;</div><div class="line">                    $(<span class="string">'#history'</span>).html(<span class="string">'暂无历史纪录 :)'</span>);</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">var</span> history = <span class="string">''</span>;</div><div class="line">            $.each(data, <span class="function"><span class="keyword">function</span>(<span class="params">i, v</span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> avatar = gravstarurl.replace(<span class="string">'&#123;md5hash&#125;'</span>, md5(v.commit.author.email));</div><div class="line">                history += tmpl.replace(<span class="string">'&#123;src&#125;'</span>, avatar)</div><div class="line">                               .replace(<span class="string">'&#123;date&#125;'</span>, v.commit.author.date.replace(<span class="regexp">/T.*Z/</span>,<span class="string">''</span>))</div><div class="line">                               .replace(<span class="string">'&#123;message&#125;'</span>, v.commit.message);</div><div class="line">                &#125;);</div><div class="line"></div><div class="line">            $(<span class="string">'#history'</span>).html(history);</div><div class="line">        &#125;)</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>详细的文件可以查看<a href="https://github.com/jserme/jserme.github.io/blob/master/_layouts/post.html#L41" target="_blank" rel="external">这里</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何在karma里载入html文件进行测试]]></title>
      <url>http://yardfarmer.github.io/2017/02/01/2013-11-13-%E5%A6%82%E4%BD%95%E5%9C%A8karma%E9%87%8C%E8%BD%BD%E5%85%A5html%E6%96%87%E4%BB%B6%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95/</url>
      <content type="html"><![CDATA[<p>因为要测试代码在iframe里的运行情况，必须载入一个html文件，然后判断该文件里的js执行情况，在karma里无法直接载入一个html文件，同时由于路径的变更，测试同样跑不过，下面是详述原因和解决办法</p>
<h2 id="需要测试的场景"><a href="#需要测试的场景" class="headerlink" title="需要测试的场景"></a>需要测试的场景</h2><p>当前工程的目录结构如下</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── Gruntfile<span class="selector-class">.js</span></div><div class="line">├── karma<span class="selector-class">.conf</span><span class="selector-class">.js</span></div><div class="line">├── package<span class="selector-class">.json</span></div><div class="line">├── src</div><div class="line">│   ├── source<span class="selector-class">.js</span></div><div class="line">├── test</div><div class="line">│   ├── iframes</div><div class="line">│   │   ├── hello<span class="selector-class">.html</span></div><div class="line">│   ├── lib</div><div class="line">│   ├── mainSpec<span class="selector-class">.js</span></div><div class="line">│   └── runner.html</div></pre></td></tr></table></figure>
<p>在mainSpec.js里写入一个iframe到当前<code>document</code>下，路径为<code>iframes/hello.html</code>,<br><code>hello.html</code>里会引入<code>souce.js</code>，然后进行一些操作，<code>mainSpec.js</code><br>再对写入iframe进行检测，判断执行结果</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>有两个问题需要解决</p>
<ul>
<li>karma会把html文件当作js载入，也就是它会使用一个script标签把文件载入 </li>
<li>karma对于html文件使用html-js预处理，页面中输出的是一个hello.html.js</li>
</ul>
<p>在karma.conf.js里配置一下files对象解决问题1, served默认是true,也可以不加的，详细可以<a href="http://karma-runner.github.io/0.10/config/files.html" target="_blank" rel="external">官方文档</a></p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="string">files:</span> [</div><div class="line">             <span class="string">'test/lib/**/*.js'</span>,</div><div class="line">             <span class="string">'src/source.js'</span>,</div><div class="line">             <span class="string">'test/mainSpec.js'</span>,</div><div class="line">             &#123; <span class="string">pattern:</span> <span class="string">'test/iframes/*'</span>, <span class="string">included:</span> <span class="literal">false</span>, <span class="string">served:</span> <span class="literal">true</span> &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<p>在karma.conf.js里覆盖掉默认的html-js预处理</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">preprocessors:</span> &#123;</div><div class="line">    <span class="string">'test/iframes/*'</span>: [<span class="string">''</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="路径的问题"><a href="#路径的问题" class="headerlink" title="路径的问题"></a>路径的问题</h2><p>看样子是正常了，运行一下<code>karma run</code>，还是报错，我们写入的路径是<code>./iframes/hello.html</code>，<br>这是由于karma默认的执行路径是<code>http://localhost:9876/debug.html</code>，写入的路径会变成<code>http://localhost:9876/iframes/hello.html</code>，而karma会把当前目录放在<code>/base/</code>下(<a href="/2013/08/21/karma%E4%B8%8B%E6%B5%8B%E8%AF%95%E5%BC%82%E6%AD%A5%E8%BD%BD%E5%85%A5%E7%9A%84js%E6%96%87%E4%BB%B6.html">这里介绍过</a>)，很明显会404。</p>
<p>可以很直接的把写入的路径变成<code>/base/test/iframes/hello.html</code>，但是这样，这个测试就严重依赖karma了，你可能注意到test目录下还有一个runner.html，这个文件我们可以手工运行，如果写成了前面的这个路径，手工运行就完全不行。为了保证runner.html的正常工作,我们必须使用相对路径。</p>
<p>改造一下mainSpec.js，区别对待karma环境和普通环境中载入的iframe的路径</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPath</span>(<span class="params">path</span>) </span>&#123;</div><div class="line">       <span class="keyword">if</span> (<span class="built_in">window</span>.__karma__) &#123;</div><div class="line">           <span class="keyword">return</span> path.replace(<span class="regexp">/\.\//</span>, <span class="string">'/base/test/'</span>)</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           <span class="keyword">return</span> path</div><div class="line">       &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//写入文件的时候</span></div><div class="line">...</div><div class="line">iframe.src = getPath(<span class="string">'./iframes/hello.html'</span>)</div><div class="line">...</div></pre></td></tr></table></figure>
<p>这样之后我们的代码就可以正常的在karma和普通环境中跑测试了。</p>
]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>http://yardfarmer.github.io/2017/02/01/mongodb_%E6%A6%82%E5%BF%B5/</url>
      <content type="html"><![CDATA[<p>#mongodb 概念</p>
<p>mongodb 的基本概念是 <strong>文档,集合,数据库</strong></p>
<p>##数据库<br>一个 mongodb 可以建立<strong>多个</strong>数据库, 默认的数据库是 <strong>db</strong>,该数据库存储在 <strong>data</strong> 目录中.</p>
<p><em>show dbs</em> 可以显示所有数据的列表.</p>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mongo</div><div class="line"></div><div class="line"><span class="keyword">show</span> dbs <span class="meta">#显示所有的数据库</span></div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="keyword">local</span> <span class="meta">#连接到指定的数据库</span></div><div class="line"></div><div class="line">mongod —config /usr/<span class="keyword">local</span>/etc/mongod.conf <span class="meta">#启动</span></div></pre></td></tr></table></figure>
<p>##文档<br><strong>文档</strong>是 mongodb 最核心的概念, 是核心单元, 可以将<strong>文档类比成关系型数据库中的每一行数据</strong>.</p>
<p><strong>多个键值对放在一起就是文档.</strong>, mongodb 使用的是类似 json 的 <strong>bson</strong>存储数据. bson 就是在 json 的基础上增加了一些数据类型.</p>
<p>文档:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="attribute">site</span>: <span class="string">'sjkljas.com'</span>&#125;</div></pre></td></tr></table></figure>
<p>通常, “object(对象)” 术语指一个文件. 文件类似于 RDBMS 的记录, 集合( collection) 可以 crud.</p>
<table>
<thead>
<tr>
<th style="text-align:left">RDBMS</th>
<th style="text-align:left">MongoDB</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Table</td>
<td style="text-align:left">Collection</td>
</tr>
<tr>
<td style="text-align:left">Column</td>
<td style="text-align:left">key </td>
</tr>
<tr>
<td style="text-align:left">Value</td>
<td style="text-align:left">value</td>
</tr>
<tr>
<td style="text-align:left">Records/Rows</td>
<td style="text-align:left">Document/Object</td>
</tr>
</tbody>
</table>
<p>下面是 MongoDB 中的几种数据类型</p>
<table>
<thead>
<tr>
<th style="text-align:left">数据类型</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">string</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">integer</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">boolean</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">double</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">null</td>
<td style="text-align:left">不是0,也不是空</td>
</tr>
<tr>
<td style="text-align:left">array</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">object</td>
<td style="text-align:left">对象型,,程序中被使用的实体. 可以是一个值,变量,函数,或者数据结构</td>
</tr>
<tr>
<td style="text-align:left">timestamp</td>
<td style="text-align:left">timestamp存储为64位的值，只运行一个mongod时可以确保是唯一的。前32位保存的是UTC时间，单位是秒，后32为是在这一秒内的计数值，从0开始，每新建一个MongoTimestamp对象就加一</td>
</tr>
<tr>
<td style="text-align:left">Internationalized Strings</td>
<td style="text-align:left">utf8 字符串</td>
</tr>
<tr>
<td style="text-align:left">Object IDs</td>
<td style="text-align:left">_id, _id值可以是任何类型,最常见的做法是使用ObjectId类型</td>
</tr>
</tbody>
</table>
<p>在mongodb中的集合是无模式的，也就是说集合中存储的,文档的结构可以是不同的，比如下面的两个文档可以同时存入到一个集合中：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="attr">"name"</span>:<span class="string">"mengxiangyue"</span>&#125; &#123;<span class="attr">"Name"</span>:<span class="string">"mengxiangyue"</span>,<span class="attr">"sex"</span>:<span class="string">"nan"</span>&#125;</div></pre></td></tr></table></figure>
<p>##MongoDB连接命令格式<br>使用用户名和密码连接到MongoDB服务器，你必须使用 <strong>‘username:password@hostname/dbname’ </strong>格式，’username’为用户名，’password’ 为密码。</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">mongodb:</span><span class="comment">//username:pass@localhost/</span></div></pre></td></tr></table></figure>
<p>###参数选项说明<br>标准格式：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongodb://[<span class="string">username:password@</span>]host1[<span class="string">:port1</span>]   [<span class="string">,host2[:port2</span>],...[<span class="string">,hostN[:portN</span>]]][/[database]   [?options]]</div></pre></td></tr></table></figure>
<p>标准的连接格式包含了多个选项(options)，如下所示：</p>
<table>
<thead>
<tr>
<th>First Header</th>
<th>Second Header</th>
<th>Third Header</th>
</tr>
</thead>
<tbody>
<tr>
<td>Content Cell</td>
<td>Content Cell</td>
<td>Content Cell</td>
</tr>
<tr>
<td>Content Cell</td>
<td>Content Cell</td>
<td>Content Cell</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>选项</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>replicaSet=name</td>
<td>验证replica set的名称。 Impliesconnect=replicaSet.</td>
</tr>
<tr>
<td>slaveOk=true,false</td>
<td>true:在connect=direct模式下，驱动会连接第一台机器，即使这台服务器不是主。在connect=replicaSet模式下，驱动会发送所有的写请求到主并且把读取操作分布在其他从服务器。false: 在 connect=direct模式下，驱动会自动找寻主服务器. 在connect=replicaSet 模式下，驱动仅仅连接主服务器，并且所有的读写命令都连接到主服务器。</td>
</tr>
<tr>
<td>safe=true,false</td>
<td>true: 在执行更新操作之后，驱动都会发送getLastError命令来确保更新成功。(还要参考 wtimeoutMS). false: 在每次更新之后，驱动不会发送getLastError来确保更新成功。</td>
</tr>
<tr>
<td>w=n</td>
<td>驱动添加 { w : n } 到getLastError命令. 应用于safe=true。</td>
</tr>
<tr>
<td>wtimeoutMS=ms</td>
<td>驱动添加 { wtimeout : ms } 到 getlasterror 命令. 应用于safe=true.</td>
</tr>
<tr>
<td>fsync=true,false</td>
<td>true: 驱动添加 { fsync : true } 到 getlasterror 命令.应用于 safe=true. false: 驱动不会添加到getLastError命令中。</td>
</tr>
<tr>
<td>journal=true,false</td>
<td>如果设置wie true, 同步到 journal (在提交到数据库前写入到实体中). 应用于 safe=true</td>
</tr>
<tr>
<td>connectTimeoutMS=ms</td>
<td>可以打开连接的时间。</td>
</tr>
<tr>
<td>socketTimeoutMS=ms</td>
<td>发送和接受sockets的时间。</td>
</tr>
</tbody>
</table>
<p><a href="http://www.w3cschool.cc/mongodb/mongodb-insert.html" title="Title" target="_blank" rel="external">数据操作等更多内容</a></p>
<p>###mongodb 类型操作符</p>
<p>$type 根据类型值查找</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db<span class="selector-class">.testtable</span><span class="selector-class">.find</span>(&#123;<span class="string">"extra.friends"</span> : &#123;<span class="variable">$type</span> : <span class="number">3</span>&#125;&#125;)</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>类型</th>
<th>$type 值</th>
</tr>
</thead>
<tbody>
<tr>
<td>Double</td>
<td>1</td>
</tr>
<tr>
<td>String</td>
<td>2</td>
</tr>
<tr>
<td>Object</td>
<td>3</td>
</tr>
<tr>
<td>Array</td>
<td>4</td>
</tr>
<tr>
<td>Binary data</td>
<td>5</td>
</tr>
<tr>
<td>Object id</td>
<td>7</td>
</tr>
<tr>
<td>Boolean</td>
<td>8</td>
</tr>
<tr>
<td>Date</td>
<td>9</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>http://yardfarmer.github.io/2017/02/01/2013-11-09-requirejs/</url>
      <content type="html"><![CDATA[<hr>
<p>layout: post<br>date: 2013-11-09  21:11:13 +0800</p>
<h2 id="title-RequireJS小结"><a href="#title-RequireJS小结" class="headerlink" title="title: RequireJS小结"></a>title: RequireJS小结</h2><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>RequireJS是一个工具库，主要用于客户端的模块管理。它可以让客户端的代码分成一个个模块，实现异步或动态加载，从而提高代码的性能和可维护性。它的模块管理遵守<a href="https://github.com/amdjs/amdjs-api/wiki/AMD" target="_blank" rel="external">AMD规范</a>（Asynchronous Module Definition）。</p>
<p>RequireJS的基本思想是，通过define方法，将代码定义为模块；通过require方法，实现代码的模块加载。</p>
<p>首先，将require.js嵌入网页，然后就能在网页中进行模块化编程了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script data-main=<span class="string">"scripts/main"</span> src=<span class="string">"scripts/require.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>上面代码的data-main属性不可省略，用于指定主代码所在的脚本文件，在上例中为scripts子目录下的main.js文件。用户自定义的代码就放在这个main.js文件中。</p>
<h3 id="define方法：定义模块"><a href="#define方法：定义模块" class="headerlink" title="define方法：定义模块"></a>define方法：定义模块</h3><p>define方法用于定义模块，RequireJS要求每个模块放在一个单独的文件里。</p>
<p>按照是否依赖其他模块，可以分成两种情况讨论。第一种情况是定义独立模块，即所定义的模块不依赖其他模块；第二种情况是定义非独立模块，即所定义的模块依赖于其他模块。</p>
<p><strong>（1）独立模块</strong></p>
<p>如果被定义的模块是一个独立模块，不需要依赖任何其他模块，可以直接用define方法生成。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">define(&#123;</div><div class="line">    <span class="attr">method1</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</div><div class="line">    <span class="attr">method2</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面代码生成了一个拥有method1、method2两个方法的模块。</p>
<p>另一种等价的写法是，把对象写成一个函数，该函数的返回值就是输出的模块。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">	    <span class="attr">method1</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</div><div class="line">		<span class="attr">method2</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</div><div class="line">    &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>后一种写法的自由度更高一点，可以在函数体内写一些模块初始化代码。</p>
<p>值得指出的是，define定义的模块可以返回任何值，不限于对象。</p>
<p><strong>（2）非独立模块</strong></p>
<p>如果被定义的模块需要依赖其他模块，则define方法必须采用下面的格式。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">define([<span class="string">'module1'</span>, <span class="string">'module2'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">m1, m2</span>) </span>&#123;</div><div class="line">   ...</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>define方法的第一个参数是一个数组，它的成员是当前模块所依赖的模块。比如，[‘module1’, ‘module2’]表示我们定义的这个新模块依赖于module1模块和module2模块，只有先加载这两个模块，新模块才能正常运行。一般情况下，module1模块和module2模块指的是，当前目录下的module1.js文件和module2.js文件，等同于写成[‘./module1’, ‘./module2’]。</p>
<p>define方法的第二个参数是一个函数，当前面数组的所有成员加载成功后，它将被调用。它的参数与数组的成员一一对应，比如function(m1, m2)就表示，这个函数的第一个参数m1对应module1模块，第二个参数m2对应module2模块。这个函数必须返回一个对象，供其他模块调用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">define([<span class="string">'module1'</span>, <span class="string">'module2'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">m1, m2</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">method</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            m1.methodA();</div><div class="line">			m2.methodB();</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面代码表示新模块返回一个对象，该对象的method方法就是外部调用的接口，menthod方法内部调用了m1模块的methodA方法和m2模块的methodB方法。</p>
<p>需要注意的是，回调函数必须返回一个对象，这个对象就是你定义的模块。</p>
<p>如果依赖的模块很多，参数与模块一一对应的写法非常麻烦。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">define(</div><div class="line">    [       <span class="string">'dep1'</span>, <span class="string">'dep2'</span>, <span class="string">'dep3'</span>, <span class="string">'dep4'</span>, <span class="string">'dep5'</span>, <span class="string">'dep6'</span>, <span class="string">'dep7'</span>, <span class="string">'dep8'</span>],</div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">dep1,   dep2,   dep3,   dep4,   dep5,   dep6,   dep7,   dep8</span>)</span>&#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<p>为了避免像上面代码那样繁琐的写法，RequireJS提供一种更简单的写法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">define(</div><div class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> dep1 = <span class="built_in">require</span>(<span class="string">'dep1'</span>),</div><div class="line">            dep2 = <span class="built_in">require</span>(<span class="string">'dep2'</span>),</div><div class="line">            dep3 = <span class="built_in">require</span>(<span class="string">'dep3'</span>),</div><div class="line">            dep4 = <span class="built_in">require</span>(<span class="string">'dep4'</span>),</div><div class="line">            dep5 = <span class="built_in">require</span>(<span class="string">'dep5'</span>),</div><div class="line">            dep6 = <span class="built_in">require</span>(<span class="string">'dep6'</span>),</div><div class="line">            dep7 = <span class="built_in">require</span>(<span class="string">'dep7'</span>),</div><div class="line">            dep8 = <span class="built_in">require</span>(<span class="string">'dep8'</span>);</div><div class="line">            ...</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>下面是一个define实际运用的例子。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">define([<span class="string">'math'</span>, <span class="string">'graph'</span>], </div><div class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"> math, graph </span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">plot</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>)</span>&#123;</div><div class="line">                <span class="keyword">return</span> graph.drawPie(math.randomGrid(x,y));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">);</div></pre></td></tr></table></figure>
<p>上面代码定义的模块依赖math和graph两个库，然后返回一个具有plot接口的对象。</p>
<blockquote>
<p> RequireJS的模块语法允许它尽快地加载多个模块， 虽然加载的顺序不定，但依赖的顺序最终是正确的。</p>
</blockquote>
<p>另一个实际的例子是，通过判断浏览器是否为IE，而选择加载zepto或jQuery。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">define((<span class="string">'__proto__'</span> <span class="keyword">in</span> &#123;&#125; ? [<span class="string">'zepto'</span>] : [<span class="string">'jquery'</span>]), <span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> $;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面代码定义了一个中间模块，该模块先判断浏览器是否支持<strong>proto</strong>属性（除了IE，其他浏览器都支持），如果返回true，就加载zepto库，否则加载jQuery库。</p>
<h3 id="require方法：调用模块"><a href="#require方法：调用模块" class="headerlink" title="require方法：调用模块"></a>require方法：调用模块</h3><p>require方法用于调用模块。它的参数与define方法类似。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>([<span class="string">'foo'</span>, <span class="string">'bar'</span>], <span class="function"><span class="keyword">function</span> (<span class="params"> foo, bar </span>) </span>&#123;</div><div class="line">        foo.doSomething();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面方法表示加载foo和bar两个模块，当这两个模块都加载成功后，执行一个回调函数。该回调函数就用来完成具体的任务。</p>
<p>require方法的第一个参数，是一个表示依赖关系的数组。这个数组可以写得很灵活，请看下面的例子。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>( [ <span class="built_in">window</span>.JSON ? <span class="literal">undefined</span> : <span class="string">'util/json2'</span> ], <span class="function"><span class="keyword">function</span> (<span class="params"> JSON </span>) </span>&#123;</div><div class="line">  <span class="built_in">JSON</span> = <span class="built_in">JSON</span> || <span class="built_in">window</span>.JSON;</div><div class="line"></div><div class="line">  <span class="built_in">console</span>.log( <span class="built_in">JSON</span>.parse( <span class="string">'&#123; "JSON" : "HERE" &#125;'</span> ) );</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面代码加载JSON模块时，首先判断浏览器是否原生支持JSON对象。如果是的，则将undefined传入回调函数，否则加载util目录下的json2模块。</p>
<p>require方法也可以用在define方法内部。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</div><div class="line">   <span class="keyword">var</span> otherModule = <span class="built_in">require</span>(<span class="string">'otherModule'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>下面的例子显示了如何动态加载模块。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params"> require </span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> isReady = <span class="literal">false</span>, foobar;</div><div class="line"> </div><div class="line">    <span class="built_in">require</span>([<span class="string">'foo'</span>, <span class="string">'bar'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">foo, bar</span>) </span>&#123;</div><div class="line">        isReady = <span class="literal">true</span>;</div><div class="line">        foobar = foo() + bar();</div><div class="line">    &#125;);</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">isReady</span>: isReady,</div><div class="line">        <span class="attr">foobar</span>: foobar</div><div class="line">    &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面代码所定义的模块，内部加载了foo和bar两个模块，在没有加载完成前，isReady属性值为false，加载完成后就变成了true。因此，可以根据isReady属性的值，决定下一步的动作。</p>
<p>下面的例子是模块的输出结果是一个promise对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">define([<span class="string">'lib/Deferred'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"> Deferred </span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> defer = <span class="keyword">new</span> Deferred(); </div><div class="line">    <span class="built_in">require</span>([<span class="string">'lib/templates/?index.html'</span>,<span class="string">'lib/data/?stats'</span>],</div><div class="line">        <span class="function"><span class="keyword">function</span>(<span class="params"> template, data </span>)</span>&#123;</div><div class="line">            defer.resolve(&#123; <span class="attr">template</span>: template, <span class="attr">data</span>:data &#125;);</div><div class="line">        &#125;</div><div class="line">    );</div><div class="line">    <span class="keyword">return</span> defer.promise();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面代码的define方法返回一个promise对象，可以在该对象的then方法，指定下一步的动作。</p>
<p>如果服务器端采用JSONP模式，则可以直接在require中调用，方法是指定JSONP的callback参数为define。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>( [ </div><div class="line">    <span class="string">"http://someapi.com/foo?callback=define"</span></div><div class="line">], <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(data);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>require方法允许添加第三个参数，即错误处理的回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>(</div><div class="line">    [ <span class="string">"backbone"</span> ], </div><div class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"> Backbone </span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> Backbone.View.extend(&#123; <span class="comment">/* ... */</span> &#125;);</div><div class="line">    &#125;, </div><div class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">		<span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<p>require方法的第三个参数，即处理错误的回调函数，接受一个error对象作为参数。</p>
<p>require对象还允许指定一个全局性的Error事件的监听函数。所有没有被上面的方法捕获的错误，都会被触发这个监听函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">requirejs.onError = <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="AMD模式小结"><a href="#AMD模式小结" class="headerlink" title="AMD模式小结"></a>AMD模式小结</h3><p>define和require这两个定义模块、调用模块的方法，合称为AMD模式。它的模块定义的方法非常清晰，不会污染全局环境，能够清楚地显示依赖关系。</p>
<p>AMD模式可以用于浏览器环境，并且允许非同步加载模块，也可以根据需要动态加载模块。</p>
<h2 id="配置require-js：config方法"><a href="#配置require-js：config方法" class="headerlink" title="配置require.js：config方法"></a>配置require.js：config方法</h2><p>require方法本身也是一个对象，它带有一个config方法，用来配置require.js运行参数。config方法接受一个对象作为参数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>.config(&#123;</div><div class="line">    <span class="attr">paths</span>: &#123;</div><div class="line">        <span class="attr">jquery</span>: [</div><div class="line">            <span class="string">'//cdnjs.cloudflare.com/ajax/libs/jquery/2.0.0/jquery.min.js'</span>,</div><div class="line">            <span class="string">'lib/jquery'</span></div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>config方法的参数对象有以下主要成员：</p>
<p><strong>（1）paths</strong></p>
<p>paths参数指定各个模块的位置。这个位置可以是同一个服务器上的相对位置，也可以是外部网址。可以为每个模块定义多个位置，如果第一个位置加载失败，则加载第二个位置，上面的示例就表示如果CDN加载失败，则加载服务器上的备用脚本。需要注意的是，指定本地文件路径时，可以省略文件最后的js后缀名。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>([<span class="string">"jquery"</span>], <span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面代码加载jquery模块，因为jquery的路径已经在paths参数中定义了，所以就会到事先设定的位置下载。</p>
<p><strong>（2）baseUrl</strong></p>
<p>baseUrl参数指定本地模块位置的基准目录，即本地模块的路径是相对于哪个目录的。该属性通常由require.js加载时的data-main属性指定。</p>
<p><strong>（3）shim</strong></p>
<p>有些库不是AMD兼容的，这时就需要指定shim属性的值。shim可以理解成“垫片”，用来帮助require.js加载非AMD规范的库。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>.config(&#123;</div><div class="line">    <span class="attr">paths</span>: &#123;</div><div class="line">        <span class="string">"backbone"</span>: <span class="string">"vendor/backbone"</span>,</div><div class="line">        <span class="string">"underscore"</span>: <span class="string">"vendor/underscore"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">shim</span>: &#123;</div><div class="line">        <span class="string">"backbone"</span>: &#123;</div><div class="line">            <span class="attr">deps</span>: [ <span class="string">"underscore"</span> ],</div><div class="line">            <span class="attr">exports</span>: <span class="string">"Backbone"</span></div><div class="line">        &#125;,</div><div class="line">        <span class="string">"underscore"</span>: &#123;</div><div class="line">            <span class="attr">exports</span>: <span class="string">"_"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面代码中的backbone和underscore就是非AMD规范的库。shim指定它们的依赖关系（backbone依赖于underscore），以及输出符号（backbone为“Backbone”，underscore为“_”）。</p>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>RequireJS允许使用插件，加载各种格式的数据。完整的插件清单可以查看<a href="https://github.com/jrburke/requirejs/wiki/Plugins" target="_blank" rel="external">官方网站</a>。</p>
<p>下面是插入文本数据所使用的text插件的例子。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">define([</div><div class="line">    <span class="string">'backbone'</span>,</div><div class="line">    <span class="string">'text!templates.html'</span></div><div class="line">], <span class="function"><span class="keyword">function</span>(<span class="params"> Backbone, template </span>)</span>&#123;</div><div class="line">   <span class="comment">// ...</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面代码加载的第一个模块是backbone，第二个模块则是一个文本，用’text!’表示。该文本作为字符串，存放在回调函数的template变量中。</p>
<h2 id="优化器r-js"><a href="#优化器r-js" class="headerlink" title="优化器r.js"></a>优化器r.js</h2><p>RequireJS提供一个基于node.js的命令行工具r.js，用来压缩多个js文件。它的主要作用是将多个模块文件压缩合并成一个脚本文件，以减少网页的HTTP请求数。</p>
<p>第一步是安装r.js（假设已经安装了node.js）。</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> -g requirejs</div></pre></td></tr></table></figure>
<p>然后，使用的时候，直接在命令行键入以下格式的命令。</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">node</span> <span class="title">r</span>.js -o <span class="tag">&lt;arguments&gt;</span></div></pre></td></tr></table></figure>
<p>&lt;argument&gt;表示命令运行时，所需要的一系列参数，比如像下面这样：</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">node</span> <span class="title">r</span>.js -o <span class="attr">baseUrl=</span>. <span class="attr">name=</span>main <span class="attr">out=</span>main-built.js</div></pre></td></tr></table></figure>
<p>除了直接在命令行提供参数设置，也可以将参数写入一个文件，假定文件名为build.js。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">(&#123;</div><div class="line">    <span class="attr">baseUrl</span>: <span class="string">"."</span>,</div><div class="line">    <span class="attr">name</span>: <span class="string">"main"</span>,</div><div class="line">    <span class="attr">out</span>: <span class="string">"main-built.js"</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>然后，在命令行下用r.js运行这个参数文件，就OK了，不需要其他步骤了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node r.js -o build.js</div></pre></td></tr></table></figure>
<p>下面是一个参数文件的范例，假定位置就在根目录下，文件名为build.js。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">(&#123;</div><div class="line">    <span class="attr">appDir</span>: <span class="string">'./'</span>,</div><div class="line">    <span class="attr">baseUrl</span>: <span class="string">'./js'</span>,</div><div class="line">    <span class="attr">dir</span>: <span class="string">'./dist'</span>,</div><div class="line">    <span class="attr">modules</span>: [</div><div class="line">        &#123;</div><div class="line">            <span class="attr">name</span>: <span class="string">'main'</span></div><div class="line">        &#125;</div><div class="line">    ],</div><div class="line">    <span class="attr">fileExclusionRegExp</span>: <span class="regexp">/^(r|build)\.js$/</span>,</div><div class="line">    <span class="attr">optimizeCss</span>: <span class="string">'standard'</span>,</div><div class="line">    <span class="attr">removeCombined</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">paths</span>: &#123;</div><div class="line">        <span class="attr">jquery</span>: <span class="string">'lib/jquery'</span>,</div><div class="line">        <span class="attr">underscore</span>: <span class="string">'lib/underscore'</span>,</div><div class="line">        <span class="attr">backbone</span>: <span class="string">'lib/backbone/backbone'</span>,</div><div class="line">        <span class="attr">backboneLocalstorage</span>: <span class="string">'lib/backbone/backbone.localStorage'</span>,</div><div class="line">        <span class="attr">text</span>: <span class="string">'lib/require/text'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">shim</span>: &#123;</div><div class="line">        <span class="attr">underscore</span>: &#123;</div><div class="line">            <span class="attr">exports</span>: <span class="string">'_'</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">backbone</span>: &#123;</div><div class="line">            <span class="attr">deps</span>: [</div><div class="line">                <span class="string">'underscore'</span>,</div><div class="line">                <span class="string">'jquery'</span></div><div class="line">            ],</div><div class="line">            <span class="attr">exports</span>: <span class="string">'Backbone'</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">backboneLocalstorage</span>: &#123;</div><div class="line">            <span class="attr">deps</span>: [<span class="string">'backbone'</span>],</div><div class="line">            <span class="attr">exports</span>: <span class="string">'Store'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>上面代码将多个模块压缩合并成一个main.js。</p>
<p>参数文件的主要成员解释如下：</p>
<ul>
<li><p><strong>appDir</strong>：项目目录，相对于参数文件的位置。</p>
</li>
<li><p><strong>baseUrl</strong>：js文件的位置。</p>
</li>
<li><p><strong>dir</strong>：输出目录。</p>
</li>
<li><p><strong>modules</strong>：一个包含对象的数组，每个对象就是一个要被优化的模块。</p>
</li>
<li><p><strong>fileExclusionRegExp</strong>：凡是匹配这个正则表达式的文件名，都不会被拷贝到输出目录。</p>
</li>
<li><p><strong>optimizeCss</strong>: 自动压缩CSS文件，可取的值包括“none”, “standard”, “standard.keepLines”, “standard.keepComments”, “standard.keepComments.keepLines”。</p>
</li>
<li><p><strong>removeCombined</strong>：如果为true，合并后的原文件将不保留在输出目录中。</p>
</li>
<li><p><strong>paths</strong>：各个模块的相对路径，可以省略js后缀名。</p>
</li>
<li><p><strong>shim</strong>：配置依赖性关系。如果某一个模块不是AMD模式定义的，就可以用shim属性指定模块的依赖性关系和输出值。</p>
</li>
<li><p><strong>generateSourceMaps</strong>：是否要生成source map文件。</p>
</li>
</ul>
<p>更详细的解释可以参考<a href="https://github.com/jrburke/r.js/blob/master/build/example.build.js" target="_blank" rel="external">官方文档</a>。</p>
<p>运行优化命令后，可以前往dist目录查看优化后的文件。</p>
<p>下面是另一个build.js的例子。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">(&#123;</div><div class="line">    <span class="attr">mainConfigFile</span> : <span class="string">"js/main.js"</span>,</div><div class="line">    <span class="attr">baseUrl</span>: <span class="string">"js"</span>,</div><div class="line">    <span class="attr">removeCombined</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">findNestedDependencies</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">dir</span>: <span class="string">"dist"</span>,</div><div class="line">    <span class="attr">modules</span>: [</div><div class="line">        &#123;</div><div class="line">            <span class="attr">name</span>: <span class="string">"main"</span>,</div><div class="line">            <span class="attr">exclude</span>: [</div><div class="line">                <span class="string">"infrastructure"</span></div><div class="line">            ]</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            <span class="attr">name</span>: <span class="string">"infrastructure"</span></div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>上面代码将模块文件压缩合并成两个文件，第一个是main.js（指定排除infrastructure.js），第二个则是infrastructure.js。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li>NaorYe, <a href="http://www.webdeveasy.com/optimize-requirejs-projects/" target="_blank" rel="external">Optimize (Concatenate and Minify) RequireJS Projects</a></li>
<li>Jonathan Creamer, <a href="http://tech.pro/tutorial/1300/deep-dive-into-requirejs" target="_blank" rel="external">Deep dive into Require.js</a></li>
<li>Addy Osmani, <a href="http://addyosmani.com/writing-modular-js/" target="_blank" rel="external">Writing Modular JavaScript With AMD, CommonJS &amp; ES Harmony</a> </li>
<li>Jim Cowart, <a href="http://tech.pro/blog/1561/five-helpful-tips-when-using-requirejs" target="_blank" rel="external">Five Helpful Tips When Using RequireJS</a> </li>
<li>Jim Cowart, <a href="http://tech.pro/blog/1639/using-rjs-to-optimize-your-requirejs-project" target="_blank" rel="external">Using r.js to Optimize Your RequireJS Project</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>http://yardfarmer.github.io/2017/02/01/koa_node/</url>
      <content type="html"><![CDATA[<p>#koa node</p>
<ol>
<li><p>koa 的中间件执行时，遇到 <code>yield next</code>, 关键字时,会被传递到下游中间件(downstream), yield next 捕获不到下一个中间件时, 逆序返回继续执行代码(upstream). <strong>入栈 出栈</strong></p>
</li>
<li><p>一个或多个 Koa 应用可以被加载到一块 组成一个更大的包含一个 HTTP server 的应用.</p>
</li>
<li></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>http://yardfarmer.github.io/2017/02/01/javascript/</url>
      <content type="html"><![CDATA[<blockquote>
<p>任何可以用 javascript 写成的应用最终都会用 javascript 写。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://yardfarmer.github.io/2017/02/01/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>http://yardfarmer.github.io/2017/02/01/filtbar_%E9%87%8D%E6%9E%84/</url>
      <content type="html"><![CDATA[<p>#filtbar 重构</p>
<p>##当前欠缺</p>
<ol>
<li><p>违背开发封闭原则，即扩展是开放的，修改是封闭的。当前代码采用的逻辑恰好是通过修改加入新的功能，违背的封闭原则。</p>
</li>
<li><p>没有体现热插拔的设计思路，即没有层层嵌套，层层组合的思想， 应提供统一的接口， 方便宿主初始化渲染寄生组件</p>
</li>
<li></li>
</ol>
<p>##重构思路</p>
<ol>
<li>采用工厂模式，每个寄生组件的接口统一</li>
<li>加入发布订阅</li>
<li>统一事件管理</li>
<li></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用git部署远程服务器]]></title>
      <url>http://yardfarmer.github.io/2017/02/01/2013-12-29-%E5%88%A9%E7%94%A8git%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>本地开发完成后，通常会在服务器上部署，坦白的说我见过并且用过 <code>vnc + winscp + hg pull/update</code> 方式, 可悲的是需要在四台服务器上全部执行一遍.</p>
<p>后来采用 ssh + pull, 但并是仍然比较繁琐. 上面的问题可以通过<code>ssh</code>直接远程执行命令来解决，但是需要写一些<code>shell</code>脚本…</p>
<p>在学习 git 时候,发现了 git 具有 ‘hook’机制, 使用版本版本管理工具的<code>hook</code>!  其实其他版本工具,如 <code>svn</code>、<code>git</code>、<code>hg</code>都是有相应的<code>hook</code>的， 原理大同小异。下面是Git详细的思路。</p>
<h2 id="Git-Hook"><a href="#Git-Hook" class="headerlink" title="Git Hook"></a>Git Hook</h2><p>和其他版本控制系统一样，在某些关键节点，Git 可以调用自定义脚本。分为两组挂钩：客户端和服务器端。客户端挂钩用于客户端的操作，如提交和合并。服务器端挂钩用于 Git 服务器端的操作，如接收被推送的提交。可以随意地使用这些挂钩。</p>
<h2 id="安装一个挂钩"><a href="#安装一个挂钩" class="headerlink" title="安装一个挂钩"></a>安装一个挂钩</h2><p>挂钩都被存储在 Git 目录下的 hooks 子目录中，即大部分项目中的 .git/hooks。 Git 默认会放置一些脚本样本在这个目录中，除了可以作为挂钩使用，这些样本本身是可以独立使用的。所有的样本都是 shell 脚本，不过，任何正确命名的可执行脚本都可以正常使用 — 可以用Ruby或Python，或其他。这些样本名都是以 .sample 结尾，因此，你必须重新命名。</p>
<p>把一个正确命名且可执行的文件放入 Git 目录下的hooks子目录中，可以激活该挂钩脚本，因此，之后他一直会被 Git 调用。随后会讲解主要的挂钩脚本。</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.git/hooks \</div><div class="line">			├──	<span class="keyword">update</span> # 更新时执行</div><div class="line">			├──	commit-msg # 提交</div><div class="line">			├──	applypatch-msg.<span class="keyword">sample</span> # 带有<span class="keyword">sample</span>缀,不执行</div><div class="line">			├──	<span class="keyword">post</span>-<span class="keyword">update</span>.<span class="keyword">sample</span></div><div class="line">		  ...</div></pre></td></tr></table></figure>
<h2 id="服务器端操作"><a href="#服务器端操作" class="headerlink" title="服务器端操作"></a>服务器端操作</h2><p>首先创建一个裸库(empty Git repository)，为什么是裸库？因为这个库不是真正用来修改的，我们也不允许在服务器上修改代码，我们只是把它当作一个代码中转的地方</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> gitroot</div><div class="line"><span class="built_in">mkdir</span> projectname</div><div class="line"><span class="built_in">cd</span> projectname</div><div class="line">git init --bare</div></pre></td></tr></table></figure>
<p>可以看到它的目录结构与普通版本库存在差异：把原本在 .git 文件夹的内容移到了根目录，去掉了 .git 文件夹。</p>
<p>添加我们的 <code>hook</code></p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cd</span> /hooks</div><div class="line">touch <span class="keyword">post</span>-receive</div></pre></td></tr></table></figure>
<p>编辑<code>post-receive</code>的内容为下面的，其中<code>sites/projectname</code>，是我们存放代码地方</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">env -i git archive <span class="keyword">master</span> <span class="title">| tar</span> -x -C /sites/projectname </div><div class="line">echo <span class="string">"远程更新完毕"</span></div></pre></td></tr></table></figure>
<h2 id="本地git的操作"><a href="#本地git的操作" class="headerlink" title="本地git的操作"></a>本地git的操作</h2><p>本地我们只需要添加一个远程库，在需要部署的时候 <code>push</code> 到远程库就行了,下面我们添加了一个名为<code>publish</code>的远程库</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git remote add publish username@xx<span class="selector-class">.xx</span><span class="selector-class">.xx</span><span class="selector-class">.xx</span>:/home/gitroot/projectname</div><div class="line">git push publish master</div></pre></td></tr></table></figure>
<h2 id="可以强化的地方"><a href="#可以强化的地方" class="headerlink" title="可以强化的地方"></a>可以强化的地方</h2><p>还可以添加静态资源版本更新,服务器重启,代码编译等等</p>
]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>http://yardfarmer.github.io/2017/02/01/es6_generator/</url>
      <content type="html"><![CDATA[<p>#es6 generator</p>
<blockquote>
<p>当调用 generator 函数的时候， 该函数并不会执行，而是返回一个遍历器(可以理解成暂停执行)</p>
</blockquote>
<p>以后， 每次调用这个遍历器的 next 方法，就从函数体的<strong>头部或者上一次停下来的地方</strong>开始执行（恢复).</p>
<p>generator 函数使用 iterator 接口，每次调用 next 方法的返回值就是一个标准的 iterator 返回值: <code>{value: xxx, done: boolean}</code></p>
<p>##典型应用</p>
<p>###1.ajax<br><figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">main</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">var</span> result = <span class="keyword">yield</span> request(<span class="string">"http://some.url"</span>);</div><div class="line">  <span class="built_in">var</span> resp = <span class="built_in">JSON</span>.parse(result);</div><div class="line">    <span class="built_in">console</span>.log(resp.value);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">url</span>) </span>&#123;</div><div class="line">  makeAjaxCall(<span class="built_in">url</span>, <span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</div><div class="line">    it.next(response); <span class="comment">// 把值带回去</span></div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">var</span> it = main();</div><div class="line">it.next();</div></pre></td></tr></table></figure></p>
<p>注意，makeAjaxCall函数中的next方法，必须加上response参数，因为yield语句构成的表达式，本身是没有值的，总是等于undefined。</p>
<p>###2.流程控制</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">step1(<span class="name">function</span> (<span class="name">value1</span>) &#123;</div><div class="line">  step2(<span class="name">value1</span>, function(<span class="name">value2</span>) &#123;</div><div class="line">    step3(<span class="name">value2</span>, function(<span class="name">value3</span>) &#123;</div><div class="line">      step4(<span class="name">value3</span>, function(<span class="name">value4</span>) &#123;</div><div class="line">        // Do something with value4</div><div class="line">      &#125;)<span class="comment">;</span></div><div class="line">    &#125;)<span class="comment">;</span></div><div class="line">  &#125;)<span class="comment">;</span></div><div class="line">&#125;)<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>使用 promise</p>
<figure class="highlight scilab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Q.fcall(step1)</div><div class="line">.<span class="keyword">then</span>(step2)</div><div class="line">.<span class="keyword">then</span>(step3)</div><div class="line">.<span class="keyword">then</span>(step4)</div><div class="line">.<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span> <span class="params">(value4)</span> &#123;</span></div><div class="line">    <span class="comment">// Do something with value4</span></div><div class="line">&#125;, <span class="function"><span class="keyword">function</span> <span class="params">(error)</span> &#123;</span></div><div class="line">    <span class="comment">// Handle any error from step1 through step4</span></div><div class="line">&#125;)</div><div class="line">.done();</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>http://yardfarmer.github.io/2017/02/01/event_performance%EF%BC%88%E4%BA%8B%E4%BB%B6%E6%80%A7%E8%83%BD%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>#Event performance（事件性能）</p>
<p>在大多数情况下，一个事件如click很少发生，性能表现并不显注。但是，高频率事件比如mousemove 或者 scroll可以每秒触发几十个次，在这种情况下明智地使用事件变得更加重要。可以按如下的办法提高事件的性能：减少事件处理函数中的工作量；对于在事件处理函数中要用到的信息做好缓存而不是再重新计算一次；或使用setTimeout限制的页面更新的实际次数。</p>
<p>许多委派的事件处理程序绑定到 document 树的顶层附近，可以降低性能。每次发生事件时，jQuery 需要比较从 event target（目标元素） 开始到文档顶部的路径中每一个元素上所有该类型的事件。为了获得更好的性能，在绑定代理事件时，绑定的元素最好尽可能的靠近目标元素。避免在大型文档中，过多的在 document 或 document.body 上添加代理事件。</p>
]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>http://yardfarmer.github.io/2017/02/01/css%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83/</url>
      <content type="html"><![CDATA[<p>#css编写规范</p>
<h2 id="css-书写顺序"><a href="#css-书写顺序" class="headerlink" title="css 书写顺序"></a>css 书写顺序</h2><p>尽量按照特定顺序编写规则，这将确保你充分发挥 CSS 中第一个 C 的意义：<strong>cascade</strong>，层叠。</p>
<p>一份规划良好的 CSS 应当按照如下排列：</p>
<ol>
<li>Reset 万物之根源</li>
<li>元素类型 没有 class 的 h1、ul 等</li>
<li>对象以及抽象内容 最一般、最基础的设计模式</li>
<li>子元素 由对象延伸出来的所有拓展及其子元素</li>
<li>修补 针对异常状态</li>
</ol>
<blockquote>
<p>显示 &gt; 盒模型 &gt; 文本</p>
</blockquote>
<figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">/*========================</div><div class="line">/*显示*/</div><div class="line">display |<span class="type">| visibility</span></div><div class="line">list-style : list-style-type |<span class="type">| list</span>-style-position |<span class="type">| list</span>-style-image</div><div class="line">position</div><div class="line"><span class="built_in">top</span> |<span class="type">| right</span> |<span class="type">| bottom</span> |<span class="type">| left</span></div><div class="line">z-index</div><div class="line"><span class="built_in">clear</span></div><div class="line">float</div><div class="line">/*盒模型*/</div><div class="line">width</div><div class="line">max-width |<span class="type">| min</span>-width</div><div class="line">height</div><div class="line">max-height |<span class="type">| min</span>-height</div><div class="line">overflow |<span class="type">| clip</span></div><div class="line">margin : margin-<span class="built_in">top</span> |<span class="type">| margin</span>-<span class="built_in">right</span> |<span class="type">| margin</span>-<span class="built_in">bottom</span> |<span class="type">| margin</span>-<span class="built_in">left</span></div><div class="line">padding : padding-<span class="built_in">top</span> |<span class="type">| padding</span>-<span class="built_in">right</span> |<span class="type">| padding</span>-<span class="built_in">bottom</span> |<span class="type">| padding</span>-<span class="built_in">left</span></div><div class="line">outline : outline-color |<span class="type">| outline</span>-style |<span class="type">| outline</span>-width</div><div class="line">border</div><div class="line">background : background-color |<span class="type">| background</span>-image |<span class="type">| background</span>-<span class="built_in">repeat</span> |<span class="type">| background</span>-attachment |<span class="type">| background</span>-position</div><div class="line">/*文本*/</div><div class="line">color</div><div class="line">font : font-style |<span class="type">| font</span>-variant |<span class="type">| font</span>-weight |<span class="type">| font</span>-size |<span class="type">|    line</span>-height |<span class="type">| font</span>-family</div><div class="line">font : caption | <span class="type">icon</span> | <span class="type">menu</span> | <span class="type">message</span>-box | <span class="type">small</span>-caption |    <span class="type">status</span>-bar</div><div class="line">text-overflow</div><div class="line">text-align</div><div class="line">text-indent</div><div class="line">line-height</div><div class="line">white-space</div><div class="line">vertical-align</div><div class="line">cursor</div><div class="line">========================*/</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>http://yardfarmer.github.io/2017/02/01/css%E4%B9%A6%E5%86%99%E8%A7%84%E8%8C%83/</url>
      <content type="html"><![CDATA[<p>css 编写习惯</p>
<ol>
<li><p>分区, 看过视觉稿之后，我们可以得出该视觉稿有9个独立区块，所以我们描写结构的css文件中的区块样式定义最多为9块</p>
</li>
<li><p>抽象, 考虑哪些局部分类的样式是基本相似的, 可以抽出来复用. </p>
<ul>
<li><p>比如字体, 颜色做成复用的样式, 所以在分区的基础上再加一个定义块, 用于编写复用的样式; </p>
</li>
<li><p>比如使用 css sprite 图时, 不应每使用一次图片就引用一次, 而是应该定义一个工公用的样式.</p>
</li>
<li><p>把定义背景的代码也放在一处, 便于维护</p>
</li>
</ul>
</li>
</ol>
<blockquote>
<p>css文件中定义样式区块的数量 = 页面最多区块数 + 公共区块 + 背景图区块 </p>
</blockquote>
<ul>
<li><p>IE6下如果背景图在各处定义，那么它将导致背景图多次被请求，加大服务器开销</p>
</li>
<li><p>构思 css 文件中的代码结构</p>
</li>
</ul>
<blockquote>
<p>css代码结构先后循序为：背景图定义、公用定义、各个页面区块定义，两个代码区块之间请用回车键换行隔开</p>
</blockquote>
<pre><code>/* 背景图 */
.part-a .background,
.part-b .background,
.part-c .background{background:url(&quot;http://www.aissa.me/fuck/you/once.png&quot;) no-repeat;}

/* 公用 */
.link:link,
.link:visited{color:#06c; text-decoration:none;}
.link:hover{color:#ff7300; text-decoration:underline;}
.margin-top-8px{margin-top:8px;}

/* 区块一 */
.part-a{width:400px; height:300px;}
.part-a .background{background-position:-50px -100px; width:100px; height:150px;}
.part-a .class-a{width:100px; height:100px;}
......

/* 区块二 */
.part-b{width:400px; height:300px;}
.part-b .background{background-position:-50px -100px; width:100px; height:150px;}
.part-b .class-a{width:100px; height:100px;}
......

/* 区块三 */
.part-c{width:400px; height:300px;}
.part-c .background{background-position:-50px -100px; width:100px; height:150px;}
.part-c .class-a{width:100px; height:100px;}
......
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>http://yardfarmer.github.io/2017/02/01/closest%E4%B8%8E%20parents%20%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<p>#closest()与parents()的区别</p>
<table>
<thead>
<tr>
<th>.closest()</th>
<th>.parents()</th>
</tr>
</thead>
<tbody>
<tr>
<td>开始于当前元素</td>
<td>开始于父元素</td>
</tr>
<tr>
<td>在 DOM 树中向上遍历，直到找到了与提供的选择器相匹配的元素</td>
<td>向上遍历DOM树到文档的根元素，每个祖先元素加入到临时集合，如果提供一个选择器，则会使用该选择器在集合中进行过滤</td>
<td></td>
</tr>
<tr>
<td>返回包含零个或一个元素的jQuery对象</td>
<td>返回包含零个，一个或多个元素的jQuery对象</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[页面性能的几个评测点]]></title>
      <url>http://yardfarmer.github.io/2017/02/01/2012-08-03-%E9%A1%B5%E9%9D%A2%E6%80%A7%E8%83%BD%E7%9A%84%E5%87%A0%E4%B8%AA%E8%AF%84%E6%B5%8B%E7%82%B9/</url>
      <content type="html"><![CDATA[<p>页面性能评测还是时间第一，细化了可以分为下面的几个</p>
<ol>
<li><p>加载时间</p>
<ul>
<li>从在浏览器里按下回车键到页面开始出现的时间，相同站点在不同浏览器下这个时间会有所不同</li>
<li>触发浏览器onload事件的时间</li>
<li>所有资源下载完毕的时间</li>
</ul>
</li>
<li><p>资源</p>
<ul>
<li>所有的请求数</li>
<li>图片/css/javascript的大小</li>
<li>网页（html）的大小</li>
<li>异步请求的数量</li>
<li>坏请求的数量(重定向，服务器端错误等等)</li>
</ul>
</li>
<li><p>网络</p>
<ul>
<li>DNS时间（查找域名对应的服务器IP耗费的时间）</li>
<li>连接时间 （向服务器发起连接时间）</li>
<li>服务器时间 （服务器端处理请求的耗费时间）</li>
<li>传输时间 （由服务器向客户端传输资源耗费时间）</li>
<li>等待时间 （同时向一个服务器请求的连接数量是有限制的，获取资源时的等待空闲连接的时间）</li>
</ul>
</li>
</ol>
<p>以上关键点互相之间相辅相成，二和三决定了一的时间，另外，交互复杂的网站，很多资源的请求是在用户操作的情况下发起的，这些单个的请求也同样可以用上样的关键点进行评测。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[正则速查表]]></title>
      <url>http://yardfarmer.github.io/2017/02/01/2014-08-20-%E6%AD%A3%E5%88%99%E9%80%9F%E6%9F%A5%E8%A1%A8/</url>
      <content type="html"><![CDATA[<h2 id="常用的元字符"><a href="#常用的元字符" class="headerlink" title="常用的元字符"></a>常用的元字符</h2><table>
<thead>
<tr>
<th>代码</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>.</td>
<td>匹配除换行符以外的任意字符</td>
</tr>
<tr>
<td>\w</td>
<td>匹配字母或数字或下划线或汉字</td>
</tr>
<tr>
<td>\s</td>
<td>匹配任意的空白符</td>
</tr>
<tr>
<td>\d</td>
<td>匹配数字</td>
</tr>
<tr>
<td>\b</td>
<td>匹配单词的开始或结束</td>
</tr>
<tr>
<td>^</td>
<td>匹配字符串的开始</td>
</tr>
<tr>
<td>$</td>
<td>匹配字符串的结束</td>
</tr>
</tbody>
</table>
<h2 id="常用的限定符"><a href="#常用的限定符" class="headerlink" title="常用的限定符"></a>常用的限定符</h2><table>
<thead>
<tr>
<th>代码/语法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>*</td>
<td>重复零次或更多次</td>
</tr>
<tr>
<td>+</td>
<td>重复一次或更多次</td>
</tr>
<tr>
<td>?</td>
<td>重复零次或一次</td>
</tr>
<tr>
<td>{n}</td>
<td>重复n次</td>
</tr>
<tr>
<td>{n,}</td>
<td>重复n次或更多次</td>
</tr>
<tr>
<td>{n,m}</td>
<td>重复n到m次</td>
</tr>
</tbody>
</table>
<h2 id="常用的反义代码"><a href="#常用的反义代码" class="headerlink" title="常用的反义代码"></a>常用的反义代码</h2><table>
<thead>
<tr>
<th>代码/语法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>\W</td>
<td>匹配任意不是字母，数字，下划线，汉字的字符</td>
</tr>
<tr>
<td>\S</td>
<td>匹配任意不是空白符的字符</td>
</tr>
<tr>
<td>\D</td>
<td>匹配任意非数字的字符</td>
</tr>
<tr>
<td>\B</td>
<td>匹配不是单词开头或结束的位置</td>
</tr>
<tr>
<td>[^x]</td>
<td>匹配除了x以外的任意字符</td>
</tr>
<tr>
<td>[^aeiou]</td>
<td>匹配除了aeiou这几个字母以外的任意字符</td>
</tr>
</tbody>
</table>
<h2 id="常用分组语法"><a href="#常用分组语法" class="headerlink" title="常用分组语法"></a>常用分组语法</h2><table>
<thead>
<tr>
<th>分类</th>
<th>代码/语法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>捕获</td>
<td>(exp)</td>
<td>匹配exp,并捕获文本到自动命名的组里</td>
</tr>
<tr>
<td>捕获</td>
<td>(?<name>exp)</name></td>
<td>匹配exp,并捕获文本到名称为name的组里，也可以写成(?’name’exp)</td>
</tr>
<tr>
<td>捕获</td>
<td>(?:exp)</td>
<td>匹配exp,不捕获匹配的文本，也不给此分组分配组号</td>
</tr>
<tr>
<td>零宽断言</td>
<td>(?=exp)</td>
<td>匹配exp前面的位置</td>
</tr>
<tr>
<td>零宽断言</td>
<td>(?&lt;=exp)</td>
<td>匹配exp后面的位置</td>
</tr>
<tr>
<td>零宽断言</td>
<td>(?!exp)</td>
<td>匹配后面跟的不是exp的位置</td>
</tr>
<tr>
<td>零宽断言</td>
<td>(?&lt;!exp)</td>
<td>匹配前面不是exp的位置</td>
</tr>
<tr>
<td>注释</td>
<td>(?#comment)</td>
<td>这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释让人阅读</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[探究 html5]]></title>
      <url>http://yardfarmer.github.io/2017/02/01/2014-08-10-%E6%8E%A2%E7%A9%B6%20html5/</url>
      <content type="html"><![CDATA[<p>##classList<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">div.classList.remove(<span class="string">"className"</span>);</div><div class="line">div.classList.add(<span class="string">"className"</span>);</div><div class="line"></div><div class="line"><span class="comment">/*toggle会切换状态*/</span></div><div class="line">div.classList.toggle(<span class="string">""</span>);</div><div class="line">div.classList.</div></pre></td></tr></table></figure></p>
<p>##canvas</p>
<p>##contenteditable<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">tag</span> <span class="attr">contenteditable</span> &gt;</span><span class="tag">&lt;/<span class="name">tag</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tag</span> <span class="attr">contenteditable</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">tag</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>##db.transaction<br>transaction 事务性,同进同退</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> db = openDatabase(<span class="string">'foo'</span>, <span class="string">'1.0'</span>, <span class="string">'foo'</span>, <span class="number">2</span> * <span class="number">1024</span>);</div><div class="line">db.transaction(<span class="function"><span class="keyword">function</span> (<span class="params">tx</span>) </span>&#123;  </div><div class="line">  tx.executeSql(<span class="string">'CREATE TABLE IF NOT EXISTS foo (id unique, text)'</span>);</div><div class="line">  <span class="comment">// 如果下面这条失败,上面的也会回退</span></div><div class="line">  tx.executeSql(<span class="string">'INSERT INTO foo (id, text) VALUES (1, "foobar")'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<hr>
<p>##dataset<br>超级好的 dataset 属性</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">data-id</span>=<span class="string">"123456"</span> <span class="attr">data-user</span>=<span class="string">"cyk"</span>&gt;</span></div><div class="line">  dataset demo.</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">	<span class="keyword">var</span> el = <span class="built_in">document</span>.querySelector(<span class="string">"#user"</span>);</div><div class="line">	<span class="built_in">console</span>.log(el.id);</div><div class="line">	<span class="built_in">console</span>.log(el.dataset.id);</div><div class="line">	<span class="built_in">console</span>.log(el.dataset.user);</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h2 id="drag-drop-amp-DataTansfer"><a href="#drag-drop-amp-DataTansfer" class="headerlink" title="drag/drop &amp; DataTansfer"></a>drag/drop &amp; DataTansfer</h2><p><em>DataTransfer</em>对象是用于承载drag和drop操作过程的数据的.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> addEvent(el, <span class="string">'dragstart'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line"> 	  <span class="comment">// only dropEffect='copy' will be dropable </span></div><div class="line">    e.dataTransfer.effectAllowed = <span class="string">'copyMove'</span>; </div><div class="line">    <span class="comment">// required otherwise doesn't work</span></div><div class="line">    e.dataTransfer.setData(<span class="string">'Text'</span>, <span class="keyword">this</span>.id); </div><div class="line">  &#125;);</div><div class="line"></div><div class="line">addEvent(bin, <span class="string">'dragover'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (e.preventDefault) e.preventDefault(); <span class="comment">// allows us to drop</span></div><div class="line">  <span class="keyword">this</span>.className = <span class="string">'over'</span>;</div><div class="line">  e.dataTransfer.dropEffect = <span class="string">'copy'</span>;</div><div class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CSS3 的 transition 和 animation]]></title>
      <url>http://yardfarmer.github.io/2017/02/01/2014-08-10-transition&animation/</url>
      <content type="html"><![CDATA[<p>##transition<br>transition 属性是<br>transition-property,<br>transition-duration,<br>transition-timing-function,<br>transition-delay<br>的简称,用于设定一个元素的两个状态,不同的状态可以用伪类，比如:hover, :active 或者是通过 javascript 动态设定。IE10+支持。</p>
<p>所以 transition 的初始值为：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">transition-delay</span>: 0<span class="selector-tag">s</span>;</div><div class="line"><span class="selector-tag">transition-duration</span>: 0<span class="selector-tag">s</span>;</div><div class="line"><span class="selector-tag">transition-property</span>: <span class="selector-tag">all</span>;</div><div class="line"><span class="selector-tag">transition-timing-function</span>: <span class="selector-tag">ease</span>;</div></pre></td></tr></table></figure></p>
<p>###用法<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line">  <span class="attribute">transition</span>: &lt;property&gt; &lt;duration&gt;    &lt;timing-function&gt; &lt;delay&gt;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>并且有事件可以监测 transition 结束<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">el.addEventListener(<span class="string">"transitionend"</span>,updateTransition,<span class="literal">true</span>);</div><div class="line"></div><div class="line"><span class="comment">//in webkit</span></div><div class="line">el.addEventListener(<span class="string">"webkitTransitionEnd"</span>,updateTransition,<span class="literal">true</span>);</div></pre></td></tr></table></figure></p>
<p>###实例<br>HTML<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--  DEMO 1: Fade Block --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"fade"</span>&gt;</span></div><div class="line">     move here  !</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"nudge"</span>&gt;</span></div><div class="line">    mouse on me </div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"bounce"</span>&gt;</span>Place mouse on  me i will bounce!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"spin"</span>&gt;</span>Place mouse on  me i won  me i won  me i won  me i won  me i won  me i won  me i won  me i won  me i won  me i won  me i won  me i won  me i won  me i won  me i will spin<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"accordion"</span> <span class="attr">class</span>=<span class="string">"accordion"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#first"</span>&gt;</span>This is first tab<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"first"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum <span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#second"</span>&gt;</span>This is second tab<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"second"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum <span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	</div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#third"</span>&gt;</span>This is third tab<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"third"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum <span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>CSS<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">DEMO 1: Fade Block</div><div class="line">*/</div><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line">    <span class="attribute">margin-bottom</span>: <span class="number">50px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-id">#fade</span> &#123;</div><div class="line">    <span class="comment">/*opacity:1;</span></div><div class="line">    -webkit-transition: opacity 10s liner 10s;*/</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">  <span class="attribute">transition-property</span>: font-size;</div><div class="line">  <span class="attribute">transition-duration</span>: <span class="number">0.5s</span>;</div><div class="line">  <span class="attribute">transition-delay</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#fade</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">36px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/* DEMO2 */</span></div><div class="line"><span class="selector-id">#nudge</span>&#123;</div><div class="line">    </div><div class="line">    <span class="attribute">-webkit-transition-property</span>: color,</div><div class="line">        background-color,padding-left;</div><div class="line">    <span class="attribute">-webkit-transition-duration</span>: <span class="number">500ms</span>,<span class="number">500ms</span>, <span class="number">500ms</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#nudge</span><span class="selector-pseudo">:hover</span>&#123;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#efefef</span>;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</div><div class="line">    <span class="attribute">padding-left</span>: <span class="number">50px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-id">#bounce</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">    <span class="attribute">-webkit-animation-name</span>:bounce;</div><div class="line">    <span class="attribute">-webkit-animation-duration</span>:<span class="number">1s</span>;</div><div class="line">    <span class="attribute">-webkit-animation-iteration-count</span>:<span class="number">2</span>;</div><div class="line">    <span class="attribute">-webkit-animation-direction</span>:alternate</div><div class="line">&#125;</div><div class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> bounce &#123;</div><div class="line">    <span class="selector-tag">from</span>&#123;<span class="attribute">margin-left</span>:<span class="number">0</span>;&#125;</div><div class="line">    <span class="selector-tag">to</span>&#123;<span class="attribute">margin-left</span>:<span class="number">250px</span>;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-id">#spin</span>&#123;</div><div class="line">    <span class="attribute">-webkit-transition</span>: -webkit-transform <span class="number">10s</span> ease-in;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#spin</span><span class="selector-pseudo">:hover</span>&#123;</div><div class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(36000deg);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-class">.accordion</span> <span class="selector-tag">a</span>&#123;</div><div class="line">    <span class="attribute">display</span>: block;</div><div class="line">    <span class="attribute">padding</span>:<span class="number">5px</span> <span class="number">10px</span>;</div><div class="line">    <span class="attribute">background-color</span>:<span class="number">#ccc</span>;</div><div class="line">    <span class="attribute">color</span>:<span class="number">#000</span>;</div><div class="line">    </div><div class="line">    <span class="comment">/*可以去掉链接的下划线等修饰效果*/</span></div><div class="line">    <span class="attribute">text-decoration</span>:none;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"><span class="selector-class">.accordion</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</div><div class="line">    <span class="attribute">background-color</span>:<span class="number">#999</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.accordion</span> <span class="selector-tag">div</span>&#123;</div><div class="line">    <span class="attribute">background-color</span>:<span class="number">#cda</span>;</div><div class="line">    <span class="attribute">color</span>:<span class="number">#222</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.accordion</span> <span class="selector-tag">div</span> <span class="selector-tag">p</span>&#123;</div><div class="line">    <span class="attribute">padding</span>:<span class="number">20px</span></div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="selector-id">#accordion</span> <span class="selector-tag">div</span>&#123;</div><div class="line">    <span class="comment">/*先隐藏起来*/</span></div><div class="line">    <span class="attribute">height</span>:<span class="number">0</span>;</div><div class="line">    <span class="attribute">overflow</span>:hidden;</div><div class="line">    </div><div class="line">    <span class="attribute">-webkit-transition</span>:height <span class="number">600ms</span> ease;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#accordion</span> <span class="selector-tag">div</span><span class="selector-pseudo">:target</span>&#123;</div><div class="line">    <span class="attribute">height</span>:<span class="number">110px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>##animation<br>animation 属性是如下这些属性的简写<br>animation-name: none<br>animation-duration: 0s<br>animation-timing-function: ease<br>animation-delay: 0s<br>animation-iteration-count: 1<br>animation-direction: normal<br>animation-fill-mode: none</p>
<p>###用法<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">animation</span>:</div><div class="line">	<span class="selector-tag">animation-name</span></div><div class="line">    <span class="selector-tag">time</span>(<span class="selector-tag">duration</span>)</div><div class="line">    <span class="selector-tag">timing-function</span></div><div class="line">    <span class="selector-tag">time</span>(<span class="selector-tag">delay</span>)</div><div class="line">    <span class="selector-tag">animation-iteration-count</span>( 结束之前的循环次数)</div><div class="line">    <span class="selector-tag">single-animation-direction</span> </div><div class="line">    <span class="comment">/*&#123;</span></div><div class="line">    	animation-direction: normal (每次从正方向开始)</div><div class="line">		animation-direction: reverse （每次从反方向开始）</div><div class="line">		animation-direction: alternate （正反往复）</div><div class="line">    &#125;*/</div><div class="line">    <span class="selector-tag">single-animation-fill-mode</span></div></pre></td></tr></table></figure></p>
<p>###实例<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"view_port"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"polling_message"</span>&gt;</span></div><div class="line">        Listener for dispatches     </div><div class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cylon_eye"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.polling_message</span> &#123;</div><div class="line">    <span class="attribute">color</span>: white;</div><div class="line">    <span class="attribute">float</span>: left;</div><div class="line">    <span class="attribute">margin-right</span>:<span class="number">2%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.view_port</span> &#123;</div><div class="line">    <span class="attribute">background-color</span>: black;</div><div class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.cylon_eye</span> &#123;</div><div class="line">    <span class="attribute">color</span>: white;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">80%</span>;</div><div class="line">    <span class="attribute">background-color</span>: red;</div><div class="line">    </div><div class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to right, rgba(0, 0, 0, 0.9) <span class="number">25%</span>, <span class="built_in">rgba</span>(0, 0, 0, 0.1) <span class="number">50%</span>, <span class="built_in">rgba</span>(0, 0, 0, 0.9) <span class="number">75%</span>);</div><div class="line">    </div><div class="line">    <span class="attribute">-webkit-animation</span>: move_eye <span class="number">4s</span> linear <span class="number">0s</span> infinite alternate;</div><div class="line">       <span class="attribute">-moz-animation</span>: move_eye <span class="number">4s</span> linear <span class="number">0s</span> infinite alternate;</div><div class="line">         <span class="attribute">-o-animation</span>: move_eye <span class="number">4s</span> linear <span class="number">0s</span> infinite alternate;</div><div class="line">            <span class="attribute">animation</span>: move_eye <span class="number">4s</span> linear <span class="number">0s</span> infinite alternate;</div><div class="line">&#125;</div><div class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> move_eye &#123;</div><div class="line">    <span class="selector-tag">from</span> &#123;</div><div class="line">        <span class="attribute">margin-left</span>:-<span class="number">20%</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-tag">to</span> &#123;</div><div class="line">        <span class="attribute">margin-left</span>:<span class="number">100%</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@-<span class="keyword">moz</span>-<span class="keyword">keyframes</span> move_eye &#123;</div><div class="line">    <span class="selector-tag">from</span> &#123;</div><div class="line">        <span class="attribute">margin-left</span>:-<span class="number">20%</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-tag">to</span> &#123;</div><div class="line">        <span class="attribute">margin-left</span>:<span class="number">100%</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@-<span class="keyword">o</span>-<span class="keyword">keyframes</span> move_eye &#123;</div><div class="line">    <span class="selector-tag">from</span> &#123;</div><div class="line">        <span class="attribute">margin-left</span>:-<span class="number">20%</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-tag">to</span> &#123;</div><div class="line">        <span class="attribute">margin-left</span>:<span class="number">100%</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">keyframes</span> move_eye &#123;</div><div class="line">    <span class="selector-tag">from</span> &#123;</div><div class="line">        <span class="attribute">margin-left</span>:-<span class="number">20%</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-tag">to</span> &#123;</div><div class="line">        <span class="attribute">margin-left</span>:<span class="number">100%</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jquery1.11.x 集成了 AMD]]></title>
      <url>http://yardfarmer.github.io/2017/02/01/2014-06-10-jquery%20%E4%B8%8E%20AMD/</url>
      <content type="html"><![CDATA[<p>  AMD 加入到了 jQuery, jQuery 把源码切分成各个逻辑模块.</p>
<ol>
<li>ready 整合成依赖 Deferred 的模块.</li>
<li>有些模块被切分成一些更加利于维护的片段.</li>
<li>var 文件夹指定的模块只包含共享的变量声明.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"> global, factory </span>) </span>&#123;</div><div class="line">	</div><div class="line">    <span class="keyword">if</span>( <span class="keyword">typeof</span> <span class="built_in">module</span> === <span class="string">"object"</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">module</span>.exports === <span class="string">"object"</span> ) &#123;</div><div class="line">	</div><div class="line">        <span class="comment">// 对于CommonJS的和CommonJs的类似环境中, 如果存在一个适当的window,</span></div><div class="line">        <span class="comment">// 则执行global工厂方法,获取jQuery对象;</span></div><div class="line">        <span class="comment">// 在那些天生不拥有window,document的环境中,比如Node.js,</span></div><div class="line">        <span class="comment">// 弄了个jQuery做的factory伺候module.exports;</span></div><div class="line">        <span class="comment">// 这个突出了建立一个真正window的需求</span></div><div class="line">        <span class="comment">// e.g var jQuery = require("jquery")(window);</span></div><div class="line">	</div><div class="line">        <span class="built_in">module</span>.exports = global.document ? factory( global, <span class="literal">true</span>) : <span class="function"><span class="keyword">function</span>(<span class="params"> w </span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span>( !w.document )&#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">" jQuery requires a window with a document"</span> );</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> factory( w );</div><div class="line">        &#125;;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        factory( global );</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">&#125;(<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">"undefined"</span> ? <span class="built_in">window</span> : <span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> window, noGlobal </span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> jQuery = &#123;&#125;;</div><div class="line">    <span class="keyword">return</span> jQuery;</div><div class="line">&#125;));</div></pre></td></tr></table></figure></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[javascript并发模型和事件循环(Event Loop)]]></title>
      <url>http://yardfarmer.github.io/2017/02/01/2014-08-10-javascript%20%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B%E5%92%8C%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</url>
      <content type="html"><![CDATA[<p>JavaScript的”并发模型”是基于事件循环的.这个并发模型有别与Java的多线程,javascript的并发是单线程的.<br>Javascript 中有个重要一块，Event Loop，能把单线程的 JavaScript 使出 多线程的感觉。</p>
<blockquote>
<p>“Event Loop是一个程序结构，用于等待和发送消息和事件。（a programming construct that waits for and dispatches events or messages in a program.）”</p>
</blockquote>
<p>简单的说，就是在程序中（不一定是浏览器）中跑两个线程，一个负责程序本身的运行，作为主线程； 另一个负责主线程与其他线程的的通信，被称为“Event Loop 线程” 。  每当遇到异步的 setTimeOut ，setInterval 这些异步任务，交给 EventLoop 线程，然后自己往后运行，等到主线程运行完后，再去 Event Loop 线程拿结果。</p>
<p>这种模型人称 “asynchronous” 或 “non-blocking” 模行。 </p>
<p>我简单的画了一个 javascript 的执行图,我们通过图,逐步分析.<br><a href="http://www.cnblogs.com/yakun/p/3802725.html" target="_blank" rel="external">原图见我的博客</a></p>
<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>函数调用时所用的执行环境栈<br>当js方法被调用时,会进入一个执行环境(execution context),如果有另外一个方法被调用了(或者自身递归调用),会新建一个新的执行环境,并且代码的执行会进入到这个新的执行环境.函数调用返回的时候重新回到原来的执行环境. 由此,代码执行的过程便形成了一个执行环境栈,江湖人称 “stack”;</p>
<h2 id="执行环境-上下文"><a href="#执行环境-上下文" class="headerlink" title="执行环境(上下文)"></a>执行环境(上下文)</h2><p>execution context 是一个由ECMA定义的抽象的概念,所有的javascript代码都是在 execution context 执行环境中执行的.执行环境即执行上下文是一种对象，代码在执行上下文环境中执行。可以通过 this 关键字访问执行上下文，this 是对当前执行环境对象的引用。 一般情况下，</p>
<blockquote>
<p>如果代码不存在一个用户自定义的对象或函数中， 那么它将处于全局上下文环境。</p>
</blockquote>
<p>全局执行环境是最外层的一个执行环境.在Web浏览器中,全局执行环境认为是window对象.因此所有全局变量和函数都是作为window对象的属性和方法创建的.</p>
<p>全局的代码(inline中执行的代码,通常包括js文件,html页面,加载的)在全局执行环境中执行.每个方法调用都有一个与之关联的执行环境.</p>
<p>某个执行环境中的所有代码执行完毕后,该执行环境被销毁,保存在其中的所有变量和函数定义也随之销毁. 全局执行环境直到页面关闭时才被销毁.</p>
<p>每个函数都有自己的执行环境,当执行流进入一个函数时,Javascript 创建一个新的执行上下文，并进入该函的执行上下文。函数的执行环境就会被推入环境栈中. 而在函数执行之后,栈将其环境栈弹出,把控制权返回给之前的执行环境.Javascript 中的执行流正是由这个方便的机制的控制着.</p>
<p>当代码在一个执行环境中执行时,会创建变量对象的一个作用域链(scope chain).<br>作用域链的用途,确保当前执行环境能有序(不明白就接着看)的访问所能获取的变量和函数.</p>
<p>作用域链的前端,始终都是当前执行的代码所在的执行环境的变量对象.</p>
<p>即当前作用域没有,外层作用域兜着.</p>
<p>执行环境被创建时会有次序的进行一些工作.</p>
<ol>
<li><p>首先,在方法的执行环境中,Activation 活动对象被创建.活动对象另有一套实现机制.可以认为是对象,但又很特殊,没有prototype,不能在代码中直接引用到.</p>
</li>
<li><p>下一步,在方法调用创建执行环境的时候,会创建 argument 对象(类数组对象,含有传进来的参数,length,callee),活动对象中会有一个”argument”同名属性来引用这个argument对象.</p>
</li>
<li><p>再下一步,执行环境会被指定一个作用域.作用域由承载对象的列表(或链)组成.当代码在一个执行环境中执行,会创建变量对象的一个作用域链(scope chain).作用域链的前端,始终都是当前执行的代码所在执行环境的变量对象(和上面提到的 Activation 活动对象是一个对象). 如果这个环境是函数(javascript 环境只有函数和全局环境这两种), 则将其活动对象作为变量对象使用,活动对象在最开始时只包含一个arguments对象.</p>
</li>
</ol>
<p>作用域链中下一个变量对象来自当前代码的外层环境.以此类推,直到到达最外层的全局执行环境,这样便构成了一条从底到上的作用域链.全局执行环境的变量对象始终都是作用域链的最后一个对象.<br>标示符解析是沿着作用域链一级一级的搜索标示符的过程.搜索过程始终都是从作用域链的最前端开始,然后主逐级向后回溯. </p>
<h4 id="当进入执行环境"><a href="#当进入执行环境" class="headerlink" title="当进入执行环境"></a>当进入执行环境</h4><p>当进入执行环境(代码即将但仍未执行时),变量对象也就是活动对象已经包含了以下这些属性:</p>
<ol>
<li>函数的所有形参,由名称和对应值组成变量对象的属性.</li>
<li>执行环境所在函数内部的所有子函数声明,由名称和对应值(函数对象 function object)组成变量对象的属性.如果变量对象内已存在同名属性,那么会被替换所有的变量声明.</li>
<li>由名称和对应值(undefined)组成变量对象的属性,如果变量名称跟已经声明的形式参数或函数相同，则变量声明不会干扰已经存在的这类属性.</li>
</ol>
<p>需要说明的是,每个执行环境都有this,this的值取决于调用者和所执行代码的类型,this值是在进入执行环境时就已经确定的. 取值与执行环境相关联,并且在执行环境运行期间是不能被修改的.</p>
<blockquote>
<p>this 执行上下文中的一个属性. </p>
</blockquote>
<p> 在全局代码中,this始终是全局对象本身.</p>
<p>在通常的函数调用中,this是由函数的调用者提供的,即被调用函数的父执行环境提供的.this值取决于函数调用的方式.</p>
<h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>堆是一个对象互联的网络。用数学术语说就是“图”。图由节点及其之间的边构成。节点和边都是可被标记的：节点（对象）用对象构造器的名称标记，边则由属性名称标记。<br>从一个对象到另一个的边序列被叫做路径（path）。通常我们只对那些不重复经过同一节点两次的简单路径（simple path）感兴趣。<br>我们把垃圾收集器根节点到某个指定对象的路径叫做retaining path。如果不存在这样的路径，则该对象被称作无法达到的（unreachable），应在垃圾收集过程中被处置。</p>
<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>在web浏览器中,当事件发生时如果该事件有相应的监听器,则该消息会被及时的加进消息队列,如果没有监听器,该事件会被丢失.<br>javascript运行时伴随一个待处理的消息(也就是任务)队列,每个消息都关联了相关的处理函数,当函数的执行栈为空时,即当前没有正在执行的函数,那么,队列会从中挑出一个去处理.处理过程包括调用相关的函数(不用担心处理函数的作用域问题,因为在javascript中,作用域是词法化作用域,是方法在定义的时候已经确定的,与调用无关.作用域链创建早于方法调用,得益于此,我们方能使用闭包),处理完成后,如果栈为空,则再次尝试从队列中挑选可处理的事件或任务. 从中可以很容易窥探到 setInterval,setTimeout 是怎么进行异步执行的了.<br>这,就是事件循环,event loop.</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过上面的分析,javascript是不存在并发的,单线程何谈并发? 这只是说说了<em>非阻塞</em>.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[javascript启示录书摘]]></title>
      <url>http://yardfarmer.github.io/2017/02/01/2014-08-10-javascript%E5%90%AF%E7%A4%BA%E5%BD%95%E4%B9%A6%E6%91%98/</url>
      <content type="html"><![CDATA[<h2 id="JavaScript-对象"><a href="#JavaScript-对象" class="headerlink" title="JavaScript 对象"></a>JavaScript 对象</h2><h3 id="JavaScript-构造函数"><a href="#JavaScript-构造函数" class="headerlink" title="JavaScript 构造函数"></a>JavaScript 构造函数</h3><p>如果使用 new 调用某函数，该函数则担任一个特殊的角色，将函数的 this 值设置为正在构建的新对象。并且构造函数还默认返回这个新构建的对象（即 this）。这个返回的新对象认为是构建该对象的构造函数的实例。</p>
<h3 id="typeof-操作符"><a href="#typeof-操作符" class="headerlink" title="typeof 操作符"></a>typeof 操作符</h3><p>typeof 操作符用于返回正在使用值的类型。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myNull = <span class="literal">null</span>;         <span class="comment">// typeof myNull : object</span></div><div class="line"><span class="keyword">var</span> myUndefined = <span class="literal">null</span>;    <span class="comment">// undefined</span></div><div class="line"><span class="keyword">var</span> str = <span class="string">'str'</span>;           <span class="comment">// string</span></div><div class="line"><span class="keyword">var</span> str = <span class="built_in">String</span>(<span class="string">'str'</span>);   <span class="comment">// string, 没有 new，不会返回对象</span></div><div class="line"><span class="keyword">var</span> num = <span class="number">1</span>;               <span class="comment">// number</span></div><div class="line"><span class="keyword">var</span> num = <span class="built_in">Number</span>(<span class="string">'1'</span>);     <span class="comment">// number</span></div><div class="line"><span class="keyword">var</span> bol = <span class="literal">true</span>;            <span class="comment">// boolean</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> num = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="string">'1'</span>); <span class="comment">// object, new</span></div><div class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'a'</span>); <span class="comment">// object, new</span></div></pre></td></tr></table></figure></p>
<h3 id="contructor属性"><a href="#contructor属性" class="headerlink" title="contructor属性"></a>contructor属性</h3><p>碰到用 new 操作符实例化出来的对象，typeof 就无能为力了。这时，可以用 constructor 属性。</p>
<table>
<thead>
<tr>
<th>obj</th>
<th>obj.constructor</th>
</tr>
</thead>
<tbody>
<tr>
<td>obj = new Number(‘21’);</td>
<td>Number</td>
</tr>
<tr>
<td>obj = 1;</td>
<td>Number</td>
</tr>
<tr>
<td>obj = new String(‘abc’);</td>
<td>String</td>
</tr>
<tr>
<td>obj = ‘abc’</td>
<td>String</td>
</tr>
<tr>
<td>obj = true;</td>
<td>Boolean</td>
</tr>
<tr>
<td>obj = new Object();</td>
<td>Object</td>
</tr>
<tr>
<td>obj = {};</td>
<td>Object</td>
</tr>
<tr>
<td>obj = new Array();</td>
<td>Array</td>
</tr>
<tr>
<td>obj = new Function();</td>
<td>Function</td>
</tr>
<tr>
<td>obj = function(){ }; //字面量方式</td>
<td>Function</td>
</tr>
</tbody>
</table>
<h3 id="instanceof-操作符"><a href="#instanceof-操作符" class="headerlink" title="instanceof 操作符"></a>instanceof 操作符</h3><p>instanceof 操作符可以验证指定对象是否是某个构造函数的实例。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">instanceObj <span class="keyword">instanceof</span> ConstructorFunction</div></pre></td></tr></table></figure></p>
<p>任何对象 instanceof Object 总是返回 true。</p>
<p><code>instanceof 只适用于 new 构造函数创建返回的复杂对象和实例</code></p>
<h2 id="对象与属性"><a href="#对象与属性" class="headerlink" title="对象与属性"></a>对象与属性</h2><h3 id="删除对象属性"><a href="#删除对象属性" class="headerlink" title="删除对象属性"></a>删除对象属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = &#123; <span class="attr">bar</span>: <span class="string">'bar'</span> &#125;;</div><div class="line"><span class="keyword">delete</span> foo.bar;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'bar'</span> <span class="keyword">in</span> foo); <span class="comment">// false,in 操作符不仅不仅能检查对象自身的属性而且能检查通过原型链继承过来的属性</span></div></pre></td></tr></table></figure>
<p>##head 对象</p>
<h3 id="什么是-head-对象"><a href="#什么是-head-对象" class="headerlink" title="什么是 head 对象"></a>什么是 head 对象</h3><p>JavaScript 代码本身必须包含在对象内部。比如，在 Web 浏览器环境中编写 JavaScript 代码时，JavaScript 被包含在 window 对象内，并在其内部执行。这个 window 对象被认为实 “head” 对象。</p>
<p>head 对象是由 JavaScript 在幕后创建，用于封装用户自定义代码，并容纳 JavaScript 预定义的原生代码。在编写 Javascript 代码时，它将被编写在 head 对象的上下文中。</p>
<h3 id="head-对象内的全局函数"><a href="#head-对象内的全局函数" class="headerlink" title="head 对象内的全局函数"></a>head 对象内的全局函数</h3><ul>
<li>decodeURL()</li>
<li>decodeURLComponent()</li>
<li>encodeURI()</li>
<li>encodeURIComponent()</li>
<li>eval()</li>
<li>isFinite()</li>
<li>isNaN()</li>
<li>parseFloat()</li>
<li>parseInt()</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mac os 改键]]></title>
      <url>http://yardfarmer.github.io/2017/02/01/2014-08-07-%E6%94%B9%E9%94%AE/</url>
      <content type="html"><![CDATA[<p>最近着迷于vim,<code>Vim使用技巧</code>推荐重新映射大小写转换键</p>
<blockquote>
<p>在现代键盘上，<code>&lt;Esc&gt;</code>可以省很多力气，尤其是Vim对<code>&lt;Esc&gt;</code>键用的这么频繁。不过最好好把大小写转换键映射为<code>&lt;Ctrl&gt;</code>键。<code>&lt;C-[&gt;</code> 的功能和 <esc> 键相同，如果 <code>&lt;Ctrl&gt;</code> 键触手可及，那么这一组合键用起来也会很容易。</esc></p>
</blockquote>
<p>我用的改建软件是 karabiner 和 seil。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[正则在手,天下我有]]></title>
      <url>http://yardfarmer.github.io/2017/02/01/2014-06-17-%E6%AD%A3%E5%88%99%E5%9C%A8%E6%89%8B,%E5%A4%A9%E4%B8%8B%E6%88%91%E6%9C%89/</url>
      <content type="html"><![CDATA[<h4 id="jQuery-是个啥-jQuery是个javascript的封装库-jQuery-靠啥牛逼-靠正则"><a href="#jQuery-是个啥-jQuery是个javascript的封装库-jQuery-靠啥牛逼-靠正则" class="headerlink" title="jQuery 是个啥? jQuery是个javascript的封装库. jQuery 靠啥牛逼? 靠正则."></a>jQuery 是个啥? jQuery是个javascript的封装库. jQuery 靠啥牛逼? 靠正则.</h4><p>// 说明 这些正则里充斥了大量 (?:) 这货,<br>// 简单费磨叽句话: ()代表分组,就是多字符匹配,团结的像一个似的.<br>// 分组还有个作用:捕获. 就是说()匹配的内容, 会给个号码然后将其缓存起来, 后面的表达式语句能使用号码引用匹配到的文本(见号如见匹配文本)<br>// 像oracle里的 with</p>
<p>// 再说点题外话:关于行结束符<br>// mac:    r     回车<br>// unix:   n     换行<br>// window: rn   回车换行<br>// 换行符起源于机械打字机,当打字机的笔尖走到行末时,有两个动作,<br>// 回车,return到行首,接着n,换到下一行</p>
<p>// 三分组,外层为第一层分组, 因采用(?:) 匹配但不捕获,没有分组好, 所有最终拿到手的只有两组分组.<br>// 最外层分组匹配的是选择器selector,可为html标签,或id选择器.<br>// 分组1匹配标签名,标签内的字符串,不带左右尖括号.<br>// 分组2匹配id选择器名,不带#号.</p>
<p>var quickExpr = /^(?:<a href="#">^#\&lt;</a><em>(\&lt;<a href="#">wW</a>+>)<a href="#">^></a></em>$|#(<a href="#">w-</a>*)$)/ </p>
<p>// 匹配任意非空字符,空格,tab,回车等统统不匹配<br>var rnotwhite = /S/</p>
<p>// Used for trimming whitespace<br>// 匹配以空白符开始的行<br>var trimLeft = /^s+/<br>// 匹配以空白符结尾的行,阿里的笔试题就有这个<br>var trimRight = /s+$/</p>
<p>// Match a standalone tag<br>// w 匹配数字字母下划线<br>// 第二个分组匹配不捕获(它调用了第一组的捕获内容)没了分组号,最终只剩第一个分组号,用于匹配标签名<br>// 这货匹配一组单独标签,闭合单标签或闭合双标签<br>var rsingleTag = /^\&lt;(w+)s*/?>(?:\)?$/</p>
<p>// JSON RegExp</p>
<p>// 匹配任意多个  ],:和空格,干啥使得后面再说<br>var rvalidchars = /^<a href="#">],:s</a>*$/</p>
<p>//<br>var rvalidescape = /\(?:<a href="#">“\/bfnrt</a>|u<a href="#">0-9a-fA-F</a>4)/g</p>
<p>// 匹配JSON合理的取值<br>// “<a href="#">^”\nr</a><em>“ 匹配被双引号包着的字符 双引号抱着的内容不能有(双引号,换行符,回车符,转义符)<br>// 也匹配为 true或false或null的值<br>// -?d+(?:.d</em>)?(?:<a href="#">eE</a><a href="#">+-</a>?d+)<br>// 可匹配负值,可匹配带小数的,还匹配科学计数法<br>// 强大!<br>var rvalidtokens = /“<a href="#">^”\nr</a><em>“|true|false|null|-?d+(?:.d</em>)?(?:<a href="#">eE</a><a href="#">+-</a>?d+)?/g</p>
<p>// 匹配  [  或 , [ 或 :<a href="#"> </a><br>// (?:^|:|,) 这货差点让我看走眼 匹配三个 空或:或,<br>// ^ 匹配字符串的开始,紧接着就是或,所以它匹配空<br>// 这个表达式看起来像 json的左括号<br>var rvalidbraces = /(?:^|:|,)(?:s*[)+/g</p>
<p>// Useragent RegExp<br>// UserAgent 就是浏览器的洋名</p>
<p>// webkit/ab.c<br>var rwebkit = /(webkit)<a href="#"> /</a>(<a href="#">w.</a>+)/</p>
<p>var ropera = /(opera)(?:.*version)?<a href="#"> /</a>(<a href="#">w.</a>+)/,</p>
<p>var rmsie = /(msie) (<a href="#">w.</a>+)/,</p>
<p>// “Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:29.0) Gecko/20100101 Firefox/29.0”<br>var rmozilla = /(mozilla)(?:.*? rv:(<a href="#">w.</a>+))?/,</p>
<p>// Matches dashed string for camelizing<br>var rdashAlpha = /-(<a href="#">a-z</a>|<a href="#">0-9</a>)/ig</p>
<p>// 微软前缀<br>var rmsPrefix = /^-ms-/,</p>
<p>// 匹配大括号和中括号,中间内容不限<br>var rbrace = /^(?:{.<em>}|[.</em>])$/</p>
<p>var rmultiDash = /(<a href="#">A-Z</a>)/g</p>
<p>// 匹配换行,回车,制表符<br>var rclass = /<a href="#">ntr</a>/g</p>
<p>// 匹配空格<br>var rspace = /s+/</p>
<p>//匹配回车<br>var rreturn = /r/g,</p>
<p>var rtype = /^(?:button|input)$/i,</p>
<p>// 能被focus的, 即按tab可focus的,涨姿势了<br>var rfocusable = /^(?:button|input|object|select|textarea)$/i,</p>
<p>var rclickable = /^a(?:rea)?$/i,</p>
<p>// 取值为布尔值的<br>var rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,</p>
<p>// form元素<br>var rformElems = /^(?:textarea|input|select)$/i,</p>
<p>var rtypenamespace = /^(<a href="#">^.</a>*)?(?:.(.+))?$/</p>
<p>var rhoverHack = /bhover(.S+)?b/,</p>
<p>var rkeyEvent = /^key/,</p>
<p>// 点击事件 mouse或contextmenu再无前缀,click可有<br>var rmouseEvent = /^(?:mouse|contextmenu)|click/</p>
<p>var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,</p>
<p>var rquickIs = /^(w*)(?:#(<a href="#">w-</a>+))?(?:.(<a href="#">w-</a>+))?$/,</p>
<p>// 这里是sezzle中的核心,待续<br>// 大块儿头<br>var chunker = /((?:((?:(<a href="#">^()</a>+)|<a href="#">^()</a>+)+)|<a href="#">(?:[[^[]</a><em>]|<a href="#">‘“</a><a href="#">^’”</a></em><a href="#">‘“</a>|<a href="#">^[]’”</a>+)+]|\.|[^ >+,([\](#)+)+|<a href="#">>+</a>)(s<em>,s</em>)?((?:.|r|n)*)/g,</p>
<p>ID: /#((?:<a href="#">wu00c0-uFFFF-</a>|\.)+)/,</p>
<p>CLASS: /.((?:<a href="#">wu00c0-uFFFF-</a>|\.)+)/,<br>NAME: /[name=<a href="#">‘“</a><em>((?:<a href="#">wu00c0-uFFFF-</a>|\.)+)<a href="#">‘“</a></em>]/,<br>ATTR: /[s<em>((?:<a href="#">wu00c0-uFFFF-</a>|\.)+)s</em>(?:(S?=)s<em>(?:(<a href="#">‘“</a>)(.</em>?)3|(#?(?:<a href="#">wu00c0-uFFFF-</a>|\.)<em>)|)|)s</em>]/,<br>TAG: /^((?:<a href="#">wu00c0-uFFFF*-</a>|\.)+)/,<br>CHILD: /:(only|nth|last|first)-child(?:(s<em>(even|odd|(?:<a href="#">+-</a>?d+|(?:<a href="#">+-</a>?d</em>)?ns<em>(?:<a href="#">+-</a>s</em>d+)?))s<em>))?/,<br>POS: /:(nth|eq|gt|lt|first|last|even|odd)(?:((d</em>)))?(?=<a href="#">^-</a>|$)/,<br>PSEUDO: /:((?:<a href="#">wu00c0-uFFFF-</a>|\.)+)(?:((<a href="#">‘“</a>?)((?:(<a href="#">^)</a>+)|<a href="#">^()</a>*)+)2))?/</p>
<p>var runtil = /Until$/</p>
<p>var rparentsprev = /^(?:parents|prevUntil|prevAll)/,</p>
<p>// Note: This RegExp should be improved, or likely pulled from Sizzle<br>var rmultiselector = /,/</p>
<p>var isSimple = /^.[^:#<a href="#">.,</a>*$/,</p>
<p>// h5标签全家福<br>var nodeNames = “abbr|article|aside|audio|canvas|datalist|details|figcaption|figure|footer|” +<br>“header|hgroup|mark|meter|nav|output|progress|section|summary|time|video”;     </p>
<p>// 匹配jQuery的”uuid”<br>var rinlinejQuery = / jQueryd+=”(?:d+|null)”/g</p>
<p>var rleadingWhitespace = /^s+/</p>
<p>// good: (?!exp)    匹配后面跟的不是exp的位置<br>var rxhtmlTag = /\&lt;(?!area|br|col|embed|hr|img|input|link|meta|param)((<a href="#">w:</a>+)<a href="#">^></a>*)/>/ig</p>
<p>var rtagName = /\&lt;(<a href="#">w:</a>+)/<br>var rtbody = /\&lt;tbody/i<br>var rhtml = /\&lt;|&amp;#?w+;/ // \&lt; 或者 &nbsp; &#xxx;<br>var rnoInnerhtml = /\&lt;(?:script|style)/i</p>
<p>// html代码中不能含有这些标签,加入dom缓存<br>var rnocache = /\&lt;(?:script|object|embed|option|style)/i,       </p>
<p>// checked=”checked” or checked<br>var rchecked = /checkeds<em>(?:<a href="#">^=</a>|=s</em>.checked.)/i</p>
<p>var rscriptType = //(java|ecma)script/i<br>var rcleanScript = /^s*\&lt;!(?:[CDATA[|–)/</p>
<p>var var ralpha = /alpha(<a href="#">^)</a><em>)/i<br>var ropacity = /opacity=(<a href="#">^)</a></em>)/</p>
<p>// fixed for IE9, see #8346<br>var rupper = /(<a href="#">A-Z</a>|^ms)/g<br>var rnumpx = /^-?d+(?:px)?$/i</p>
<p>var rnum = /^-?d/,<br>var rrelNum = /^(<a href="#">-+</a>)=(<a href="#">-+.de</a>+)/,</p>
<p>// 编码后的空格<br>var r20 = /%20/g,<br>var rbracket = /[]$/,</p>
<p>// 表示 r,n 或 rn<br>var rCRLF = /r?n/g,</p>
<p>var rhash = /#.*$/,</p>
<p>// IE leaves an r character at EOL<br>var rheaders = /^(.<em>?):<a href="#"> t</a></em>(<a href="#">^rn</a>*)r?$/mg, </p>
<p>// 可输入的标签<br>var rinput = /^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i</p>
<p>// #7653, #8125, #8152: local protocol detection<br>// 访问本地资源时,浏览器地址栏可使用的schema<br>var rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/</p>
<p>var rnoContent = /^(?:GET|HEAD)$/</p>
<p>//匹配 //<br>var rprotocol = /^///<br>var rquery = /?/</p>
<p>// b代表单词的开头或结尾,也就是单词的分界处<br>var rscript = /\<scriptb[^\<](#)*(?:(?!\< script\="">)\&lt;<a href="#">^\&lt;</a><em>)</em>\/gi</scriptb[^\<](#)*(?:(?!\<></p>
<p>var rselectTextarea = /^(?:select|textarea)/i<br>var rspacesAjax = /s+/<br>var rts = /(<a href="#">?&amp;</a>)_=<a href="#">^&amp;</a><em>/<br>var rurl = /^(<a href="#">w+.-</a>+:)(?://(<a href="#">^/?#:</a></em>)(?(d+))?)?/</p>
<p>var rfxtypes = /^(?:toggle|show|hide)$/<br>var rfxnum = /^(<a href="#">+-</a>=)?(<a href="#">d+.-</a>+)(<a href="#">a-z%</a>*)$/i</p>
<p>var rtable = /^t(?:able|d|h)$/i<br>var rroot = /^(?:body|html)$/i;</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[正则,捕获]]></title>
      <url>http://yardfarmer.github.io/2017/02/01/2014-07-19-%E6%AD%A3%E5%88%99%E6%8D%95%E8%8E%B7/</url>
      <content type="html"><![CDATA[<p>读jQuery源码，其中不可避免的要弄明白正则表达式，在此对非捕获组(non-capturing)进行了一些梳理。</p>
<h3 id="关于捕获的一些主要用法"><a href="#关于捕获的一些主要用法" class="headerlink" title="关于捕获的一些主要用法"></a>关于捕获的一些主要用法</h3><ol>
<li>(?:X)</li>
<li>(?=X)</li>
<li>(?\&lt;=X)</li>
<li>(?!X)</li>
<li>(?\&lt;!X)<h3 id="捕获"><a href="#捕获" class="headerlink" title="捕获"></a>捕获</h3>要书明白捕获，就要先从分组开始。重复单字符我们可以使用限定符，如果重复字符串，用什么呢？ 对！用小括号，小括号里包裹指定字表达式（子串），这就是分组。之后就可以限定这个子表示的重复次数了。<br>那么，什么是捕获呢？使用小括号指定一个子表达式后，匹配这个子表达式的文本（即匹配的内容）可以在表达式或者其他过程中接着用，怎么用呢？至少应该有个指针啥的引用它吧？ 对！默认情况下，每个分组（小括号）会自动<br>拥有一个组号,从左到右，以分组的左括号为标志，第一个出现的分组组号为1，后续递增。如果出现嵌套，<br>例如：<br>“aabcd”<br>采用正则<code>(a(b))(c)</code> match 结果入下：   </li>
</ol>
<table><br>  <tr><br>    <th>分组</th><br>    <th>捕获</th><br>  </tr><br>  <tr><br>    <td> $1(group1) </td><br>    <td> ab </td><br>  </tr><br>  <tr><br>    <td> $2(group2) </td><br>    <td> b </td><br>  </tr><br>  <tr><br>    <td> $3(group3) </td><br>    <td> c </td><br>  </tr><br></table>


<p>继续涨姿势。</p>
<p>一、(?:)非捕获组走起。<br>由下面一个例子引发对非捕获组的学习。</p>
<p>有两个金额：6000￥ 和 1000$。<br>需求是得到金额和货币种类。<br>『废话少说，多用正则』：<br>(\d+)+([$￥])<br>输出结果为：<br><img src="%5Burl=https:/www.evernote.com/shard/s79/sh/4b10215c-80d9-4ff1-a543-ea2ad9f0576a/b8e4a1ea9702039f5542a0face50b7dc%5D%5Bimg%5Dhttps:/www.evernote.com/shard/s79/sh/4b10215c-80d9-4ff1-a543-ea2ad9f0576a/b8e4a1ea9702039f5542a0face50b7dc/deep/0/Untitled-RegExRX-3.png%5B/img%5D%5B/url%5D%5Burl=https:/www.evernote.com/shard/s79/sh/4b10215c-80d9-4ff1-a543-ea2ad9f0576a/b8e4a1ea9702039f5542a0face50b7dc%5DClick%20for%20large%20view%5B/url%5D%20-%20%5Bcolor=" alt=""></p>
<p>OK,满足了要求。这里的正则分成了两个组，一个是(d+)，一个是(￥$)，前一个组($1)匹配金额，后一个组($2)匹配货币种类。</p>
<p>现在，<em>需求变了</em>!! 我需要这个正则同时可以匹配浮点数小数点前面的整数。如10010.86￥，提炼出 10010 和 ￥。<br>那么正则如下：<br>    (\d+)(.?)(\d)([$￥])<br>这里用括号分了四组，所以要输出金额的整数部分和种类，要分别输了$1,$4了。如果输出部分和正则是分开的，我希望只修改正则而不去修改输出部分的代码，也就是还是用$1，$2作为输出。由此可以引出<em>非捕获组</em>(?:)。<br>把前面的正则修改为：<br>    (\d+)(?:.?)(?:\d+)([￥$])$<br>这样，还是用$1,$2做为输出，同样输出了 10010 和 ￥<br>这个正则的中间两个组用到的就是非捕获组（?:），它可以理解为只分组而不捕获。</p>
<p>二、(?=)和(?\&lt;=) 前后查找<br>有的资料把它们叫做肯定式向前查找和肯定式向后查找；<br>有的资料也叫做肯定顺序环视和肯定逆序环视。</p>
<p>1、直接看下面的例子：<br>    [0-9a-z]{2}(?=aa)<br>    var str = “12332aa438aaf”; </p>
<p></p><p>Match List:</p><p></p>
<table><br>    <tr><br>    <td>1</td><br>    <td>32</td><br>  </tr><br>  <tr><br>    <td>2</td><br>    <td>38</td><br>  </tr><br></table>

<p>这个正则的意思是：匹配这么一个字符串，它要满足：是两位字符（数字，或字母），且后面紧跟着两个a。<br>分析一下：<br>32aa  这个子串满足这个条件，所以可以匹配到，又因为 (?=) 的部分是不捕获的，所以输出的只是 32，不包括aa。同理 38aa 也匹配这个正则，而输出仅是 38。</p>
<p>再深入看一下:<br>当str第一次匹配成功输出 32 后，程序要继续向后查找是否还有匹配的其它子串。那么这时应该从 32aa 的后一位开始向后查找，还是从 32 的后一位呢？也就是从索引 5 开始还是从 7 开始呢？有人可能想到是从 32aa 的下一位开始往后找，因为 32aa 匹配了正则，所以下一位当然是它的后面也就是从 4 开始。但实际上是从 32 的后一位也就是第一个 a 开始往后找。原因还是 (?=) 是非捕获的。<br>查阅API文档是这么注释的：</p>
<blockquote>
<p>(?=X) X, via zero-width positive lookahead</p>
</blockquote>
<p>可见zero-width（零宽度）说的就是这个意思。</p>
<p>现在，把字符串写的更有意思些：str = “aaaaaaaa”;<br>看一下它的输出： aa aa aa<br>分析一下：<br>这个字符串一共有8个a。<br>第一次匹配比较容易找到，那就是前四个：aaaa ,当然第三和第四个 a 是不捕获的，所以输出是第一和第二个a；<br>接着继续查找，这时是从第三个a开始，三到六，这4个a区配到了，所以输出第三和第四个a；<br>接着继续查找，这时是从第五个a开始，五到八，这4个a区配到了，所以输出第五和第六个a；<br>接着往后查找，这时是从第七个a开始，显然，第七和第八个a,不满足正则的匹配条件，查找结束。<br>我们再延伸一下，刚说的情况的是(?=)放在捕获的字符串后面，它如果放在前面又是什么结果呢？<br>例子换成：</p>
<pre><code>(?=hopeful)hope  
</code></pre><p>它的输出是hope。<br>正则的意思是：是否能匹配hopeful,如果能，则捕获hopeful中的hope。当然继续向后查找匹配的子串，是从f开始。<br>比较一下可以看出，(?=hopeful)hope 和 hope(?=ful),两个正则的效果其实是一样的。</p>
<p>2、下面说一下 (?\&lt;=)<br>把正则改一下，<br>    (?&lt;=aa)[0-9a-z]{2};<br>字符串还是str = “12332aa438aaf”;<br>它的输出：43。<br>这个正则的意思是：匹配这么一个字符串，它要满足：是两位字符（数字或字母），且前面紧跟的是两个字母 a。</p>
<p>同样，深入一下，把str换成str = “aaaaaaaa”;看一下输出是什么，同样也是：aa aa aa<br>分析一下：<br>第一次匹配不用说，是前四个a，输出的是第三和第四个a;<br>继续向后查找，从第五个a开始，程序发现，第五个和第六个a满足，因为是两位字符，且满足前面紧跟着两个a(第三和第四个a)。所以匹配成功，输出第五个和第六个a;<br>继续向后查找，从第七个a开始，程序发现，第七个和第八个a满足，因为是两位字符，且满足前面紧跟着两个a(第五和第六个a)。所以匹配成功，输出第七和第八个a。查找结束。</p>
<p>三、(?!)和(?\&lt;!) 逆袭!<br>从外观上看，和前面一组很相似，区别就是把 ‘=’ 换成了 ‘!’<br>那么意义刚好也是相反的。<br><code>[0-9a-z]{2}(?!aa)</code>意思是：匹配两个字符，且后面紧跟着的不是aa<br><code>(?&lt;!aa)[0-9a-z]{2}</code>意思是：匹配两个字符，且前面紧跟着的不是aa<br>用法和前面讲的差不多，这里不再详述。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello 2017]]></title>
      <url>http://yardfarmer.github.io/2017/01/03/%E6%96%B0%E7%9A%84%E4%B8%80%E5%B9%B4-2017/</url>
      <content type="html"><![CDATA[<h1 id="hello-2017"><a href="#hello-2017" class="headerlink" title="hello, 2017"></a>hello, 2017</h1><h2 id="关于-hexo-filter-fenced-code-使用"><a href="#关于-hexo-filter-fenced-code-使用" class="headerlink" title="关于 hexo-filter-fenced-code 使用"></a>关于 <code>hexo-filter-fenced-code</code> 使用</h2><ul>
<li>5个 “`” 执行不显示</li>
<li>4个 “`” 显示并执行</li>
</ul>
<h3 id="ok-用起来还不错"><a href="#ok-用起来还不错" class="headerlink" title="ok 用起来还不错"></a>ok 用起来还不错</h3><div class="hexo-insert-code">  <div id="colorbox"></div>
  <button id="demo-button">Click Me</button></div>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'demo-button'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> randomColor = <span class="string">'#'</span> + <span class="built_in">Math</span>.random().toString().substr(<span class="number">2</span>,<span class="number">6</span>);</div><div class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'colorbox'</span>).innerHTML = randomColor;</div><div class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'colorbox'</span>).style.background = randomColor;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<script>  document.getElementById('demo-button').onclick = function() {
    var randomColor = '#' + Math.random().toString().substr(2,6);
    document.getElementById('colorbox').innerHTML = randomColor;
    document.getElementById('colorbox').style.background = randomColor;
  }</script>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#colorbox</span> &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">line-height</span>: <span class="number">150px</span>;</div><div class="line">  <span class="attribute">text-align</span>: center;</div><div class="line">  <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">&#125;</div><div class="line">  <span class="selector-id">#demo-button</span> &#123;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<style type="text/css">  #colorbox {
    border: 1px solid #ddd;
    height: 150px;
    width: 200px;
    line-height: 150px;
    text-align: center;
    margin-bottom: 20px;
    color: #fff;
  }
    #demo-button {
    padding: 5px 10px;
  }</style>
<h2 id="来张张图片"><a href="#来张张图片" class="headerlink" title="来张张图片"></a>来张张图片</h2><p><img src="http://7i7gr4.com1.z0.glb.clouddn.com/2017-01-03-屏幕快照 2017-01-03 15.47.54 -2-.png" alt="屏幕快照 2017-01-03 15.47.54 -2-"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[软件设计原则]]></title>
      <url>http://yardfarmer.github.io/2015/10/23/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</url>
      <content type="html"><![CDATA[<p>##一. 六大设计原则</p>
<p>###1. 单一职责原则（Single Responsibility Principle - SRP）</p>
<p>原文：</p>
<blockquote>
<p>There should never be more than one reason for a class to change.</p>
</blockquote>
<p>译文：</p>
<p>永远不应该有多于一个原因来改变某个类。</p>
<p>理解：</p>
<p>对于一个类而言，应该仅有一个引起它变化的原因。说白了就是，不同的类具备不同的职责，各施其责。这就好比一个团队，大家分工协作，互不影响，各做各的事情。</p>
<p>应用：</p>
<p>当我们做系统设计时，如果发现有一个类拥有了两种的职责，那就问自己一个问题：可以将这个类分成两个类吗？如果真的有必要，那就分吧。千万不要让一个类干的事情太多！</p>
<p>###2. 开放封闭原则（Open Closed Principle - OCP）</p>
<p>原文：</p>
<blockquote>
<p>Software entities like classes, modules and functions should be open for extension but closed for modifications.</p>
</blockquote>
<p>译文：</p>
<p>软件实体，如：类、模块与函数，对于扩展应该是开放的，但对于修改应该是封闭的。</p>
<p>理解：</p>
<p>简言之，对扩展开放，对修改封闭。换句话说，可以去扩展类，但不要去修改类。</p>
<p>应用：</p>
<p>当需求有改动，要修改代码了，此时您要做的是，尽量用继承或组合的方式来扩展类的功能，而不是直接修改类的代码。当然，如果能够确保对整体架构不会产生任何影响，那么也没必要搞得那么复杂了，直接改这个类吧。</p>
<p>###3. 里氏替换原则（Liskov Substitution Principle - LSP）</p>
<p>原文：</p>
<blockquote>
<p>Functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it.</p>
</blockquote>
<p>译文：</p>
<p>使用基类的指针或引用的函数，必须是在不知情的情况下，能够使用派生类的对象。</p>
<p>理解：</p>
<p>父类能够替换子类，但子类不一定能替换父类。也就是说，在代码中可以将父类全部替换为子类，程序不会报错，也不会在运行时出现任何异常，但反过来却不一定成立。</p>
<p>应用：</p>
<p>在继承类时，务必重写（Override）父类中所有的方法，尤其需要注意父类的 protected 方法（它们往往是让您重写的），子类尽量不要暴露自己的 public 方法供外界调用。</p>
<p>###4. 最少知识原则（Least Knowledge Principle - LKP）</p>
<p>原文：</p>
<blockquote>
<p>Only talk to you immediate friends.</p>
</blockquote>
<p>译文：</p>
<p>只与你最直接的朋友交流。</p>
<p>理解：</p>
<p>尽量减少对象之间的交互，从而减小类之间的耦合。简言之，一定要做到：低耦合，高内聚。</p>
<p>应用：</p>
<p>在做系统设计时，不要让一个类依赖于太多的其他类，需尽量减小依赖关系，否则，您死都不知道自己怎么死的。</p>
<p>该原则也称为“迪米特法则（Law of Demeter）”，由 Ian Holland 提出。</p>
<p>###5. 接口隔离原则（Interface Segregation Principle - ISP）</p>
<p>原文：</p>
<blockquote>
<p>The dependency of one class to another one should depend on the smallest possible interface.</p>
</blockquote>
<p>译文：</p>
<p>一个类与另一个类之间的依赖性，应该依赖于尽可能小的接口。</p>
<p>理解：</p>
<p>不要对外暴露没有实际意义的接口。也就是说，接口是给别人调用的，那就不要去为难别人了，尽可能保证接口的实用性吧。</p>
<p>应用：</p>
<p>当需要对外暴露接口时，需要再三斟酌，如果真的没有必要对外提供的，就删了吧。一旦您提供了，就意味着，您将来要多做一件事情，何苦要给自己找事做呢。</p>
<blockquote>
<ol>
<li>依赖倒置原则（Dependence Inversion Principle - DIP）</li>
</ol>
</blockquote>
<p>原文：</p>
<p>High level modules should not depends upon low level modules. Both should depend upon abstractions. Abstractions should not depend upon details. Details should depend upon abstractions.</p>
<p>译文：</p>
<p>高层模块不应该依赖于低层模块，它们应该依赖于抽象。抽象不应该依赖于细节，细节应该依赖于抽象。</p>
<p>理解：</p>
<p>应该面向接口编程，不应该面向实现类编程。面向实现类编程，相当于就是论事，那是正向依赖（正常人思维）；面向接口编程，相当于通过事物表象来看本质，那是反向依赖，即依赖倒置（程序员思维）。</p>
<p>应用：</p>
<p>并不是说，所有的类都要有一个对应的接口，而是说，如果有接口，那就尽量使用接口来编程吧。</p>
<p>将以上六大原则的英文首字母拼在一起就是 SOLID（稳定的），所以也称之为 SOLID 原则。</p>
<p>##二、补充设计原则</p>
<p>###1. 组合/聚合复用原则（Composition/Aggregation Reuse Principle - CARP）</p>
<p>当要扩展类的功能时，优先考虑使用组合，而不是继承。这条原则在 23 种经典设计模式中频繁使用，如：代理模式、装饰模式、适配器模式等。可见江湖地位非常之高！</p>
<p>###2. 无环依赖原则（Acyclic Dependencies Principle - ADP）</p>
<p>当 A 模块依赖于 B 模块，B 模块依赖于 C 模块，C 依赖于 A 模块，此时将出现循环依赖。在设计中应该避免这个问题，可通过引入“中介者模式”解决该问题。</p>
<p>###3. 共同封装原则（Common Closure Principle - CCP）</p>
<p>应该将易变的类放在同一个包里，将变化隔离出来。该原则是“开放-封闭原则”的延生。</p>
<p>###4. 共同重用原则（Common Reuse Principle - CRP）</p>
<p>如果重用了包中的一个类，那么也就相当于重用了包中的所有类，我们要尽可能减小包的大小。</p>
<p>###5. 好莱坞原则（Hollywood Principle - HP）</p>
<p>好莱坞明星的经纪人一般都很忙，他们不想被打扰，往往会说：<code>Don&#39;t call me, I&#39;ll call you.</code> 翻译为：不要联系我，我会联系你。对应于软件设计而言，最著名的就是“控制反转”（或称为“依赖注入”），我们不需要在代码中主动的创建对象，而是由容器帮我们来创建并管理这些对象。</p>
<p>##三、其他设计原则</p>
<p>###1. 不要重复你自己（Don’t repeat yourself - DRY）</p>
<p>不要让重复的代码到处都是，要让它们足够的重用，所以要尽可能地封装。</p>
<p>###2. 保持它简单与傻瓜（Keep it simple and stupid - KISS）</p>
<p>不要让系统变得复杂，界面简洁，功能实用，操作方便，要让它足够的简单，足够的傻瓜。</p>
<p>###3. 高内聚与低耦合（High Cohesion and Low Coupling - HCLC）</p>
<p>模块内部需要做到内聚度高，模块之间需要做到耦合度低。</p>
<p>###4. 惯例优于配置（Convention over Configuration - COC）</p>
<p>尽量让惯例来减少配置，这样才能提高开发效率，尽量做到“零配置”。很多开发框架都是这样做的。</p>
<p>###5. 命令查询分离（Command Query Separation - CQS）</p>
<p>在定义接口时，要做到哪些是命令，哪些是查询，要将它们分离，而不要揉到一起。</p>
<p>###6. 关注点分离（Separation of Concerns - SOC）</p>
<p>将一个复杂的问题分离为多个简单的问题，然后逐个解决这些简单的问题，那么这个复杂的问题就解决了。难就难在如何进行分离。</p>
<p>###7. 契约式设计（Design by Contract - DBC）</p>
<p>模块或系统之间的交互，都是基于契约（接口或抽象）的，而不要依赖于具体实现。该原则建议我们要面向契约编程。</p>
<p>###8. 你不需要它（You aren’t gonna need it - YAGNI）</p>
<p>不要一开始就把系统设计得非常复杂，不要陷入“过度设计”的深渊。应该让系统足够的简单，而却又不失扩展性，这是其中的难点。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[测试工具 Mock 的使用(资料整理中)]]></title>
      <url>http://yardfarmer.github.io/2015/10/23/%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7-Mock-%E7%9A%84%E4%BD%BF%E7%94%A8-%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86%E4%B8%AD/</url>
      <content type="html"><![CDATA[<p>因为重构，所以需要测试。</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>###单元测试<br>单元测试主要包含断言，测试框架，测试用例，测试覆盖率，mock，持续集成等几个方面：</p>
<p>Mocha 支持你用任何一种断言库，无论是should.js、chai、expect.js、better-assert等等。也可以用node原始的assert。</p>
<p>###测试风格<br>Mocha支持BDD（行为驱动开发）和TDD（测试驱动开发）两种测试风格，BDD对于TDD来说在关注点更关注整体行为是否符合预期，在表达方式上更接近于自然语言的习惯。Mocha的默认模式是BDD，在此我们只关注BDD模式。</p>
<p>###钩子函数<br>BDD风格的钩子函数有：before, after, beforeEach, afterEach 典型BDD风格测试：</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[怎么写出好代码]]></title>
      <url>http://yardfarmer.github.io/2015/10/23/%E6%80%8E%E4%B9%88%E5%86%99%E5%87%BA%E5%A5%BD%E4%BB%A3%E7%A0%81/</url>
      <content type="html"><![CDATA[<blockquote>
<p>很难定义什么是好代码，但是坏代码是显而易见的。</p>
</blockquote>
<p>##良性循环</p>
<p>对已经具有可测试性、可维护性、可理解性的代码进行测试和维护，可以让工作更简单。有了这个基础，可以让我们更富有成效，富有成效的人时快乐的，快乐的人也是富有成效的。这是一个良性循环。 </p>
<h2 id="理论摘录"><a href="#理论摘录" class="headerlink" title="理论摘录"></a>理论摘录</h2><ol>
<li>重构的基本技巧: 小步前进，频繁测试。</li>
<li>对象技术的要点在于：将数据和对数据的操作行为包装在一起。</li>
<li>封装：对外部世界隐藏内部细节。 </li>
<li>可以让函数保持最小代码量的一个方法是让命令（Command）和查询（Query）保持分离。命令函数表示 do something, 而查询函数表示 return something。</li>
</ol>
<p>##代码的坏味道</p>
<ol>
<li>Duplicated Code（重复的代码）<ul>
<li>合并重复的代码，提取，使之独立出来</li>
</ul>
</li>
<li>Long Method（长函数）<ul>
<li>一个函数越长，圈复杂度就越大，容易出问题的点就越多，并且需要的脑容量也更大，还会导致在修复 bug 的时候，产生新 bug 的概率加大。</li>
<li>原则：每当感觉需要使用注释说明点什么的时候，就把需要说明的东西写入到一个独立的函数中。</li>
</ul>
</li>
<li>Long Parameter List（过长参数列）</li>
<li>Divergent Change（发散式变化）<ul>
<li>一个类受多种变化的影响</li>
<li>一旦需要修改，最好只修改一处</li>
</ul>
</li>
<li>Shotgun Surgery（散弹式修改）<ul>
<li>一种变化引发多个类需要修改</li>
<li>每遇到某种变化，都必须在许多不同的类内做出许多小修改</li>
</ul>
</li>
<li>Feature Envy（依恋情节）<ul>
<li>某个函数为了计算某个值，从另一个对象那调用了多个取值函数</li>
</ul>
</li>
<li>Data Clumps（数据泥团）<ul>
<li>两个类中相同的字段，许多函数中相同的参数等绑在一起出现的数据，提炼成对象</li>
</ul>
</li>
<li>Switch Statement<ul>
<li>面向对象程序的一个显著特征：少用 switch 语句，多用多态。</li>
</ul>
</li>
<li>Complicated Condition（复杂的条件判断）<ul>
<li>把需要注释说明的分支条件，提炼成单独的一个函数</li>
</ul>
</li>
<li>Proper Iterator（合理使用循环）<ul>
<li>如果有些代码实际上是重复性的工作，那么合理的使用循环会使代码量更少</li>
</ul>
</li>
<li>Only One Return（函数只有一个出口）<ul>
<li>提前让函数退出，代替嵌套条件分支</li>
<li>避免 if 分支的左右括号之间相隔 500 米</li>
</ul>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[node stream]]></title>
      <url>http://yardfarmer.github.io/2015/10/23/node-stream/</url>
      <content type="html"><![CDATA[<p>##引子<br>最近编写 gulp-gaea 插件时用到了遇到了 <code>stream</code> 的问题， 在这里总结一下。在node中，流可以帮助我们将事情的重点分为几份，因为使用流可以帮助我们将实现接口的部分分割成一些连续的接口，这些接口都是可重用的。接着，你可以将一个流的输出口接到另一个流的输入口，然后使用使用一些库来对流实现高级别的控制。相比 java 的复杂庞大的 IO 接口，node 的接口简单了很多。</p>
<p>##使用流的好处</p>
<p>在node中，I/O都是异步的，所以在和硬盘以及网络的交互过程中会涉及到传递回调函数的过程。你之前可能会写出这样的代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">    fs.readFile(__dirname + <span class="string">'/data.txt'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</div><div class="line">        res.end(data);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line">server.listen(<span class="number">8000</span>);</div></pre></td></tr></table></figure>
<p>上面的这段代码并没有什么问题，但是在每次请求时，我们都会把整个data.txt文件读入到内存中，然后再把结果返回给客户端。如果data.txt文件非常大，在响应大量用户的并发请求时，程序可能会消耗大量的内存，这样很可能会造成用户连接缓慢的问题。</p>
<p>所幸的是，(req,res)参数都是流对象，这意味着我们可以使用一种更好的方法来实现上面的需求：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> stream = fs.createReadStream(__dirname + <span class="string">'/data.txt'</span>);</div><div class="line">    stream.pipe(res);</div><div class="line">&#125;);</div><div class="line">server.listen(<span class="number">8000</span>);</div></pre></td></tr></table></figure>
<p>在这里，.pipe()方法会自动帮助我们监听data和end事件。上面的这段代码不仅简洁，而且data.txt文件中每一小段数据都将源源不断的发送到客户端, 还有一个好处就是，如果流出的慢了， 那么会自动减少数据的读入，减少对内存的压力。</p>
<p>##node的流模块</p>
<p>在node中，一共有五种类型的流：readable,writable,transform,duplex以及”classic”。</p>
<p>###pipe</p>
<p>无论哪一种流，都会使用.pipe()方法来实现输入和输出。</p>
<p><code>.pipe()</code> 函数很简单，它仅仅是接受一个源头<code>src</code>并将数据输出到一个可写的流<code>dst</code>中：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">src</span><span class="selector-class">.pipe</span>(<span class="selector-tag">dst</span>)</div><div class="line"><span class="selector-class">.pipe</span>(<span class="selector-tag">dst</span>)</div></pre></td></tr></table></figure>
<p>将会返回dst因此你可以链式调用多个流:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">a</span><span class="selector-class">.pipe</span>(<span class="selector-tag">b</span>)<span class="selector-class">.pipe</span>(<span class="selector-tag">c</span>)<span class="selector-class">.pipe</span>(<span class="selector-tag">d</span>)</div></pre></td></tr></table></figure>
<p>上面的代码也可以等价为：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">a</span><span class="selector-class">.pipe</span>(<span class="selector-tag">b</span>);</div><div class="line"><span class="selector-tag">b</span><span class="selector-class">.pipe</span>(<span class="selector-tag">c</span>);</div><div class="line"><span class="selector-tag">c</span><span class="selector-class">.pipe</span>(<span class="selector-tag">d</span>);</div></pre></td></tr></table></figure></p>
<p>类似 unix 中编写流代码很类似：<br><figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a | <span class="type">b</span> | <span class="type">c</span> | <span class="type">d</span></div></pre></td></tr></table></figure></p>
<p>###readable流</p>
<p><code>Readable</code> 流可以产出数据，你可以将这些数据传送到一个 <code>writable</code>，<code>transform</code> 或者 <code>duplex</code> 流中，只需要调用<code>pipe()</code>方法:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">readableStream</span><span class="selector-class">.pipe</span>(<span class="selector-tag">dst</span>)</div></pre></td></tr></table></figure>
<p>创建一个readable流</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var Readable = require(<span class="string">'stream'</span>).Readable;</div><div class="line"></div><div class="line">var rs = <span class="keyword">new</span> Readable;</div><div class="line">rs.<span class="keyword">push</span>(<span class="string">'beep '</span>);</div><div class="line">rs.<span class="keyword">push</span>(<span class="string">'boop\n'</span>);</div><div class="line">rs.<span class="keyword">push</span>(<span class="keyword">null</span>);</div><div class="line">rs.pipe(process.stdout);</div></pre></td></tr></table></figure>
<p>下面运行代码：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">beep</span> boop</div></pre></td></tr></table></figure>
<p><strong>在上面的代码中rs.push(null)的作用是告诉rs输出数据应该结束了。</strong></p>
<p>需要注意的一点是我们在将数据输出到 process.stdout 之前已经将内容推送进readable流rs中，但是所有的数据依然是可写的。</p>
<p>这是因为在你使用.push()将数据推进一个readable流中时，一直要到另一个东西来消耗数据之前，数据都会存在一个缓存中。</p>
<p>可以使用util.inherit()来继承一个Readable流。</p>
<p>###消耗一个readable流</p>
<p>大部分时候，将一个readable流直接 pipe 到另一种类型的流或者使用<code>through</code> 创建的流中，是一件很容易的事情。但是有时我们也会需要直接来消耗一个readable流。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">process.stdin.on(<span class="string">'readable'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> buf = process.stdin.read();</div><div class="line">    <span class="built_in">console</span>.dir(buf);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>当数据可用时，readable事件将会被触发，可以调用.read()方法来从缓存中获取这些数据。</p>
<p>当流结束时，.read()将返回null，因为此时已经没有更多的字节可以供我们获取了。</p>
<p>也可以告诉.read()方法来返回n个字节的数据。</p>
<p>下面是一个例子，在这里我们制定每次读取3个字节的数据：</p>
<p>process.stdin.on(‘readable’, function () {<br>    var buf = process.stdin.read(3);<br>    console.dir(buf);<br>});</p>
<p>###writable流</p>
<p>一个writable流指的是只能流进不能流出的流:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">src</span><span class="selector-class">.pipe</span>(<span class="selector-tag">writableStream</span>)</div></pre></td></tr></table></figure>
<p>####创建一个writable流</p>
<p>只需要定义一个._write(chunk,enc,next)函数，你就可以将一个readable流的数据释放到其中：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Writable = <span class="built_in">require</span>(<span class="string">'stream'</span>).Writable;</div><div class="line"><span class="keyword">var</span> ws = Writable();</div><div class="line">ws._write = <span class="function"><span class="keyword">function</span> (<span class="params">chunk, enc, next</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.dir(chunk);</div><div class="line">    next();</div><div class="line">&#125;;</div><div class="line"></div><div class="line">process.stdin.pipe(ws);</div></pre></td></tr></table></figure>
<p>第一个参数，chunk代表写进来的数据。</p>
<p>第二个参数enc代表编码的字符串，但是只有在opts.decodeString为false的时候你才可以写一个字符串。</p>
<p>第三个参数，next(err)是一个回调函数，使用这个回调函数你可以告诉数据消耗者可以写更多的数据。你可以有选择性的传递一个错误对象error，这时会在流实体上触发一个emit事件。</p>
<p><strong>在从一个readable流向一个writable流传数据的过程中，数据会自动被转换为Buffer对象</strong>，除非你在创建writable流的时候制定了<code>decodeStrings</code>参数为false,  <code>Writable({decodeStrings: false})</code>。</p>
<p>如果你需要传递对象，需要指定objectMode参数为true，<code>Writable({ objectMode: true })</code>。</p>
<p>####向一个writable流中写东西</p>
<p>如果需要向一个writable流中写东西，只需要调用.write(data)即可。</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">process</span>.stdout.<span class="built_in">write</span>(<span class="string">'beep boop\n'</span>);</div></pre></td></tr></table></figure>
<p>为了告诉一个writable流你已经写完毕了，只需要调用.end()方法。<strong>你也可以使用.end(data)在结束前再写一些数据。</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> ws = fs.createWriteStream(<span class="string">'message.txt'</span>);</div><div class="line"></div><div class="line">ws.write(<span class="string">'beep '</span>);</div><div class="line"></div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    ws.end(<span class="string">'boop\n'</span>);</div><div class="line">&#125;, <span class="number">1000</span>);</div></pre></td></tr></table></figure>
<p>###transform流</p>
<p>你可以将 <code>transform</code> 流想象成一个流的中间部分，它可以读也可写，但是并不保存数据，它只负责处理流经它的数据。 gulp 中接触的流就是 transform 流。</p>
<p>###duplex流</p>
<p>Duplex 流是一个可读也可写的流，就好像一个电话，可以接收也可以发送语音。一个rpc交换是一个duplex流的最好的例子。如果你看到过下面这样的代码：</p>
<p>a.pipe(b).pipe(a)<br>那么你需要处理的就是一个duplex流对象。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[js中的编码转换]]></title>
      <url>http://yardfarmer.github.io/2015/10/23/js%E4%B8%AD%E7%9A%84%E7%BC%96%E7%A0%81%E8%BD%AC%E6%8D%A2/</url>
      <content type="html"><![CDATA[<p>#js 的码</p>
<p>#1. btoa, atob</p>
<p>WindowBase64.btoa()</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> encodedData = <span class="built_in">window</span>.btoa(stringToEncode);</div></pre></td></tr></table></figure>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> encodedData = <span class="built_in">window</span>.btoa(<span class="string">"Hello, world"</span>); <span class="comment">// encode a string</span></div><div class="line"><span class="keyword">var</span> decodedData = <span class="built_in">window</span>.atob(encodedData); <span class="comment">// decode the string</span></div></pre></td></tr></table></figure>
<p>Notes<br>You can use this method to encode data which may otherwise cause communication problems, transmit it, then use the window.atob() method to decode the data again. For example, you can encode control characters such as ASCII values 0 through 31.</p>
<p>btoa() is also available to XPCOM components implemented in JavaScript, even though window is not the global object in components.</p>
<p>Unicode Strings<br>In most browsers, calling window.btoa() on a Unicode string will cause a Character Out Of Range exception.</p>
<p>To avoid this, consider this pattern, noted by Johan Sundström:</p>
<pre><code>function utf8_to_b64(str) {
    return window.btoa(unescape(encodeURIComponent(str)));
}

function b64_to_utf8(str) {
    return decodeURIComponent(escape(window.atob(str)));
}
</code></pre><p>// Usage:<br>utf8_to_b64(‘✓ à la mode’); // JTI1dTI3MTMlMjUyMCUyNUUwJTI1MjBsYSUyNTIwbW9kZQ==<br>b64_to_utf8(‘JTI1dTI3MTMlMjUyMCUyNUUwJTI1MjBsYSUyNTIwbW9kZQ==’); // “✓ à la mode”</p>
<p>utf8_to_b64(‘I \u2661 Unicode!’); // SSUyNTIwJTI1dTI2NjElMjUyMFVuaWNvZGUlMjUyMQ==<br>b64_to_utf8(‘SSUyNTIwJTI1dTI2NjElMjUyMFVuaWNvZGUlMjUyMQ==’); // “I ♡ Unicode!”<br>A better, more faithful and less expensive solution is to convert the DOMString to a UTF-8 encoded string passing for typed arrays. In order to do this, please, read this paragraph.</p>
<p>##2. escape</p>
<p>##. encodeURIComponent</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Genymotion 使用 charles 代理]]></title>
      <url>http://yardfarmer.github.io/2015/10/23/Genymotion-%E4%BD%BF%E7%94%A8-charles-%E4%BB%A3%E7%90%86/</url>
      <content type="html"><![CDATA[<p>在 Genymotion 模拟器中：</p>
<ol>
<li>Settings -&gt; Wifi -&gt; Press and hold your active network</li>
<li>Select “Modify Network”</li>
<li>Select “Show Advanced Options”</li>
<li>Select “Proxy Settings -&gt; Manual”</li>
<li>Set your Proxy to: 10.0.3.2 (Genymotion’s special code for the local workstation)</li>
<li>Set your Port to: 8888</li>
<li>ok</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[视口]]></title>
      <url>http://yardfarmer.github.io/2015/10/23/%E8%A7%86%E5%8F%A3/</url>
      <content type="html"><![CDATA[<p>##1. 像素<br>一个像素就是计算机屏幕能显示一种特定颜色的最小区域， 屏幕上的像素越多，同一时间你可以看到的就越多。 当设备尺寸相同但像素变得更密集时，屏幕上能显示的画面的过渡更细致。<br>实际上， 有以下两种像素：</p>
<ol>
<li>设备像素： 设备屏幕的物理像素，任何设备的物理像素的数量都是固定的。</li>
<li>css 像素：为 web 开发者创造的，在 css/js 中使用的一个抽象层。</li>
</ol>
<p>加入设置一个元素 width: 100px， 是设置元素跨越了 200 个 css 元素。 200个 css 像素相当于多少个物理像素取决于屏幕特性和用户的缩放行为。放大的越大，一个 css 像素覆盖的物理像素的就越多。</p>
<p>##2. 页面缩放<br>假设一个桌面端浏览器的宽度是 1024px， 这意味着桌面上有 1024个 css 像素。</p>
<p>##3. 设备像素比<br>javascript 中有一个属性 <code>window.devicePixelRatio</code>, css 中也有 <code>device-pixel-ratio</code> 属性，称为设备像素比(Device Pixel Ratio, DPR),<br>设备像素和理想视口的比。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meat</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width"</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[add draft2]]></title>
      <url>http://yardfarmer.github.io/2015/10/23/add-draft2/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[requirejs 与 seajs 的不同]]></title>
      <url>http://yardfarmer.github.io/2015/03/16/2015-02-16-requirejs%20%E4%B8%8E%20seajs%20%E7%9A%84%E4%B8%8D%E5%90%8C/</url>
      <content type="html"><![CDATA[<h2 id="require"><a href="#require" class="headerlink" title="require"></a>require</h2><p>脚本加载顺序与下面的引用声明顺序有关，与 factory 函数里的 require 次序无关, 与 seajs 不同的是, 虽然使用了 require, 但是下面不声明引用，requier 无效, 感觉这样好鸡肋</p>
<p>requirejs 中 require 的用法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">define([<span class="string">"require"</span>,<span class="string">"./values"</span>,<span class="string">"./functionOnly"</span>], <span class="function"><span class="keyword">function</span>(<span class="params">require</span>) </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// 报错，脚本不再执行, 说明脚本加载了, 但是还没被执行</span></div><div class="line">    <span class="comment">//console.log(1,nameModue.color);</span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> nameModue = <span class="built_in">require</span>(<span class="string">"./functionOnly"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 脚本的最终加载顺序与 require 顺序无关</span></div><div class="line">    <span class="keyword">var</span> mod = <span class="built_in">require</span>(<span class="string">"./values"</span>);</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>,nameModue,mod);</div><div class="line">    <span class="comment">//console.log(mod);</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>seajs 中用法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params">require, exports, module</span>) </span>&#123;</div><div class="line"><span class="meta">    'use strict'</span>;</div><div class="line">    <span class="keyword">var</span> mod1 = <span class="built_in">require</span>(<span class="string">'./mod1'</span>),</div><div class="line">        mod2 = <span class="built_in">require</span>(<span class="string">'./mod2'</span>);</div><div class="line"></div><div class="line">    mod1.hello();</div><div class="line">    mod2.hello();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">hello</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'hello main'</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[说说 requirejs 与 seajs 的懒加载]]></title>
      <url>http://yardfarmer.github.io/2015/03/16/2015-03-16-%E6%87%92%E5%8A%A0%E8%BD%BD/</url>
      <content type="html"><![CDATA[<p>LazyLoad的优势体现在：仅当资源需要被使用前加载资源。在RequireJS和Sea.js中表现为，在回调函数调用前加载js脚本资源。</p>
<p>RequireJS 和 Sea.js 在资源加载的时间点都是一样的，所以论“懒”的程度都是一样的。<br>差别仅仅在于加载的脚本什么时候执行。<br>RequireJS的依赖模块在回调函数执行前执行完毕，而Sea.js的依赖模块在回调函数执行require时执行。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li>知乎, <a href="http://www.zhihu.com/question/20342350" target="_blank" rel="external">模块加载</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[上手 polymer]]></title>
      <url>http://yardfarmer.github.io/2015/02/22/2015-02-22-polymer%E4%BD%93%E9%AA%8C/</url>
      <content type="html"><![CDATA[<p>先把代码粘出来。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../polymer-tutorial-master/components/polymer/polymer.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--demo1--&gt;</span></div><div class="line"><span class="comment">&lt;!--如果没有 &lt;script&gt;Polymer()&lt;/script&gt; 不行的--&gt;</span></div><div class="line"><span class="comment">&lt;!--在polymer-elemnet上设置的其他 attribute 将会自动添加到元素实例上。例如：--&gt;</span></div><div class="line"><span class="comment">&lt;!--如果没有 js 构造函数,noscript 是必须的--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">polymer-element</span> <span class="attr">name</span>=<span class="string">"x-element_1"</span> <span class="attr">noscript</span> <span class="attr">a</span>=<span class="string">"1"</span> <span class="attr">b</span>=<span class="string">"2"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">polymer-element</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">x-element_1</span>&gt;</span><span class="tag">&lt;/<span class="name">x-element_1</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">&lt;!--demo2--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">polymer-element</span> <span class="attr">name</span>=<span class="string">"x-element_2"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--可以没有 template--&gt;</span></div><div class="line">	<span class="comment">&lt;!--&lt;template&gt;--&gt;</span></div><div class="line">	<span class="comment">&lt;!--&lt;/template&gt;--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">		Polymer(<span class="string">'x-element_2'</span>,&#123;</div><div class="line"></div><div class="line">			<span class="attr">message</span>: <span class="string">"Hello"</span>,</div><div class="line">			get greeting() &#123;</div><div class="line">				<span class="keyword">return</span> <span class="keyword">this</span>.message;</div><div class="line">			&#125;,</div><div class="line">			<span class="attr">getGreet</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">				<span class="keyword">return</span> <span class="keyword">this</span>.message;</div><div class="line">			&#125;,</div><div class="line">			<span class="attr">foo</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">				<span class="built_in">console</span>.log(<span class="string">"getter"</span>,<span class="keyword">this</span>.greeting);</div><div class="line">				<span class="built_in">console</span>.log(<span class="string">"function"</span>,<span class="keyword">this</span>.getGreet());</div><div class="line">			&#125;,</div><div class="line">			<span class="attr">ready</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="keyword">this</span>.foo();</div><div class="line">			&#125;</div><div class="line">		&#125;)</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">polymer-element</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">x-element_2</span>&gt;</span><span class="tag">&lt;/<span class="name">x-element_2</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">&lt;!--demo3--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">polymer-element</span> <span class="attr">name</span>=<span class="string">"app-globals"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="comment">//		(function() &#123;</span></div><div class="line"><span class="comment">//			var firstName = 'John';</span></div><div class="line"><span class="comment">//			var lastName = 'Smith';</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//			Polymer('app-globals', &#123;</span></div><div class="line"><span class="comment">//				ready: function() &#123;</span></div><div class="line"><span class="comment">//					this.firstName = firstName;</span></div><div class="line"><span class="comment">//					this.lastName = lastName;</span></div><div class="line"><span class="comment">//				&#125;</span></div><div class="line"><span class="comment">//			&#125;);</span></div><div class="line"><span class="comment">//		&#125;)();</span></div><div class="line"></div><div class="line"></div><div class="line">	(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="comment">// 可以在外面通过`属性`配置全局变量</span></div><div class="line">		<span class="keyword">var</span> values = &#123;&#125;;</div><div class="line"></div><div class="line">		Polymer(<span class="string">'app-globals'</span>,&#123;</div><div class="line">			<span class="attr">ready</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">				<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.attributes.length; ++i) &#123;</div><div class="line">					<span class="keyword">var</span> attr = <span class="keyword">this</span>.attributes[i];</div><div class="line">					<span class="built_in">console</span>.log(<span class="string">'--'</span>,attr.nodeName,attr.value)</div><div class="line">					values[attr.nodeName] = attr.value;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;);</div><div class="line">	&#125;());</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">polymer-element</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">polymer-element</span> <span class="attr">name</span>=<span class="string">"x-element_3"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">app-globals</span> <span class="attr">id</span>=<span class="string">"globalApp"</span> <span class="attr">firstName2</span>=<span class="string">"Addy"</span> <span class="attr">lastName</span>=<span class="string">"Osmani"</span>&gt;</span><span class="tag">&lt;/<span class="name">app-globals</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"firstname"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"lastname"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">		Polymer(<span class="string">'x-element_3'</span>, &#123;</div><div class="line">			<span class="attr">ready</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">				<span class="keyword">this</span>.globals = <span class="keyword">this</span>.$.globalApp;</div><div class="line">				<span class="built_in">console</span>.dir(<span class="keyword">this</span>.globals.getAttribute(<span class="string">'firstName2'</span>));</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">polymer-element</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">x-element_3</span>&gt;</span><span class="tag">&lt;/<span class="name">x-element_3</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">&lt;!--demo4--&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">polymer-element</span> <span class="attr">name</span>=<span class="string">"x-element_4"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">		Polymer(<span class="string">'x-element_4'</span>,&#123;</div><div class="line">			<span class="attr">ready</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">				<span class="built_in">console</span>.log(<span class="string">'ready'</span>,<span class="string">'可能还包括图片,样式等外链加载,加载完毕'</span>);</div><div class="line">			&#125;,</div><div class="line">			<span class="attr">created</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="built_in">console</span>.log(<span class="string">'created'</span>,<span class="string">'一个元素的实例被创建'</span>);</div><div class="line">			&#125;,</div><div class="line">			<span class="attr">attached</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">				<span class="built_in">console</span>.log(<span class="string">'attached'</span>,<span class="string">'当一个元素的实例被插入到DOM中'</span>);</div><div class="line">			&#125;,</div><div class="line">			<span class="attr">domReady</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">				<span class="built_in">console</span>.log(<span class="string">'domReady'</span>);</div><div class="line">			&#125;,</div><div class="line">			<span class="attr">detached</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">				<span class="built_in">console</span>.log(<span class="string">'detached'</span>,<span class="string">'当实例从DOM中移除'</span>);</div><div class="line">			&#125;,</div><div class="line">			<span class="attr">attributeChanged</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">				<span class="built_in">console</span>.log(<span class="string">'attributeChanged'</span>,attrName, <span class="string">'old: '</span> + oldVal, <span class="string">'new:'</span>, newVal);</div><div class="line">			&#125;</div><div class="line">		&#125;)</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">polymer-element</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">x-element_4</span>&gt;</span><span class="tag">&lt;/<span class="name">x-element_4</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">	attributes="foo bar baz" 元素实例显示为 undefined,语句表示设置三个元素实例对象,</div><div class="line">	可作为 html标签 x-element_5 的属性使用,默认情况是由标签像实例内部传值, 在设置对象的</div><div class="line">	reflect 可实现对象的property 与 标签attribute值的双向绑定</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">polymer-element</span> <span class="attr">name</span>=<span class="string">"x-element_5"</span> <span class="attr">attributes</span>=<span class="string">"foo bar baz"</span> <span class="attr">lorem</span>=<span class="string">"abc"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">template</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>5<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	Polymer(<span class="string">'x-element_5'</span>,&#123;</div><div class="line">		<span class="attr">ready</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="built_in">console</span>.log(<span class="keyword">this</span>.foo);</div><div class="line"></div><div class="line">			<span class="keyword">var</span> e = <span class="built_in">document</span>.querySelector(<span class="string">"x-element_5"</span>);</div><div class="line">			<span class="built_in">console</span>.log(e.foo, e.bar, e.privateMethod);</div><div class="line">			<span class="keyword">this</span>.baz = <span class="string">"changed,double bind"</span></div><div class="line">			<span class="built_in">console</span>.dir(e);</div><div class="line"></div><div class="line">		&#125;,</div><div class="line">		<span class="attr">privateMethod</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			<span class="comment">// 挂载在 prototype 对象上</span></div><div class="line">		&#125;,</div><div class="line">		<span class="attr">publish</span>:&#123;</div><div class="line">			<span class="attr">foo</span>: <span class="string">'I am foo!'</span>,</div><div class="line">			<span class="attr">bar</span>: &#123;</div><div class="line">				<span class="attr">x</span>: <span class="number">1</span>,</div><div class="line">				<span class="attr">y</span>: <span class="number">2</span>,</div><div class="line">				<span class="attr">z</span>: &#123;</div><div class="line">					<span class="attr">zIndex</span>: <span class="string">"100"</span>,</div><div class="line">					<span class="attr">arr</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</div><div class="line">				&#125;</div><div class="line">			&#125;,</div><div class="line">			<span class="attr">baz</span>: &#123;</div><div class="line">				<span class="attr">value</span>: <span class="literal">false</span>,</div><div class="line">				<span class="attr">reflect</span>: <span class="literal">false</span>  <span class="comment">// 双向绑定</span></div><div class="line">			&#125;,</div><div class="line">			<span class="attr">publicMethod</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="comment">// 挂载在元素实例上</span></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">polymer-element</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">x-element_5</span> <span class="attr">foo</span>=<span class="string">"I am not foo!"</span>&gt;</span><span class="tag">&lt;/<span class="name">x-element_5</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">x-element_5</span> <span class="attr">foo</span>=<span class="string">"I am a coder"</span> <span class="attr">baz</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">x-element_5</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">	demo 6</div><div class="line">	template</div><div class="line">	双向数据绑定 observe</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">polymer-element</span> <span class="attr">name</span>=<span class="string">"greeting-tag"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 最外面的 template 定义了 element 的 shadow DOM --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line"></div><div class="line">			<span class="tag">&lt;<span class="name">span</span>&gt;</span> 这里会根据下面的 input 而变化：&#123;&#123; ngModel &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>  <span class="attr">value</span>=<span class="string">"&#123;&#123;ngModel&#125;&#125;"</span> <span class="attr">placeholder</span>=<span class="string">"体验双向绑定"</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">			<span class="tag">&lt;<span class="name">template</span> <span class="attr">repeat</span>=<span class="string">"&#123;&#123;s in salutations&#125;&#125;"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;s.what&#125;&#125;: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123;s.who&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">on-click</span>=<span class="string">"&#123;&#123;updateModel&#125;&#125;"</span>&gt;</span>Update model<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">		Polymer(<span class="string">'greeting-tag'</span>, &#123;</div><div class="line">			<span class="attr">ngModel</span>: <span class="string">''</span>,</div><div class="line"></div><div class="line">			<span class="comment">// 观察者, 数据有变化会触发</span></div><div class="line">			observe: &#123;</div><div class="line">				<span class="attr">ngModel</span>: <span class="string">'onChangeCallback'</span></div><div class="line">			&#125;,</div><div class="line">			<span class="attr">ready</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">				<span class="comment">// 植入 element 的数据模型 (数组 salutations)</span></div><div class="line">				<span class="keyword">this</span>.salutations = [</div><div class="line">					&#123;<span class="attr">what</span>: <span class="string">'Hello'</span>, <span class="attr">who</span>: <span class="string">'World'</span>&#125;,</div><div class="line">					&#123;<span class="attr">what</span>: <span class="string">'GoodBye'</span>, <span class="attr">who</span>: <span class="string">'DOM APIs'</span>&#125;,</div><div class="line">					&#123;<span class="attr">what</span>: <span class="string">'Hello'</span>, <span class="attr">who</span>: <span class="string">'Declarative'</span>&#125;,</div><div class="line">					&#123;<span class="attr">what</span>: <span class="string">'GoodBye'</span>, <span class="attr">who</span>: <span class="string">'Imperative'</span>&#125;</div><div class="line">				];</div><div class="line">			&#125;,</div><div class="line">			<span class="attr">updateModel</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="comment">//				console.log();</span></div><div class="line">				<span class="comment">//this.salutations.reverse();</span></div><div class="line">			&#125;,</div><div class="line">			<span class="attr">onChangeCallback</span>: <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">				<span class="built_in">console</span>.log(a,b);</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">polymer-element</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">greeting-tag</span>&gt;</span><span class="tag">&lt;/<span class="name">greeting-tag</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">	demo 7</div><div class="line">	事件触发</div><div class="line">	http://docs.polymerchina.org/docs/polymer/polymer.html#declarative-event-mapping</div><div class="line">--&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">polymer-element</span> <span class="attr">name</span>=<span class="string">"ouch-button"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">on-click</span>=<span class="string">"&#123;&#123;onClick&#125;&#125;"</span>&gt;</span>伤自尊<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line">		Polymer(<span class="string">'ouch-button'</span>, &#123;</div><div class="line">			onClick: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">				<span class="comment">// fire(inType, inDetail, inToNode)</span></div><div class="line">				<span class="comment">//	触发外部的事件</span></div><div class="line">				<span class="keyword">this</span>.fire(<span class="string">'ouch'</span>, &#123;msg: <span class="string">'又伤自尊了！'</span>&#125;);</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">polymer-element</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">ouch-button</span>&gt;</span><span class="tag">&lt;/<span class="name">ouch-button</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="built_in">document</span>.querySelector(<span class="string">'ouch-button'</span>).addEventListener(<span class="string">'ouch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(e.type, e.detail.msg); <span class="comment">// "嗷" "又伤自尊了！"</span></div><div class="line">	&#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[从底层了解 polymer]]></title>
      <url>http://yardfarmer.github.io/2015/02/21/2015-02-21-%E6%A8%A1%E6%8B%9Fpolymer/</url>
      <content type="html"><![CDATA[<h2 id="实现机制"><a href="#实现机制" class="headerlink" title="实现机制"></a>实现机制</h2><p>下面是写的例子， 先占坑，后面补上。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">		<span class="selector-tag">h1</span> &#123;</div><div class="line">			<span class="attribute">color</span>: red;</div><div class="line">		&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"sdtemplate"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">			<span class="selector-tag">p</span> &#123; <span class="attribute">color</span>: orange; &#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>I'm in Shadow DOM. My markup was stamped from a &amp;lt;template&amp;gt;.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">template</span> <span class="attr">type</span>=<span class="string">"text/x-template"</span> <span class="attr">id</span>=<span class="string">"forCustomElement"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span> good night !<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"custom-component"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>in host<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line"><span class="comment">//	demo 1</span></div><div class="line">	<span class="keyword">var</span> host2 = <span class="built_in">document</span>.querySelector(<span class="string">'.custom-component'</span>);</div><div class="line">	<span class="keyword">var</span> root = host2.createShadowRoot();</div><div class="line">	<span class="comment">// :host 指为 root 的宿主元素-&gt; &lt;div class="custom-component"&gt;&lt;/div&gt;</span></div><div class="line">	root.innerHTML = <span class="string">"&lt;style&gt; :host &#123;border:2px solid dodgerblue; width:200px;&#125; div &#123; color: green; &#125;&lt;/style&gt;&lt;div&gt;in shadow tree&lt;/div&gt;"</span>; <span class="comment">// ok</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//	demo 2</span></div><div class="line"><span class="comment">//	root.innerHTML = "&lt;h1 style='color: green'&gt;hello&lt;/h1&gt;"; // ok</span></div><div class="line"></div><div class="line">	<span class="keyword">var</span> XFooProto = <span class="built_in">Object</span>.create(HTMLElement.prototype);</div><div class="line"></div><div class="line">	XFooProto.createdCallback = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'created'</span>);</div><div class="line"></div><div class="line">		<span class="keyword">var</span> root = <span class="keyword">this</span>.createShadowRoot();</div><div class="line">		<span class="keyword">var</span> tpl = <span class="built_in">document</span>.querySelector(<span class="string">"#forCustomElement"</span>);</div><div class="line">		<span class="keyword">var</span> cloneNode = tpl.content.cloneNode(<span class="literal">true</span>);</div><div class="line">		root.appendChild(cloneNode);</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	XFooProto.enteredViewCallback = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'enteredView'</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	XFooProto.attributeChangedCallback = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'attribute changed'</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//	XFooProto.createdCallback = function() &#123;</span></div><div class="line"><span class="comment">//		this.innerHTML = "&lt;h1&gt;via js append&lt;/h1&gt;";</span></div><div class="line"><span class="comment">//	&#125;;</span></div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">// 注册 x-foo 的定义</span></div><div class="line">	<span class="keyword">var</span> XFoo2 = <span class="built_in">document</span>.registerElement(<span class="string">'x-foo-with-markup'</span>, &#123;<span class="attr">prototype</span>: XFooProto&#125;);</div><div class="line">	<span class="comment">// 创建一个 x-foo 实例</span></div><div class="line">	<span class="keyword">var</span> xfoo = <span class="built_in">document</span>.createElement(<span class="string">'x-foo-with-markup'</span>);</div><div class="line">	<span class="comment">// 插入页面</span></div><div class="line">	<span class="built_in">document</span>.body.appendChild(xfoo);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//	xBarPrototype = Object.create(HTMLButtonElement.prototype); // 即使继承了它，也没画出 button</span></div><div class="line">	xBarPrototype = <span class="built_in">Object</span>.create(HTMLElement.prototype, &#123;</div><div class="line">				<span class="attr">createdCallback</span>: &#123;</div><div class="line">					<span class="attr">value</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">						<span class="keyword">var</span> t = <span class="built_in">document</span>.querySelector(<span class="string">'#sdtemplate'</span>);</div><div class="line"><span class="comment">//						var clone = document.importNode(t.content, true);</span></div><div class="line">						<span class="keyword">var</span> clone = t.content.cloneNode(<span class="literal">true</span>); <span class="comment">// deep is true</span></div><div class="line">						<span class="keyword">this</span>.createShadowRoot().appendChild(clone);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;);</div><div class="line"></div><div class="line">	<span class="built_in">document</span>.registerElement(<span class="string">'x-bar'</span>, &#123;</div><div class="line">		<span class="attr">prototype</span>: xBarPrototype</div><div class="line">	&#125;);</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">x-bar</span>&gt;</span><span class="tag">&lt;/<span class="name">x-bar</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>##参考链接<br><a href="http://blog.bingo929.com/custom-elements-html-web-components.html" target="_blank" rel="external">http://blog.bingo929.com/custom-elements-html-web-components.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[D3.js 制作图表]]></title>
      <url>http://yardfarmer.github.io/2015/02/12/2015-02-11-d3/</url>
      <content type="html"><![CDATA[<p>D3.js 为数据可视化而生，是一个适于生成互动图形的JavaScript函数库,可用于制作图表展示数据，d3完全开源，方便制作完全满足项目业务逻辑的需求，而不受现有图表库的种种限制。</p>
<h2 id="操作网页元素"><a href="#操作网页元素" class="headerlink" title="操作网页元素"></a>操作网页元素</h2><p>D3提供了一系列操作网页元素的方法，很类似jQuery，也是先选中某个元素（select方法），然后对其进行某种操作。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> body = d3.select(<span class="string">"body"</span>);</div><div class="line"><span class="keyword">var</span> div = body.append(<span class="string">"div"</span>);</div><div class="line">div.html(<span class="string">"Hello, world!"</span>);</div></pre></td></tr></table></figure>
<p>select方法用于选中一个元素，而selectAll方法用于选中一组元素。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> section = d3.selectAll(<span class="string">"section"</span>);</div><div class="line"><span class="keyword">var</span> div = section.append(<span class="string">"div"</span>);</div><div class="line">div.html(<span class="string">"Hello, world!"</span>);</div></pre></td></tr></table></figure>
<p>d3采用类似 jQuery 的链式操作方式。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">d3.select(<span class="string">"body"</span>)</div><div class="line">    .style(<span class="string">"color"</span>, <span class="string">"black"</span>)</div><div class="line">    .style(<span class="string">"background-color"</span>, <span class="string">"white"</span>);</div></pre></td></tr></table></figure>
<p>需要注意的是append方法返回一个新对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">d3.selectAll(<span class="string">"section"</span>)</div><div class="line">  .attr(<span class="string">"class"</span>, <span class="string">"special"</span>)</div><div class="line">  .append(<span class="string">"div"</span>)</div><div class="line">  .html(<span class="string">"Hello, world!"</span>);</div></pre></td></tr></table></figure>
<h2 id="生成svg元素"><a href="#生成svg元素" class="headerlink" title="生成svg元素"></a>生成svg元素</h2><p>D3作图需要svg元素，可以用JavaScript代码动态生成。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> v = d3.select(<span class="string">"#graph"</span>)</div><div class="line">            .append(<span class="string">"svg"</span>);</div><div class="line"></div><div class="line">v.attr(<span class="string">"width"</span>, <span class="number">900</span>).attr(<span class="string">"height"</span>, <span class="number">400</span>);</div></pre></td></tr></table></figure>
<h2 id="生成图形"><a href="#生成图形" class="headerlink" title="生成图形"></a>生成图形</h2><h3 id="选中对象集"><a href="#选中对象集" class="headerlink" title="选中对象集"></a>选中对象集</h3><p>selectAll方法不仅可以选中现有的网页元素，还可以选中当前尚不存在的网页元素。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">d3.select(<span class="string">".chart"</span>)</div><div class="line">  .selectAll(<span class="string">"div"</span>);</div></pre></td></tr></table></figure>
<p>上面代码表示，selectAll方法选中了.chart元素下面所有现有和将来可能出现的div元素。</p>
<h3 id="绑定数据"><a href="#绑定数据" class="headerlink" title="绑定数据"></a>绑定数据</h3><p>data方法用于对选中的结果集绑定数据。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> data = [<span class="number">4</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">42</span>, <span class="number">12</span>];</div><div class="line"></div><div class="line">d3.select(<span class="string">".chart"</span>)</div><div class="line">  .selectAll(<span class="string">"div"</span>)</div><div class="line">  .data(data)</div><div class="line">  .enter().append(<span class="string">"div"</span>)</div><div class="line">  .style(<span class="string">"width"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> d * <span class="number">10</span> + <span class="string">"px"</span>; &#125;)</div><div class="line">  .text(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> d; &#125;);</div></pre></td></tr></table></figure>
<p>上面代码中，enter方法和append方法表示由于此时div元素还不存在，必须根据数据的个数将它们创造出来。style方法和text方法的参数是函数，表示函数的运行结果就是设置网页元素的值。</p>
<p>上面代码的运行结果是生成一个条状图，但是没有对条状图的长度进行控制，下面采用scale.linear方法对数据长度进行设置。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> data = [<span class="number">4</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">42</span>, <span class="number">12</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> x = d3.scale.linear()</div><div class="line">    .domain([<span class="number">0</span>, d3.max(data)])</div><div class="line">    .range([<span class="number">0</span>, <span class="number">420</span>]);</div><div class="line"></div><div class="line">d3.select(<span class="string">".chart"</span>)</div><div class="line">  .selectAll(<span class="string">"div"</span>)</div><div class="line">  .data(data)</div><div class="line">  .enter().append(<span class="string">"div"</span>)</div><div class="line">  .style(<span class="string">"width"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> x(d) + <span class="string">"px"</span>; &#125;)</div><div class="line">  .text(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> d; &#125;);</div></pre></td></tr></table></figure>
<h2 id="操作SVG图形"><a href="#操作SVG图形" class="headerlink" title="操作SVG图形"></a>操作SVG图形</h2><p>使用SVG图形生成条形图，首先是选中矢量图格式，然后每个数据值生成一个g元素（group），再在每个g元素内部生成一个rect元素和text元素。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> width = <span class="number">840</span>,</div><div class="line">    barHeight = <span class="number">20</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> x = d3.scale.linear()</div><div class="line">    .domain([<span class="number">0</span>, d3.max(dataArray)])</div><div class="line">    .range([<span class="number">0</span>, width]);</div><div class="line"></div><div class="line"><span class="keyword">var</span> chart = d3.select(<span class="string">".bar-chart-svg"</span>)</div><div class="line">    .attr(<span class="string">"width"</span>, width)</div><div class="line">    .attr(<span class="string">"height"</span>, barHeight * dataArray.length);</div><div class="line"></div><div class="line"><span class="keyword">var</span> bar = chart.selectAll(<span class="string">"g"</span>)</div><div class="line">    .data(dataArray)</div><div class="line">  .enter().append(<span class="string">"g"</span>)</div><div class="line">    .attr(<span class="string">"transform"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d, i</span>) </span>&#123; <span class="keyword">return</span> <span class="string">"translate(0,"</span> + i * barHeight + <span class="string">")"</span>; &#125;);</div><div class="line"></div><div class="line">bar.append(<span class="string">"rect"</span>)</div><div class="line">    .attr(<span class="string">"width"</span>, x)</div><div class="line">    .attr(<span class="string">"height"</span>, barHeight - <span class="number">1</span>);</div><div class="line"></div><div class="line">bar.append(<span class="string">"text"</span>)</div><div class="line">    .attr(<span class="string">"x"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> x(d) - <span class="number">3</span>; &#125;)</div><div class="line">    .attr(<span class="string">"y"</span>, barHeight / <span class="number">2</span>)</div><div class="line">    .attr(<span class="string">"dy"</span>, <span class="string">".35em"</span>)</div><div class="line">    .text(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> d; &#125;);</div></pre></td></tr></table></figure>
<h2 id="加载XML文件"><a href="#加载XML文件" class="headerlink" title="加载XML文件"></a>加载XML文件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">d3.xml(<span class="string">'example'</span>, <span class="string">'image/svg+xml'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">error, data</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (error) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'加载SVG文件出错！'</span>, error);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 处理SVG文件</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li>Dana Silver, <a href="http://danasilver.org/2013/12/31/d3-github-language-stats/" target="_blank" rel="external">The d3.js Bar Chart Tutorials with Github Data</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[seajs 使用记录]]></title>
      <url>http://yardfarmer.github.io/2015/01/18/2015-01-28-seajs/</url>
      <content type="html"><![CDATA[<p>#require 书写约定</p>
<p>使用 Sea.js 书写模块代码时，需要遵循一些简单规则。</p>
<ol>
<li>正确拼写</li>
</ol>
<p>模块 factory 构造方法的第一个参数 必须 命名为 require 。</p>
<pre><code>// 错误！
define(function(req) {
  // ...
});

// 正确！
define(function(require) {
  // ...l
});
</code></pre><ol>
<li>不要修改</li>
</ol>
<p>不要重命名 require 函数，或在任何作用域中给 require 重新赋值。</p>
<pre><code>// 错误 - 重命名 &quot;require&quot;！
var req = require, mod = req(&quot;./mod&quot;);

// 错误 - 重定义 &quot;require&quot;!
require = function() {};

// 错误 - 重定义 &quot;require&quot; 为函数参数！
function F(require) {}

// 错误 - 在内嵌作用域内重定义了 &quot;require&quot;！
function F() {
  var require = function() {};
}
</code></pre><ol>
<li>使用直接量</li>
</ol>
<p>require 的参数值 必须 是字符串直接量。</p>
<pre><code>// 错误！
require(myModule);

// 错误！
require(&quot;my-&quot; + &quot;module&quot;);

// 错误！
require(&quot;MY-MODULE&quot;.toLowerCase());

// 正确！
require(&quot;my-module&quot;);
</code></pre><p>在书写模块代码时，必须遵循这些规则。其实只要把 require 看做是语法<code>关键字</code>。</p>
<blockquote>
<p>之所以必须使用 require， 是因为 seajs 内部采用正则匹配的方式找到 require，然后加载依赖模块。</p>
</blockquote>
<h2 id="关于动态依赖"><a href="#关于动态依赖" class="headerlink" title="关于动态依赖"></a>关于动态依赖</h2><p>有时会希望可以使用 require 来进行条件加载：</p>
<pre><code>if (todayIsWeekend)
  require(&quot;play&quot;);
else
  require(&quot;work&quot;);
</code></pre><p>但请牢记，从静态分析的角度来看，这个模块同时依赖 play 和 work 两个模块，加载器会把这两个模块文件都下载下来。 <strong>require 不是同步加载，而是异步加载，并且是预加载</strong> 这种情况下，推荐使用 require.async 来进行条件加载。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用hg推送后执行编译]]></title>
      <url>http://yardfarmer.github.io/2015/01/16/2015-01-16-hg-remote-push-hook/</url>
      <content type="html"><![CDATA[<h2 id="hg-hook"><a href="#hg-hook" class="headerlink" title="hg hook"></a>hg hook</h2><p>大多数的版本管理工具都具有<code>钩子</code>功能，这里记录下开发团队内部工具<a href="https://github.com/chenyakun/sluggard" title="github repo" target="_blank" rel="external">sluggard</a>时,遇到的关于<a href="http://www.selenic.com/mercurial/hgrc.5.html#hooks" target="_blank" rel="external">hg hook</a>的使用。</p>
<p>在被推送端, <code>.hg/hgrc</code>下配置</p>
<pre><code>[ui]
username = hg_be_pushed
verbose = True

[hooks]
commit = /path/to/commithook
incoming = /path/to/incominghook    # 每个 commit 执行一次
changegroup= /path/to/changegroup   # 每次被 push 执行一次

[web]
push_ssl = No    # 放开ssl限制
allow_push = *   # 运行推送
</code></pre><p>需要说明的是，被push端需要开启<strong>web服务</strong>,才能接收<code>push</code></p>
<pre><code>hg serve -p port
</code></pre><p>推送端，<code>.hg/hgrc</code>配置如下</p>
<pre><code>[ui]
username = hg_to_push

[paths]
default = http://localhost:8002/       # 用于pulling
default-push = http://localhost:8002/  # 被推送端的 web 服务地址
</code></pre><p>当推送遇到错误时，可尝试</p>
<pre><code>hg push -f
</code></pre><p>当更新遇到错误时，可尝试</p>
<pre><code>hg update --check
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Underscore.js]]></title>
      <url>http://yardfarmer.github.io/2015/01/12/2015-03-22-underscore%E6%8E%A5%E5%8F%A3%E7%90%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>##简介<br><a href="http://underscorejs.org/" target="_blank" rel="external">Underscore.js</a>是一个灵巧的工具库。它提供了几十种函数式编程的方法，大大方便了JavaScript的编程。MVC框架Backbone.js就将这个库作为自己的工具库。除了可以在浏览器环境使用，Underscore.js还可以用于Node.js。<br>Underscore.js定义了一个下划线（_）对象，函数库的所有方法都属于这个对象。这些方法大致上可以分成：集合（collection）、数组（array）、函数（function）、对象（object）和工具（utility）五大类。 </p>
<p>##接口示例</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> &gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span> &gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> &gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span> &gt;</span><span class="tag">&lt;/<span class="name">title</span> &gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../underscore-reading.js"</span> &gt;</span><span class="handlebars"><span class="xml"><span class="tag">&lt;/<span class="name">script</span> &gt;</span></span></span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span> &gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> &gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"underscore_button"</span>&gt;</span>test button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"throttle_button"</span>&gt;</span>throttle button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"debounce_button"</span>&gt;</span>debounce button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     *  [].forEach(function(value, key, list) &#123; &#125;)</div><div class="line">     */</div><div class="line">    <span class="keyword">var</span> testData = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>];</div><div class="line"></div><div class="line">    _.each(testData, <span class="function"><span class="keyword">function</span>(<span class="params">value, key, list</span>) </span>&#123;</div><div class="line">    <span class="comment">//  console.log(arguments);</span></div><div class="line">    &#125;);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// map 映射, 返回新的数组</span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> eighted = _.map(testData, <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</div><div class="line">      <span class="keyword">return</span> num * <span class="number">8</span>;</div><div class="line">    &#125;);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'mapped'</span>, eighted, testData);</div><div class="line"></div><div class="line">    <span class="comment">// 数组拷贝</span></div><div class="line">    <span class="keyword">var</span> cpData = testData.slice(<span class="number">0</span>);</div><div class="line">    cpData.pop();</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'copy'</span>, testData, cpData)</div><div class="line"></div><div class="line">    <span class="comment">//_.reduce(list, iteratee(memo, value, key, list), [memo], context);</span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> rst = _.reduce(testData, <span class="function"><span class="keyword">function</span>(<span class="params">memo, value, key, list</span>) </span>&#123;</div><div class="line">       <span class="comment">// console.log(arguments);</span></div><div class="line">        <span class="keyword">return</span> memo + value;</div><div class="line">    &#125;);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'fib'</span>,rst);</div><div class="line"></div><div class="line">    <span class="comment">// _.find(list, predicate, [context])</span></div><div class="line">    <span class="keyword">var</span> back  = _.find(testData, <span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> num &gt; <span class="number">5</span>;</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'back'</span>, back);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">var</span> objData = [</div><div class="line">        &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>, <span class="attr">c</span>:<span class="number">1</span>&#125;,</div><div class="line">        &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>, <span class="attr">c</span>:<span class="number">2</span>&#125;,</div><div class="line">        &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>, <span class="attr">c</span>:<span class="number">3</span>&#125;</div><div class="line">    ];</div><div class="line"></div><div class="line">    <span class="keyword">var</span> t = _.where(objData, &#123;<span class="attr">c</span>:<span class="number">1</span>&#125;);</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"where"</span>, t);</div><div class="line"></div><div class="line">    <span class="comment">// 从 `map` 中按名取值, pluck 快而猛的拉，从...中抽拔</span></div><div class="line">    <span class="keyword">var</span> stooges = [&#123;<span class="attr">name</span>: <span class="string">'moe'</span>, <span class="attr">age</span>: <span class="number">40</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">'larry'</span>, <span class="attr">age</span>: <span class="number">50</span>&#125;,</div><div class="line">                   &#123;<span class="attr">name</span>: <span class="string">'curly'</span>, <span class="attr">age</span>: <span class="number">60</span>&#125;];</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"pluck"</span>, _.pluck(stooges, <span class="string">'name'</span>));</div><div class="line"></div><div class="line">    <span class="comment">// 返回除去后 n 位的部分</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"initial,"</span>, _.initial([<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>], <span class="number">2</span>));</div><div class="line"></div><div class="line">    <span class="comment">// 与 initial 相对</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"rest"</span>, _.rest([<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>], <span class="number">2</span>));</div><div class="line"></div><div class="line">    <span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params">greeting</span>) </span>&#123;<span class="keyword">return</span> greeting + <span class="string">":"</span> + <span class="keyword">this</span>.name &#125;;</div><div class="line">    func = _.bind(func, &#123;<span class="attr">name</span>: <span class="string">'im obj'</span>&#125;, <span class="string">'[this is arguments]'</span>);</div><div class="line">    <span class="comment">// 已经被过河拆桥</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'bind 返回新的 function '</span>, func());</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">var</span> buttonView = &#123;</div><div class="line">        <span class="attr">label</span>  : <span class="string">'underscore'</span>,</div><div class="line">        <span class="comment">// 通过 e.target  可以得到目标元素， this 真的是意义不到</span></div><div class="line">        <span class="comment">// be invoked with a fairly useless this.</span></div><div class="line">        onClick: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'bindAll'</span>, <span class="keyword">this</span>.label, e.target) &#125;,</div><div class="line">        <span class="attr">onHover</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="string">'hovering: '</span> + <span class="keyword">this</span>.label); &#125;</div><div class="line">    &#125;;</div><div class="line">    _.bindAll(buttonView, <span class="string">'onClick'</span>, <span class="string">'onHover'</span>);</div><div class="line">    <span class="comment">// When the button is clicked, this.label will have the correct value.</span></div><div class="line"></div><div class="line">    underscore_button.addEventListener(<span class="string">'click'</span>, buttonView.onClick, <span class="literal">false</span>);</div><div class="line">    underscore_button.addEventListener(<span class="string">'hover'</span>, buttonView.onHover, <span class="literal">false</span>);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">"partial"</span> ,a ,b)&#125;;</div><div class="line"></div><div class="line">    <span class="comment">// 这个 arguments* 这里的参数在包裹的内部函数的最前面</span></div><div class="line">    <span class="comment">// _.partial(function, *arguments)</span></div><div class="line">    add5 = _.partial(add, <span class="number">5</span>, <span class="number">4</span>); <span class="comment">//</span></div><div class="line">    add5(<span class="number">1</span>,<span class="number">2</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 在递归中会缓存方法的计算结果，达到类似 map 缓存的效果</span></div><div class="line">    <span class="keyword">var</span> fibonacci = _.memoize(<span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> n &lt; <span class="number">2</span> ? n: fibonacci( n - <span class="number">1</span>) + fibonacci(n - <span class="number">2</span>);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"memoize"</span>, fibonacci(<span class="number">100</span>));</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> n &lt; <span class="number">2</span> ? n: fibonacci( n - <span class="number">1</span>) + fibonacci(n - <span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"fibonacci"</span>, fibonacci(<span class="number">100</span>));</div><div class="line"></div><div class="line">    <span class="keyword">var</span> log = _.bind(<span class="built_in">console</span>.log, <span class="built_in">console</span>);</div><div class="line">    _.delay(log, <span class="number">1000</span>, <span class="string">'delay'</span>,<span class="string">'log latter'</span>);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">var</span> throttled = _.throttle(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        log(<span class="string">'throttle'</span>);</div><div class="line">    &#125;, <span class="number">3000</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</div><div class="line">        throttled();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 延时按钮, 处理频繁点击,加上限流阀</span></div><div class="line">    throttle_button.addEventListener(<span class="string">'click'</span>, throttled, <span class="literal">false</span>);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// 每次执行间隔指定时间, 在间隔时间内对方法调用不再执行，</span></div><div class="line">    <span class="comment">// 但是会把间隔时间的起点设置为此次对方法调用的时间</span></div><div class="line">    <span class="comment">// 举例来说：下面这个情况， 每个2999 毫秒 单击一次，</span></div><div class="line">    <span class="comment">// 不满足每个3000秒的时间间隔, 故回调不执行</span></div><div class="line">    <span class="comment">// 即使每隔 2999 毫秒店家1000次，也只会在最后一次单击 3000ms 后，</span></div><div class="line">    <span class="comment">// 才能正常执行回调</span></div><div class="line">    <span class="comment">// 所以 debounce 适合用于 resize, 在窗口不再改变后执行就好了, 在</span></div><div class="line">    <span class="comment">// 移动中执行也没有意义</span></div><div class="line">    <span class="comment">// 另外适合输入框取值, 如果输入框一直在 change, 拿到值也没用, 所以在不变化执行就可以了。</span></div><div class="line">    <span class="keyword">var</span> slowClick = _.debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        log(<span class="string">"click"</span>, <span class="string">"_debounce"</span>);</div><div class="line">    &#125;, <span class="number">3000</span>);</div><div class="line"></div><div class="line">    debounce_button.addEventListener(<span class="string">'click'</span>, slowClick, <span class="literal">false</span>);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// after:  在已经被掉了 指定次数 后，才执行</span></div><div class="line">    <span class="comment">// api 示例说适用于 异步处理, 在所有任务都完成时才执行。</span></div><div class="line">    <span class="keyword">var</span> render = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;log(<span class="string">'after'</span>)&#125;;</div><div class="line">    <span class="keyword">var</span> renderJob = _.after(<span class="number">5</span>, render);</div><div class="line">    _.each([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>], <span class="function"><span class="keyword">function</span>(<span class="params">job</span>) </span>&#123;</div><div class="line">        renderJob();</div><div class="line">    &#125;)</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// wrapper 注入/ AOP 切面编程</span></div><div class="line">    <span class="keyword">var</span> hello = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123; <span class="keyword">return</span> <span class="string">"hello: "</span> + name; &#125;;</div><div class="line">    hello = _.wrap(hello, <span class="function"><span class="keyword">function</span>(<span class="params">func</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"before, "</span> + func(<span class="string">"moe"</span>) + <span class="string">", after"</span>;</div><div class="line">    &#125;);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"wrap"</span>, hello());</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// compose, 组合模式/  像极管道 大管子</span></div><div class="line">    <span class="keyword">var</span> greet    = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123; <span class="keyword">return</span> <span class="string">"hi: "</span> + name; &#125;;</div><div class="line">    <span class="keyword">var</span> exclaim  = <span class="function"><span class="keyword">function</span>(<span class="params">statement</span>)</span>&#123; <span class="keyword">return</span> statement.toUpperCase() + <span class="string">"!"</span>; &#125;;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Caution!</div><div class="line">     * _.compose(f, g, h);</div><div class="line">     * 数据流为  f() &lt;- g() &lt;- h();</div><div class="line">     * f(), g(), and h() produces f(g(h())).</div><div class="line">     */</div><div class="line">    <span class="keyword">var</span> welcome = _.compose(log, greet, exclaim);</div><div class="line">    <span class="keyword">var</span> moe = welcome(<span class="string">'moe'</span>);</div><div class="line">    <span class="comment">//log('compose:' ,moe);</span></div><div class="line"></div><div class="line">    <span class="comment">// 对象 extend</span></div><div class="line">    <span class="keyword">var</span> big = _.extend(&#123;<span class="attr">x</span>: <span class="number">1</span>&#125;, &#123;<span class="attr">y</span>: <span class="number">2</span>&#125;);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'extend'</span>, big);</div><div class="line"></div><div class="line">    <span class="comment">// 给对象设置默认参数, 只给设置对象原本不存在的参数</span></div><div class="line">    <span class="keyword">var</span> iceCream = &#123;<span class="attr">flavor</span>: <span class="string">"chocolate"</span>&#125;;</div><div class="line">    _.defaults(iceCream, &#123;<span class="attr">flavor</span>: <span class="string">"vanilla"</span>, <span class="attr">sprinkles</span>: <span class="string">"lots"</span>&#125;);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">var</span> tapData = _.chain(testData)</div><div class="line">            .filter(<span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> num &gt; <span class="number">5</span>;</div><div class="line">            &#125;)</div><div class="line">            .tap(log)</div><div class="line">            <span class="comment">// 多中间数据没有改变</span></div><div class="line">            .tap(<span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'tapped: '</span>, num); <span class="keyword">return</span> num * <span class="number">2</span>; &#125;)</div><div class="line">            .tap(log)</div><div class="line">            .map(<span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123; <span class="keyword">return</span> num * num; &#125;)</div><div class="line">            .value();</div><div class="line">    log(<span class="string">"tapData"</span>, tapData);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// 扩展 underscore</span></div><div class="line">    <span class="comment">// underscore 扩展接口, 方便实用</span></div><div class="line">    _.mixin(&#123;</div><div class="line">        <span class="attr">hello</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"mixin: "</span>, <span class="string">"have a good time!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">    _.hello();</div><div class="line">    _(<span class="string">""</span>).hello();</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// &lt;%= someThing %&gt;</span></div><div class="line">    <span class="comment">// 模板的使用</span></div><div class="line">    <span class="keyword">var</span> compiled = _.template(<span class="string">"hello: &lt;%= name %&gt;"</span>);</div><div class="line">    log(compiled(&#123; <span class="attr">name</span>: <span class="string">"moe"</span> &#125;));</div><div class="line"></div><div class="line">    <span class="keyword">var</span> lyrics = [</div><div class="line">        &#123;<span class="attr">line</span>: <span class="number">1</span>, <span class="attr">words</span>: <span class="string">"I'm a lumberjack and I'm okay"</span>&#125;,</div><div class="line">        &#123;<span class="attr">line</span>: <span class="number">2</span>, <span class="attr">words</span>: <span class="string">"I sleep all night and I work all day"</span>&#125;,</div><div class="line">        &#123;<span class="attr">line</span>: <span class="number">3</span>, <span class="attr">words</span>: <span class="string">"He's a lumberjack and he's okay"</span>&#125;,</div><div class="line">        &#123;<span class="attr">line</span>: <span class="number">4</span>, <span class="attr">words</span>: <span class="string">"He sleeps all night and he works all day"</span>&#125;</div><div class="line">    ];</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// 我没有任何天分， 我只有梦的天真</span></div><div class="line">    <span class="comment">// 输掉目标， 不能输掉人生</span></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * _.map([1, 2, 3], function(n)&#123; return n * 2; &#125;);</div><div class="line">     * _([1, 2, 3]).map(function(n)&#123; return n * 2; &#125;);</div><div class="line">     * 这其实是 underscore 的两种使用方式，回调式的和链式的</div><div class="line">     *</div><div class="line">     *  Returns a wrapped object.</div><div class="line">     *  Calling methods on this object will continue to return wrapped objects</div><div class="line">     *  until value is called.</div><div class="line">     *</div><div class="line">     *  这里 wrapped object 其实是 类似 jQ 对象的一个包裹后的对象,</div><div class="line">     *  本质就是挂载了 underscore 接口的 prototype</div><div class="line">     *  之所以挂载 prototype 是因为, 为了实现链式操作</div><div class="line">     */</div><div class="line"></div><div class="line">    <span class="keyword">var</span> chainData = _.chain(lyrics);</div><div class="line">    log(<span class="string">"chain, return a wrapped data:"</span>, chainData);</div><div class="line">    log(<span class="string">"chain, back to original data:"</span>, chainData.value());</div><div class="line"></div><div class="line">    <span class="keyword">var</span> d = chainData.map(<span class="function"><span class="keyword">function</span>(<span class="params"> line </span>) </span>&#123; <span class="keyword">return</span> line.words.split(<span class="string">' '</span>); &#125;)</div><div class="line">            .flatten()</div><div class="line">            <span class="comment">// reduce(data, function(memo, value, key , list))</span></div><div class="line">            .reduce(<span class="function"><span class="keyword">function</span>(<span class="params">counts, word</span>) </span>&#123; <span class="comment">// 实际参数为： memo, value, key, list</span></div><div class="line">                <span class="comment">// 通过 log, 可以很清楚的看清 reduce 是怎么回事。</span></div><div class="line">                <span class="comment">// log('inner reduce', counts, word);</span></div><div class="line"></div><div class="line">                counts[word] = (counts[word] || <span class="number">0</span>) + <span class="number">1</span>;</div><div class="line">                <span class="keyword">return</span> counts;</div><div class="line">            &#125;, &#123;&#125;) <span class="comment">// 这里的 `&#123;&#125;` 作为 前面 `iteratee` 回调参数中 memo 的初始值。</span></div><div class="line">            .value();</div><div class="line">    log(<span class="string">'chain compute'</span>, d);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span> &gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span> &gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[web-animations]]></title>
      <url>http://yardfarmer.github.io/2015/01/11/2015-03-22-web-animations/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Web Animations defines APIs for synchronizing several of the web’s animation models with complex, scriptable animations.</p>
</blockquote>
<p>在 Web 平台上有四种技术可实现动画：CSS Transitions, CSS Animations, SVG Animations / SMIL, and requestAnimationFrame().<br>但是 </p>
<ul>
<li>CSS Transitions / CSS Animations 表现能力不足,无法并行运行，不能用 script 控制.</li>
<li>SVG Animations are  有表现力，但是编写复杂， can’t be applied to HTML content.</li>
<li>requestAnimationFrame() is not a declarative approach, 运行在主线程，主线程忙时，会卡顿</li>
</ul>
<p>于是，w3c 搞出了替代品</p>
<p>Basic usage<br>Here’s a simple example of an animation that scales and changes the opacity of a <div> over 0.5 seconds. The animation alternates producing a pulsing effect.</div></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pulse"</span> <span class="attr">style</span>=<span class="string">"width:150px;"</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="keyword">var</span> elem = <span class="built_in">document</span>.querySelector(<span class="string">'.pulse'</span>);</div><div class="line">  <span class="keyword">var</span> player = <span class="built_in">document</span>.timeline.play(<span class="keyword">new</span> Animation(elem, [</div><div class="line">      &#123;<span class="attr">opacity</span>: <span class="string">"0.5"</span>, <span class="attr">transform</span>: <span class="string">"scale(0.5)"</span>&#125;, </div><div class="line">      &#123;<span class="attr">opacity</span>: <span class="string">"1.0"</span>, <span class="attr">transform</span>: <span class="string">"scale(1)"</span>&#125;</div><div class="line">    ],</div><div class="line">    &#123;</div><div class="line">      <span class="attr">direction</span>: <span class="string">"alternate"</span>, <span class="attr">duration</span>: <span class="number">500</span>, <span class="attr">iterations</span>: <span class="literal">Infinity</span></div><div class="line">    &#125;));</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>还未正式发布，浏览器兼容不全，需要<code>刮腻子</code>.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[polymer的使用]]></title>
      <url>http://yardfarmer.github.io/2015/01/03/2015-01-3-polymer/</url>
      <content type="html"><![CDATA[<h2 id="结构搭建"><a href="#结构搭建" class="headerlink" title="结构搭建"></a>结构搭建</h2><h3 id="加载引用文件"><a href="#加载引用文件" class="headerlink" title="加载引用文件"></a>加载引用文件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span></span></div><div class="line">  <span class="attr">src</span>=<span class="string">"../components/platform/platform.js"</span>&gt;<span class="handlebars"><span class="xml"></span></span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"import"</span></span></div><div class="line">  <span class="attr">href</span>=<span class="string">"../components/font-roboto/roboto.html"</span>&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"import"</span></span></div><div class="line">  <span class="attr">href</span>=<span class="string">"../components/core-header-panel/core-header-panel.html"</span>&gt;</div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"import"</span></span></div><div class="line">  <span class="attr">href</span>=<span class="string">"../components/core-toolbar/core-toolbar.html"</span>&gt;</div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"import"</span></span></div><div class="line">  <span class="attr">href</span>=<span class="string">"../components/paper-tabs/paper-tabs.html"</span>&gt;</div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div></pre></td></tr></table></figure>
<p>Polymer 使用 HTML imports 来加载 components. HTML imports 提供了依赖关系的管理，保证你的 elements 和它们的依赖都加载好了你再使用它们。</p>
<h3 id="预防-FOUC"><a href="#预防-FOUC" class="headerlink" title="预防 FOUC"></a>预防 FOUC</h3><p>在 custom elements 更新 之前可能显示错乱。 为了缓解 FOUC 问题, Polymer 提供了一个 polyfill 解决方案，配合 :unresolved 伪类 使用。 对于简单的 app，你可以为 body 添加 unresolved 属性。这将在页面初始化时隐藏页面直到所有的 elements 被更新才显示。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">unresolved</span>&gt;</span></div></pre></td></tr></table></figure>
<p>polymer-ready 触发前， Polymer 会执行以下的步骤：</p>
<ul>
<li>移除 elements 中 [unresolved] 属性</li>
<li>添加 [resolved] 属性</li>
<li>在 element 收到第一个  transitionend 时移除 [resolved]</li>
</ul>
<h3 id="声明式数据绑定"><a href="#声明式数据绑定" class="headerlink" title="声明式数据绑定"></a>声明式数据绑定</h3><p><code>胡子</code> 方式， mustache(有一款同名的模板引擎mustache.js)</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">polymer-element</span> <span class="attr">name</span>=<span class="string">"name-tag"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">    This is <span class="tag">&lt;<span class="name">b</span>&gt;</span>&#123;&#123;owner&#125;&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span>'s name-tag element.</div><div class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line">    Polymer(<span class="string">'name-tag'</span>, &#123;</div><div class="line">      owner: <span class="string">'Daniel'</span></div><div class="line">    &#125;);</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">polymer-element</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="自动化定位结点"><a href="#自动化定位结点" class="headerlink" title="自动化定位结点"></a>自动化定位结点</h3><p>Polymer 另一个给力的功能是自动化定位结点。一个 component 的 shadow DOM 中标有 id 特性的结点可以被自动引用在该 component 的 this.$ 散列表中。</p>
<p>注意：通过数据绑定动态创建的结点<em>无法</em>被添加到 this.$ 散列表中。该散列表只包含<em>静态</em>创建的 shadow DOM 结点 (即定义在 element 外部的模板中的结点)。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">polymer-element</span> <span class="attr">name</span>=<span class="string">"x-form"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"nameInput"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    Polymer(<span class="string">'x-form'</span>, &#123;</div><div class="line">      <span class="attr">logNameValue</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.$.nameInput.value);</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">polymer-element</span>&gt;</span></div></pre></td></tr></table></figure>
<p>为了定位 element 的 shadow DOM 里的其它结点，你可以创建一个带有确定<code>id</code> 的容器 element，然后使用 querySelector 来获取子孙。举个例子，如果你的 element 的模板是下面这个样子：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">if</span>=<span class="string">"&#123;&#123;some_condition&#125;&#125;"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"inner"</span>&gt;</span></div><div class="line">        该内容通过数据绑定被创建</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div></pre></td></tr></table></figure>
<p>你可以在容器内这样定位：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">this.$.container.querySelector('#inner');</div></pre></td></tr></table></figure>
<h3 id="触发自定义事件"><a href="#触发自定义事件" class="headerlink" title="触发自定义事件"></a>触发自定义事件</h3><p>Polymer core 提供了一个便捷的 fire() 方法传递自定义事件。实际上这是一个围绕标准的 node.dispatchEvent(new CustomEvent(…)) 包装出来的。当需要在一个微任务完成之后触发一个事件，请使用其异步的版本：asyncFire()。</p>
<p>例如：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"import"</span> <span class="attr">href</span>=<span class="string">"bower_components/polymer/polymer.html"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">polymer-element</span> <span class="attr">name</span>=<span class="string">"ouch-button"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">on-click</span>=<span class="string">"&#123;&#123;onClick&#125;&#125;"</span>&gt;</span>GO<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line">        Polymer(<span class="string">'ouch-button'</span>, &#123;</div><div class="line">            onClick: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">				<span class="comment">// fire(inType, inDetail, inToNode)</span></div><div class="line">                <span class="keyword">this</span>.fire(<span class="string">'ouch'</span>, &#123;</div><div class="line">                    msg: <span class="string">'hahaha'</span></div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">polymer-element</span>&gt;</span></div></pre></td></tr></table></figure>
<p>index.html</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bower_components/platform/platform.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"import"</span> <span class="attr">href</span>=<span class="string">"self_event_ref.html"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">ouch-button</span>&gt;</span><span class="tag">&lt;/<span class="name">ouch-button</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="built_in">document</span>.querySelector(<span class="string">'ouch-button'</span>).addEventListener(<span class="string">'ouch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(e.type, e.detail.msg);</div><div class="line">  &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li>中文站 <a href="http://docs.polymerchina.org/docs/start/getting-the-code.html" target="_blank" rel="external">polymerchina</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[http学习札记]]></title>
      <url>http://yardfarmer.github.io/2014/12/30/2013-12-30-http%E5%AD%A6%E4%B9%A0%E6%9C%AD%E8%AE%B0/</url>
      <content type="html"><![CDATA[<blockquote>
<p>HTTP 报文会像河水一样流动。不管是请求报文还是响应报文，所有报文都会向下游（downstream） 流动。所有报文的发送者都在接收者的上游。</p>
</blockquote>
<p>HTTP 报文是简单的格式化数据块。</p>
<p>报文块由三个部分组成：</p>
<pre><code>1. 对报文进行描述的起始行（start line）、 //  HTTP/1.0 200 OK
2. 包含属性的首部（header）块，{
    Content-type: text/plain
    Content-length: 100
}
3. 以及可选的、包含数据的主体（body）部分。(get 没有数据主体).
</code></pre><p>起始行和首部就是由行分隔的ASCII 文本。<br>每行都以一个由两个字符组成的行终止序列(CRLF, Carriage Return Line Feed)作为结束，其中包括一个回车符（ASCII 码13）和一个换行符（ASCII 码10）。</p>
<p>所有的HTTP 报文都可以分为两类： 请求报文（request message） 和响应报文（response message）。<code>本质就是 socket</code>。</p>
<ul>
<li>GET  从服务器获取一份文档        不包含主体</li>
<li>POST 向服务器发送需要处理的数据  包含主体 </li>
<li>HTTP 报文可以承载很多类型的数字数据：图片、视频、HTML 文档、软件应用程序、信用卡事务、电子邮件等。</li>
<li>POST 方法起初是用来向服务器输入数据的.</li>
</ul>
<p>重定向状态码要么告知客户端使用替代位置来访问他们所感兴趣的资源，要么就提供一个替代的响应而不是资源的内容。<br>如果资源已被移动，可发送一个重定向状态码和一个可选的Location 首部来告知客户端资源已被移走，以及现在可以在哪里找到它。<br>浏览器就可以在不打扰使用者的情况下，透明地转入新的位置了。(地址栏直接跳转).</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">Remote</span> <span class="selector-tag">Address</span><span class="selector-pseudo">:128.121.66.211</span><span class="selector-pseudo">:80</span> (通过ip-&gt;dns查询来的)</div><div class="line"><span class="selector-tag">Request</span> <span class="selector-tag">URL</span><span class="selector-pseudo">:http</span>:<span class="comment">//www.joes-hardware.com/pet-products.txt</span></div><div class="line"><span class="selector-tag">Request</span> <span class="selector-tag">Method</span><span class="selector-pseudo">:GET</span></div><div class="line"><span class="selector-tag">Status</span> <span class="selector-tag">Code</span><span class="selector-pseudo">:301</span> <span class="selector-tag">Moved</span> <span class="selector-tag">Permanently</span></div><div class="line"><span class="selector-tag">RequestHeaders</span></div><div class="line"><span class="comment">// Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span></div><div class="line"><span class="comment">// Accept-Encoding:gzip,deflate,sdch</span></div><div class="line"><span class="comment">// Accept-Language:en,zh-CN;q=0.8,zh;q=0.6,ja;q=0.4</span></div><div class="line"><span class="comment">// Cache-Control:no-cache</span></div><div class="line"><span class="comment">// Connection:keep-alive</span></div><div class="line"><span class="comment">// DNT:1</span></div><div class="line"><span class="comment">// Host:www.joes-hardware.com</span></div><div class="line"><span class="comment">// Pragma:no-cache</span></div><div class="line"><span class="comment">// User-Agent:Mozilla/5.0</span></div><div class="line"></div><div class="line"><span class="selector-tag">ResonseHeaders</span></div><div class="line"><span class="comment">// Connection:Keep-Alive</span></div><div class="line"><span class="comment">// Content-Length:377</span></div><div class="line"><span class="comment">// Content-Type:text/html; charset=iso-8859-1</span></div><div class="line"><span class="comment">// Date:Wed, 01 Oct 2014 15:22:05 GMT</span></div><div class="line"><span class="comment">// Keep-Alive:timeout=15, max=98</span></div><div class="line"><span class="comment">// Location:http://www.gentle-grooming.com/</span></div><div class="line"><span class="comment">// Server:Apache/2.2.22 (Unix) DAV/2 FrontPage/5.0.2.2635 mod_ssl/2.2.22 OpenSSL/1.0.1h</span></div></pre></td></tr></table></figure>
<p>Location 用于跳转,在相应的 header 中直接提供了 Location 跳转的 url </p>
<p>301 Moved Permanently 在请求的URL 已被移除时使用。响应的Location 首部中应该包含资源现在所处的URL.</p>
<p>304 Not Modified 客户端可以通过所包含的请求首部，使其请求变成有条件的。<br>如果客户端发起了一个条件GET请求，而最近资源未被修改的话，就可以用这个状态码来说明资源未被修改。<br>带有这个状态码的响应不应该包含实体的主体部分。</p>
<p>标识为no-cache 的响应实际上是可以存储在本地缓存区中的。只是在与原始服务器进行新鲜度再验证之前，缓存不能将其提供给客户端使用。</p>
<p>HTTP/1.1 中提供Pragma: no-cache 首部是为了兼容于HTTP/1.0+。除了与只理解Pragma: no-cache 的HTTP/1.0 应用程序进行交互时，HTTP 1.1 应用程序都应该使用 Cache-Control: no-cache.</p>
<p>Cache-Control: max-age 首部表示的是从服务器将文档传来之时起，可以认为此文档处于新鲜状态的秒数.</p>
<p>服务器可以请求缓存不要缓存文档，或者将最大使用期设置为零，从而在每次访问的时候都进行刷新：<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Cache</span><span class="params">-Control</span>: <span class="keyword">max</span><span class="params">-age</span>=<span class="number">0</span></div></pre></td></tr></table></figure></p>
<p>http-equiv 元信息告诉浏览器如何去做，等效于设置了HTTP 报头。<br>这让你可以向浏览器传达一些原本由服务器告诉它的内容。当你不能控制服务器时，它特别有用。 (这句话很有内容，请求网页使，服务器在响应头里是可以设置属性的，但是如果没有设置。同样也可以在 header 里设置上。效果一样。)</p>
<p>例如，如果你想设置一个缓存头，但又不能控制服务器，你可以使用http-equiv 属性：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"expires"</span> <span class="attr">content</span>=<span class="string">"Wed, 05 August 2020 00:00:00 GMT"</span>&gt;</span>.</div></pre></td></tr></table></figure></p>
<p>http-equiv 属性是 http 协议的响应头报文，此属性出现在 meta 标签中。属性值用 content 属性描述当浏览器等设备接收服务器端传送的文件时，首先会接收文件的相关”(名称/值对)”，通常为多个。<br>所有服务器都至少要发送一个：<code>content-type:text/html</code>。这将告诉浏览器准备接受一个 HTML 文档。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"refresh"</span> <span class="attr">content</span>=<span class="string">"5"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"refresh"</span> <span class="attr">content</span>=<span class="string">"5; url=http://www.a.com/"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"pragma"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>会产生：<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Cache</span><span class="params">-Control</span>:<span class="keyword">max</span><span class="params">-age</span>=<span class="number">0</span></div></pre></td></tr></table></figure></p>
<p>no-store 在response 头中是为了声明不让浏览器 存储这次响应的信息。<br>max-age 这个声明过期时间的。单位为秒 0 肯定就是不缓存了。<br>两个选项对于Cache 系统来说。都是比较有用的。</p>
<p>关于 session，cookie，jsessionid 的关系。 session 就是 httpsession，服务器端的， cookie 就是浏览器端的。</p>
<p>在 servlet 里使用了</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">HttpSession session</span> = request.getSession();</div><div class="line"><span class="attribute">String sessionid</span> = session.getId();</div></pre></td></tr></table></figure>
<p>获取了 session ，即使没有在 session 里设置数据，那么在响应里也会去设置 cookie。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">Server:</span>Apache-Coyote/<span class="number">1.1</span></div><div class="line">Set-<span class="string">Cookie:</span>JSESSIONID=<span class="number">3</span>B44FEAE6B662D94F4F23DD8EC2D2697; Path=<span class="regexp">/nodeA/</span>; HttpOnly</div></pre></td></tr></table></figure>
<p>并且有意思的是：如果在浏览器里把 cookie 删掉，那么下一次给服务器发请求，那么必然不会带着 cookie。所以服务器在没有 cookie 的请求中会在响应(因为没有把 cookie 中的 sessionid 带上，那么服务器认为这个客户端还没有对应的 session，于是发一个 session 给这个客户端，并且在返回响应的时候顺便设置在 cookie 上)的时候给带上 cookie（sessionid）。</p>
<p>如果客户端在请求的时候把 cookie(seessionid)带上了，那么服务器就不会在响应中设置 cookie 了。如果浏览器把 cookie 禁用了，那么新的 cookie 是存不到浏览器的，响应的时候带着 cookie 也不管用，存不上。  但是禁用cookie 后，浏览器中存储的囤积的还是可以发送出去的。 </p>
<p>那么问题来了，浏览器把 cookie 禁用了怎么办？ 请求的时候把 sessionid 存放到,貌似没有什么好办法，因为禁用 cookie，服务器的 sessionid 传不进来。在禁用 cookie 的情况下，taobao 登陆不上去，页面显示有问题。 amazon，jd 直接在登陆界面提示，不设置 cookie 登陆不进去。</p>
<p>首部 Referer 请求用户是从这个页面上依照链接跳转过来的. Referer 首部提供了用户来源页面的 URL。改动后包含了用户状态信息的URL 被称为胖URL（fat URL）。</p>
<p>可以笼统地将cookie 分为两类： 会话cookie 和持久cookie。会话cookie 是一种临时cookie，它记录了用户访问站点时的设置和偏好。用户退出浏览器时，会话 cookie 就被删除了。</p>
<p>持久cookie 的生存时间更长一些；它们存储在硬盘上，浏览器退出，计算机重启时它们仍然存在。通常会用持久cookie 维护某个用户会周期性访问的站点的配置文件或登录名。</p>
<p>如果设置了Discard 参数，或者没有设置Expires 或Max-Age 参数来说明扩展的客户端识别与cookie机制过期时间，这个cookie 就是一个会话cookie。</p>
<p>浏览器会记住从服务器返回的Set-Cookie 或Set-Cookie2 首部中的cookie 内容，并将cookie 集存储在浏览器的 cookie 数据库中,将来用户返回同一站点时,浏览器会挑中那个服务器贴到用户上的那些cookie，并在一个cookie 请求首部中将其传回去。 </p>
<p>浏览器只向服务器发送服务器产生的那些cookie。(谁拿来的，再给谁拿回去)</p>
<p>版本 0 的Cookie首部客户端发送请求时，会将所有与域、路径和安全过滤器相匹配的未过期cookie 都发送给这个站点。<br>所有cookie 都被组合到一个Cookie 首部中：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Cookie: session-<span class="built_in">id</span>=<span class="number">002</span><span class="number">-1145265</span><span class="number">-8016838</span>; session-<span class="built_in">id</span>-<span class="built_in">time</span>=<span class="number">1007884800</span></div></pre></td></tr></table></figure>
<p>如果客户端既支持版本0 又支持版本1 的cookie，但从服务器获得的是版本0 的<br>Set-Cookie 首部，就应该带着版本0 的Cookie 首部发送cookie。</p>
<p>在绝大多数浏览器中，可以通过检测<br>navigator.cookieEnabled<br>这个属性实现。</p>
<p>但是为 false 也不代表不能用 cookie，只是表示不能使用持久化 cookie<br>“当前浏览会话生命周期” 的非持久化cookie仍然是启用的。</p>
<p>coookie 的作用域并不是局限在浏览器的单个窗口中，它的有效期和整个浏览器进程而不是单个浏览器窗口的有效期一致。</p>
<p>一且设置了有效期，浏览器就会将cookie数据存储在一个文件中，并且直到过了指定的有效期才会删除该文件。</p>
<p>默认情况下， cookie 和创建它的Web页面有关，并对该Web页面以及和该Web页面同目录或者子目录的其他Web页面可见。对其他目录的文件不可见，即使相同域名。如果把路径设置成”/“ , 那么该cookie对 ‘<a href="http://www.example.com`" target="_blank" rel="external">http://www.example.com`</a> 这台Web服务器上的页面都是可见的。</p>
<p>cookie的 path 属性不能被用做访问控制机制。如果一个Web页面想要读取同站点其他页面的cookie ，只要简单地将其他页面以隐藏<code>&lt;iframe&gt;</code>的形式加载进来，随后读取对应文档的cookie就可以了。同源策略限制了跨站的cookie窥探，但是对于同一站点的文档它是完全合法的。</p>
<p>有的大型网站想要子域之间能够互相共享 cookie. 比如， order.example.com 域下的服务器想要读取catalog.example.com域下设置的cookie值。这个时候就需要通过设置cookie的domain属性来达到目的.  比如设置 document.domain = “example.com”</p>
<p><strong> domain属性的默认值是当前Web服务器的主机名.</strong> 由于cookie的名/值中的值是不允许包含分号、逗号和空白符，因此，在存储前一般可以采用JavaScript核心的全局函数 encodeURIComponent() 对值进行编码。</p>
<p>处理 cookie 的技巧：</p>
<ul>
<li>要改变cookie的值，需要使用相同的名字、路径和域，再使新的值重新设置cookie 的值。</li>
<li>delete 将max-age属性指定为0 ，再次设置cookie 。</li>
<li>document.cookie // 返回所有作用在当前文档的所有 cookie ，多个 cookie 的集合的字符串形式。</li>
</ul>
<blockquote>
<p>  <code>RFC 2965</code> 规定 cookie 不超过300个，为每个Web服务器保存的cookie数不能超过20个,数据不能超过4KB, 现代浏览器允许 cookie 超过300个。</p>
</blockquote>
<p>要给当前文档设置 cookie 值，非常简单，只须将cookie属性设置为一个字符串形式的值:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.cookie=<span class="string">'name_self=abc'</span>;</div><div class="line"><span class="built_in">document</span>.cookie=<span class="string">'name_self=abc;max-age=10'</span>; <span class="comment">// 10秒后过期</span></div><div class="line"><span class="built_in">document</span>.cookie=<span class="string">"name_self=abc;max-age=10;path='/path';domain='http://.domain.com';"</span>; <span class="comment">// 10秒后过期,由于设置了 domain 不限于 domain.com/path/xx  path 目录及其子目录的访问，其他子域名也可访问 cookie。</span></div></pre></td></tr></table></figure>
<p>IE5 以及 IE5 以上版本的浏览器是通过在document元素后面附加一个专属的”DHTML行为”来实现客户端存储的。<br>如  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;!--[<span class="keyword">if</span> IE]&gt;</div><div class="line"></div><div class="line">memory.style.behavior = <span class="string">"url('#default#userData')"</span> </div><div class="line"></div><div class="line">&lt;![endif]--&gt;</div></pre></td></tr></table></figure>
<p>附加userData行为。</p>
<h3 id="网络相关的长度问题"><a href="#网络相关的长度问题" class="headerlink" title="网络相关的长度问题"></a>网络相关的长度问题</h3><p>Http  Get方法提交的数据大小长度并没有限制，HTTP协议规范没有对URL长度进行限制。这个限制是特定的浏览器及服务器对它的限制。<br>IE     限制为2083个字符，如果超过这个数字，提交按钮没有任何反应。<br>Firefox 对于Firefox浏览器URL的长度限制为 65536 个字符。<br>Safari  URL最大长度限制为 80000 个字符。<br>Opera   URL最大长度限制为 190000 个字符。<br>Google  URL最大长度限制为 8182 个字符。<br>Apache  能接受最大url长度为 8192 个字符。</p>
<p>Post 长度限制<br>在Tomcat下取消POST大小的限制（Tomcat默认2M）；<br>打开tomcat目录下的conf目录，打开server.xml 文件，修改maxPostSize</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- &lt;meta http-equiv="refresh" content="5" /&gt; --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"refresh"</span> <span class="attr">content</span>=<span class="string">"10;url=http://baidu.com"</span> /&gt;</span></div><div class="line"><span class="comment">&lt;!-- 10表示10秒，0即为立即跳转 --&gt;</span></div></pre></td></tr></table></figure>
<h3 id="解析域名"><a href="#解析域名" class="headerlink" title="解析域名"></a>解析域名</h3><p>首先，浏览器需要知道该网站的IP 地址。它向DNS 服务器发送一个包含域名的请求， 然后DNS 服务器返回给<code>浏览器</code>对应的IP 地址。为了减少DNS 服务器上的负载，并提高性能，DNS 查找机制会被浏览器、设备或设备和服务器之间的路由器和代理服务器缓存。这就是为什么更改DNS 记录可能需要几天才能生效的原因。</p>
<h3 id="浏览器是如何显示页面的？"><a href="#浏览器是如何显示页面的？" class="headerlink" title="浏览器是如何显示页面的？"></a>浏览器是如何显示页面的？</h3><ol>
<li>发起请求 </li>
<li>ip地址 返回给浏览器。</li>
<li><p>然后，浏览器会向由DNS 查找得到的IP 地址的主机发起TCP 连接。然后发送请求。<code>Remote Address:106.38.179.49:80</code>, 请求中包含网址、浏览器信息、浏览器能接受的数据类型（编码和语言），以及所有相关的cookie，包括域和路径的cookie。</p>
</li>
<li><p>发起请求, 浏览器开始下载响应。随着响应流到达，浏览器解析HTML 并识别出更多的资源。然后浏览器开始获取这些资源。</p>
</li>
<li><p>渲染页面,最后浏览器会尽快开始渲染页面。如果页面中外链了CSS 或脚本文件时，浏览器会等到这些文件加载和解析（如果是JavaScript 代码，则还需要执行）完再渲染页面。</p>
</li>
</ol>
<h3 id="为什么页面加载缓慢？"><a href="#为什么页面加载缓慢？" class="headerlink" title="为什么页面加载缓慢？"></a>为什么页面加载缓慢？</h3><p>为什么页面加载缓慢？以下是可能的原因：</p>
<ul>
<li>HTTP 连接数</li>
<li>总的字节数</li>
<li>等待时的渲染阻塞</li>
<li>延迟</li>
<li>缓存能力差</li>
</ul>
<p>我们先把重点放在“网络”选项卡上，它有一个美丽的瀑布图，向我们展示了页面加载时的各种信息。<br>每一栏上的浅色代表的延迟，深色代表下载。</p>
<p>iOS 上的Safari 浏览器支持同一域下的最多 6 个资源并行下载。<br>虽然可以通过添加额外的域名（也许是通过设置别名或子域名）的方式来并行下载更多的文件，但每次请求还是需要承担HTTP 层面的开销。</p>
<p>对于图片，因为下载占到了请求时间的绝大部分，所以并行下载更好。出于这个原因（以及一些其他的原因），在网站上将图像与其他资源置于不同的域下是合理的。<br>(对图片设置 cookie 是完全没有必要的，所以最好给图片单独提供一个域名,可能放在专用的图片服务器上了)</p>
<p>雅虎的Steve Souders 和YSlow 团队发现，为当前域创建两个别名，能允许更多的下载并行，会使大文件下载的性能明显改善。</p>
<p>它的第一次加载必然比部署在多个域下的慢。不过由于每个域都需要进行DNS 查找， 添加太多的域反而会更慢。<br>使用至少两个，至多不超过五个域是YSlow 的经验法则。</p>
<p>如果一个 cookie 与请求的域名或路径相匹配，它会伴随着每次请求发送（即上传）。 所以，如果你在你的域名下的第一个请求中设置了几千字节的cookie，那么此后发送到这个域的每次请求都将把这些字节包含在请求头里，然后发送、解压缩。</p>
<p>服务器还必须在读取请求体之前读取这些cookie。cookie 可以把一个很小的请求变得很大。</p>
<p>高延迟使因请求量大而导致的问题激增，因为每次请求都因延迟增加了往返的时间。</p>
<p>对于低流量的网站 CDN 的帮助不大。 不过，把你的静态文件放在一个单独的没有 cookie 的域下总是有帮助的。<br>所以，如果有条件，务必做到这一点。 如果一个 cookie 与请求的域名或路径相匹配，它会伴随每次请求发送。 所以如果你在你的域名下的第一个请求。 （这里说第一个请求是有原因的，因正常情况下后续的服务器响应是不会再次设置 cookie 的。 没有必要在重新设置。 除非在每次服务器响应的时候强制在 response 里设置了 cookie， 这样才可能在每次的响应头中看到 set-cookie。 酱紫。）</p>
<p>设置了几千个字节的 cookie，那么此后发送到这个域的每次请求都会把这些 cookie 包含在请求头中带回去, 导致 cookie 很耗费资源。</p>
<p>另一个有价值的工具是 Charles proxy（Charlesproxy.com）。<br>Charles 是一个本地工具，能让你检查每一个请求，给请求添加断点，还可以模拟低带宽环境。<br>当开发工具没有给出关于HTTP 的更多信息时，Charles 可以帮助你。</p>
<p>pageSpeed 把规则划分为六类：</p>
<ul>
<li>缓存优化，使页面的应用逻辑实现和所需数据一并离线缓存。</li>
<li>往返时间最小化，减少请求响应的周期次数。</li>
<li>请求开销最小化，减少上传数据包大小，（数据包，cookie 在 header 里）</li>
<li>有效负载最小化，减少响应包，下载包和缓存页面的大小。(压缩,图像压缩)</li>
<li>浏览器渲染优化，改进浏览器的页面布局。</li>
<li>移动设备优化，为移动而优化。</li>
</ul>
<blockquote>
<p>对移动端建议：“”延迟 javasript 解析(不必要的 js 不要放在 header)”+“”使首页的重定向可缓存”</p>
</blockquote>
<p>link 标签上的关于媒体查询的css文件，即使查询的结果不合适，也还是会下载的。只不过是不用。</p>
<h2 id="XSS-的防御-输入框验证"><a href="#XSS-的防御-输入框验证" class="headerlink" title="XSS 的防御(输入框验证)"></a>XSS 的防御(输入框验证)</h2><h3 id="什么是-XSS-（cross-site-script）"><a href="#什么是-XSS-（cross-site-script）" class="headerlink" title="什么是 XSS （cross site script）"></a>什么是 XSS （cross site script）</h3><p>为了防止与层叠样式表css混淆，改为 xss； 通常表现为通过输入框插入非法脚本，获取其他用户安全信息。</p>
<p>HTTPOnly ，一个成熟的标准， 浏览器将禁止页面中的 js 访问带有 HTTPOnly 属性的 cookie。<br>IE 6 和 其他现代浏览器均已支持这个标准。所以，HttpOnly 不是用于对抗 XSS，它是用于在 XSS 攻击后，防护 cookie 被读取，从而使大部分 XSS 攻击失去了意义。</p>
<h3 id="一个-cookie-使用的过程大概是这样的："><a href="#一个-cookie-使用的过程大概是这样的：" class="headerlink" title="一个 cookie 使用的过程大概是这样的："></a>一个 cookie 使用的过程大概是这样的：</h3><ol>
<li>浏览器像服务器发起请求，这时没有设置 cookie。</li>
<li>服务器返回发送 Set-Cookie Header， 向客户端浏览器写入 Cookie。</li>
<li>在 cookie 到期前，浏览器发起的所有的请求(即使 ajax，图片)，都会在请求头里写入 cookie。</li>
</ol>
<p>HttpOnly的使用是十分灵活的，它可以只用在最核心的位置。 比如我们的应用中会设置多个 cookie，而 HttpOnly 可以有选择的加在关键 cookie上，实施关键目标重点保护。</p>
<p>给 Cookie 添加 HttpOnly 的代码：</p>
<p>java:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Java:</div><div class="line">		Cookie coki1 = new Cookie("get_acookie_1", "acookieValue");</div><div class="line">		response.addCookie(coki1);</div><div class="line">		Cookie coki2 = new Cookie("get_acookie_2", "acookieValue");</div><div class="line">        // Cookie coki2 = new Cookie("get_acookie_2", "acookieValue;HTTPOnly"); // 这样不管用 </div><div class="line">		coki2.setHttpOnly(true); // ok</div><div class="line">		response.addCookie(coki2);</div><div class="line">C#:</div><div class="line">		HttpCookie ck = new HttpCookie('myCookie');</div><div class="line">		ck.HttpOnly = true;</div><div class="line">		Response.AppendCookie(ck);</div></pre></td></tr></table></figure>
<h3 id="输入检查"><a href="#输入检查" class="headerlink" title="输入检查"></a>输入检查</h3><p>XSS 攻击一般都是在输入框等输入位置输入一些由特殊字符组成的攻击脚本。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[http协议相关知识整理]]></title>
      <url>http://yardfarmer.github.io/2014/12/28/2014-12-28-http%E5%8D%8F%E8%AE%AE%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/</url>
      <content type="html"><![CDATA[<p>##连接</p>
<p>在HTTP 客户端向服务器发送报文之前，需要用网际协议（Internet Protocol，IP） 地址和端口号在客户端和服务器之间建立一条TCP/IP 连接。<br>HTTP 连接实际上就是TCP 连接及其使用规则。TCP 连接是因特网上的可靠连接。TCP 为HTTP 提供了一条可靠的比特传输管道。从TCP 连接一端填入的字节会从另一端以原有的顺序、正确地传送出来。</p>
<p>浏览器访问服务器的过程：</p>
<ol>
<li>浏览器解析出主机名</li>
<li>浏览器查询这个主机名的IP地址（DNS）</li>
<li>浏览器获得端口号（80）</li>
<li>浏览器发起到 x.x.x.x 端口 xx 的连接</li>
<li>浏览器向服务器发送一条HTTP GET报文</li>
<li>浏览器从服务器读取HTTP响应报文</li>
</ol>
<p>HTTP 事务的时延有以下几种主要原因:</p>
<ol>
<li>客户端首先需要根据URI 确定Web 服务器的IP 地址和端口号。如果最近没有对 URI 中的主机名进行访问，通过DNS 解析系统将URI 中的主机名转换成一个IP 地址可能要花费数十秒的时间。</li>
<li>接下来，客户端会向服务器发送一条TCP 连接请求，并等待服务器回送一个请 求接受应答。每条新的TCP 连接都会有连接建立时延。这个值通常最多只有一 两秒钟，但如果有数百个HTTP 事务的话，这个值会快速地叠加上去。</li>
<li>一旦连接建立起来了，客户端就会通过新建立的TCP 管道来发送HTTP 请求。 数据到达时，Web 服务器会从TCP 连接中读取请求报文，并对请求进行处理</li>
</ol>
<p>大多数HTTP 客户端都有一个小的DNS 缓存，用来保存近期所访问站点的IP 地址。如果 已经在本地“缓存”（记录）了IP 地址，查询就可以立即完成。因为大多数Web 浏览器浏览的都是少数常用站点，所以通常都可以很快地将主机名解析出来。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[brick]]></title>
      <url>http://yardfarmer.github.io/2014/12/27/2014-12-27-brick/</url>
      <content type="html"><![CDATA[<p>先占坑。。<br><a href="https://mozbrick.github.io/blog/" target="_blank" rel="external">https://mozbrick.github.io/blog/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[git]]></title>
      <url>http://yardfarmer.github.io/2014/12/25/2014-12-25-git/</url>
      <content type="html"><![CDATA[<p>#分布式版本管理的优点</p>
<p>最初的克隆时间较长,特别是历史记录很长的时候,但最终这个本地镜像备份会带来很多优势.一个显而易见的好处是,当产看一个旧版本时不需要和中心服务器通信.</p>
<h1 id="基本技巧"><a href="#基本技巧" class="headerlink" title="基本技巧"></a>基本技巧</h1><h2 id="git-文件的三种状态"><a href="#git-文件的三种状态" class="headerlink" title="git 文件的三种状态"></a>git 文件的三种状态</h2><ol>
<li>暂存 staged </li>
<li>修改 modify</li>
<li>已提交</li>
</ol>
<p>记录当前状态<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git init</div><div class="line">git add .</div><div class="line">git commit -m <span class="string">"my commit description"</span></div></pre></td></tr></table></figure></p>
<p>回退原来编辑的地方,会退到上次版本提交后的最初状态<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reset --hard</div></pre></td></tr></table></figure></p>
<p>操作是针对本地版本库中已存在文件的操作, 针对已存在本地版本的文件的修改会完全回退,不管是否已经 <code>git add</code>过,<br>针对新加入的文件, add 之前的文件不会删除掉(untracked file: 尚未加入版本控制), add 之后的文件会被抹掉.</p>
<p>git add 操作开始跟踪文件,但是还没有提交版本库, 类似 hibernate 中的持久态, 具有 id,具有 session 管理.<br>在 commit 之前还没有进入到托管的游离态(所以只有 commit 之前可以进行 git reset 操作).<br>add 之前的文件可以看作是 transient 瞬态, 通过 git add 便把无管理的文件进入到持久态, 受到 git 管控.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add NEWFILES</div></pre></td></tr></table></figure>
<p>删除, 将文件从本地目录，缓存区中删除,提交后才会在本地仓库中删除。</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">git</span> rm OLDFILES <span class="comment">#</span></div></pre></td></tr></table></figure>
<p>重命名, 不能进行无版本控制的文件,git 还管控不到</p>
<figure class="highlight cos"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">mv</span> OLDFILES NEWFILES</div></pre></td></tr></table></figure>
<p>看日志</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">log</span></div></pre></td></tr></table></figure>
<p>彻底恢复到指定版本,并且从记录里永久删除掉所有的后续记录</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">reset</span> <span class="comment">--hard SHA1_HASH</span></div></pre></td></tr></table></figure>
<p>简单的恢复到以前的某个状态,穿越回去还能回来:</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">git</span> checkout SHA1_HASH</div></pre></td></tr></table></figure>
<p>checkout 可以回到过去,并且可以保存在过去状态上的更改.但这会开辟新的分支.</p>
<p>回到现实</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout <span class="literal">master</span></div></pre></td></tr></table></figure>
<h2 id="处理分支"><a href="#处理分支" class="headerlink" title="处理分支"></a>处理分支</h2><p>查看分支<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">git branch</span></div></pre></td></tr></table></figure></p>
<p>建立分支<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -<span class="selector-tag">b</span> branchName</div></pre></td></tr></table></figure></p>
<p>关于建立分支,实质上是 checkout 到一个某个状态后, git 自动把你放到一个新的,未命名的分支,<br>这个分支可以用<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -<span class="selector-tag">b</span> branchName</div></pre></td></tr></table></figure></p>
<p>进行对该分支命名.</p>
<p>回到主分支<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout <span class="literal">master</span></div></pre></td></tr></table></figure></p>
<p>切换到某分支<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">git checkout someBranch</span></div></pre></td></tr></table></figure></p>
<p>使用分支工作</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git checkout -b draft  <span class="comment"># 建立分支</span></div><div class="line"><span class="built_in">do</span> some work <span class="keyword">in</span> <span class="keyword">the</span> branch: draft <span class="keyword">and</span> commmit  <span class="comment"># 在分支上工作</span></div><div class="line">git checkout master <span class="comment"># 回到分支 master</span></div><div class="line">git <span class="built_in">merge</span> draft <span class="comment"># 将 draft 分支所做更改合并到主分支</span></div><div class="line">git branch -d draft <span class="comment"># 不再需要这个分支</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[js 纯对象事件]]></title>
      <url>http://yardfarmer.github.io/2014/12/02/2014-12-02-%E7%BA%AF%E5%AF%B9%E8%B1%A1%E4%BA%8B%E4%BB%B6/</url>
      <content type="html"><![CDATA[<blockquote>
<p>如果给单纯的对象加入事件,怎么做?</p>
</blockquote>
<p>我想到了 jQ, addEventListener, emmit …<br>惭愧！</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> PubSub = &#123;</div><div class="line">	<span class="attr">subscribe</span>: <span class="function"><span class="keyword">function</span>(<span class="params">ev, callback</span>) </span>&#123;</div><div class="line">		<span class="comment">// 创建 _callbacks 对象,除非已有</span></div><div class="line">		<span class="keyword">var</span> calls = <span class="keyword">this</span>._callbacks || (<span class="keyword">this</span>._callbacks = &#123;&#125;);</div><div class="line">		(<span class="keyword">this</span>._callbacks[ev] || (<span class="keyword">this</span>._callbacks[ev] = [])).push(callback);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">publish</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>,<span class="number">0</span>);</div><div class="line"></div><div class="line">		<span class="comment">// 拿出第一个参数, 因为第一个参数用于事件名称</span></div><div class="line">		<span class="keyword">var</span> ev = args.shift();</div><div class="line"></div><div class="line">		<span class="keyword">var</span> list, calls, i, lst;</div><div class="line">		<span class="comment">// 不存在该事件,则返回</span></div><div class="line">		<span class="keyword">if</span> (!(calls = <span class="keyword">this</span>._callbacks)) <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">		<span class="keyword">if</span> (!(list = <span class="keyword">this</span>._callbacks[ev])) <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line"></div><div class="line">		<span class="keyword">for</span>( i = <span class="number">0</span>, lst = list.length; i &lt; lst; i++ ) &#123;</div><div class="line">			list[i].apply(<span class="keyword">this</span>, args);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jQueryDeferred对象]]></title>
      <url>http://yardfarmer.github.io/2014/11/16/2014-11-16-deferred/</url>
      <content type="html"><![CDATA[<p>deferred对象代表了将要完成的某种操作，并提供了一些方法，帮助用户使用。它是jQuery对Promises接口的实现。jQuery的所有Ajax操作函数，默认返回的就是一个deferred对象。</p>
<p>简单说，Promises是异步操作的通用接口，扮演代理人（proxy）的角色，将异步操作包装成具有同步操作特性的特殊对象。异步操作的典型例子就是Ajax操作、网页动画、web worker等等。</p>
<p>由于JavaScript单线程的特点，如果某个操作耗时很长，其他操作就必需排队等待。为了避免整个程序失去响应，通常的解决方法是将那些排在后面的操作，写成“回调函数”（callback）的形式。这样做虽然可以解决问题，但是有一些显著缺点：</p>
<ul>
<li>回调函数往往写成函数参数的形式，形成所谓的“持续传递风格”（即参数就是下一步操作，Continuation-passing style），导致函数的输入和输出非常混乱，整个程序的可阅读性差；</li>
<li>回调函数往往只能指定一个，如果有多个操作，就需要改写回调函数。</li>
<li>除了正常的报错机制，错误还可能通过回调函数的形式返回，增加了除错和调试的难度。</li>
<li>正常的函数输入和输出可以区分得很清楚，回调函数使得函数的输出不再重要。</li>
</ul>
<p>Promises就是为了解决这些问题而提出的，它的主要目的就是取代回调函数，成为非同步操作的解决方案。它的核心思想就是让非同步操作返回一个对象，其他操作都针对这个对象来完成。比如，假定ajax操作返回一个Promise对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> promise = get(<span class="string">'http://www.example.com'</span>);</div></pre></td></tr></table></figure>
<p>然后，Promise对象有一个then方法，可以用来指定回调函数。一旦非同步操作完成，就调用指定的回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">promise.then(<span class="function"><span class="keyword">function</span> (<span class="params">content</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(content)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>可以将上面两段代码合并起来，这样程序的流程看得更清楚。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">get(<span class="string">'http://www.example.com'</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">content</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(content)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>在1.5版之前，jQuery的Ajax操作采用回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$.ajax(&#123;</div><div class="line">    <span class="attr">url</span>:<span class="string">"/echo/json/"</span>,</div><div class="line">    <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span></div><div class="line">    &#123;</div><div class="line">       <span class="built_in">console</span>.info(response.name);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>1.5版之后，Ajax操作直接返回Promise对象，这意味着可以用then方法指定回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$.ajax(&#123;</div><div class="line">    <span class="attr">url</span>: <span class="string">"/echo/json/"</span>,</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.info(response.name);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="deferred对象的方法"><a href="#deferred对象的方法" class="headerlink" title="deferred对象的方法"></a>deferred对象的方法</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p><strong>（1）生成deferred对象</strong></p>
<p>第一步是通过$.Deferred()方法，生成一个deferred对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> deferred = $.Deferred();</div></pre></td></tr></table></figure>
<p><strong>（2）deferred对象的状态</strong></p>
<p>deferred对象有三种状态。</p>
<ul>
<li>pending：表示操作还没有完成。</li>
<li>resolved：表示操作成功。</li>
<li>rejected：表示操作失败。</li>
</ul>
<p>state方法用来返回deferred对象当前状态。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$.Deferred().state() <span class="comment">// 'pending'</span></div><div class="line">$.Deferred().resolve().state() <span class="comment">// 'resolved'</span></div><div class="line">$.Deferred().reject().state() <span class="comment">// 'rejected'</span></div></pre></td></tr></table></figure>
<p><strong>（3）改变状态的方法</strong></p>
<p>resolve方法将deferred对象的状态从pending改为resolved，reject方法则将状态从pending改为rejected。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> deferred = $.Deferred();</div><div class="line"></div><div class="line">deferred.resolve(<span class="string">"hello world"</span>);</div></pre></td></tr></table></figure>
<p>resolve方法的参数，用来传递给回调函数。</p>
<p><strong>（4）绑定回调函数</strong></p>
<p>deferred对象在状态改变时，会触发回调函数。 </p>
<p>done方法指定状态变为resolved（操作成功）时的回调函数；fail方法指定状态变为rejected（操作失败）时的回调函数；always方法指定，不管状态变为resolved或rejected，都会触发的方法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> deferred = $.Deferred();</div><div class="line"></div><div class="line">deferred.done(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">   <span class="built_in">console</span>.log(value);</div><div class="line">&#125;).resolve(<span class="string">'hello world'</span>);</div><div class="line"><span class="comment">// hello world</span></div></pre></td></tr></table></figure>
<p>上述三种方法都返回的原有的deferred对象，因此可以采用链式写法，在后面再链接别的方法（包括done和fail在内）。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$.Deferred().done(f1).fail(f2).always(f3);</div></pre></td></tr></table></figure>
<h3 id="notify-和-progress"><a href="#notify-和-progress" class="headerlink" title="notify() 和 progress()"></a>notify() 和 progress()</h3><p>progress()用来指定一个回调函数，当调用notify()方法时，该回调函数将执行。它的用意是提供一个接口，使得在非同步操作执行过程中，可以执行某些操作，比如定期返回进度条的进度。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> userProgress = $.Deferred();</div><div class="line">   <span class="keyword">var</span> $profileFields = $(<span class="string">"input"</span>);</div><div class="line">   <span class="keyword">var</span> totalFields = $profileFields.length</div><div class="line">       </div><div class="line">   userProgress.progress(<span class="function"><span class="keyword">function</span> (<span class="params">filledFields</span>) </span>&#123;</div><div class="line">       <span class="keyword">var</span> pctComplete = (filledFields/totalFields)*<span class="number">100</span>;</div><div class="line">       $(<span class="string">"#progress"</span>).html(pctComplete.toFixed(<span class="number">0</span>));</div><div class="line">   &#125;); </div><div class="line"></div><div class="line">   userProgress.done(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">       $(<span class="string">"#thanks"</span>).html(<span class="string">"Thanks for completing your profile!"</span>).show();</div><div class="line">   &#125;);</div><div class="line">   </div><div class="line">   $(<span class="string">"input"</span>).on(<span class="string">"change"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">       <span class="keyword">var</span> filledFields = $profileFields.filter(<span class="string">"[value!='']"</span>).length;</div><div class="line">       userProgress.notify(filledFields);</div><div class="line">       <span class="keyword">if</span> (filledFields == totalFields) &#123;</div><div class="line">           userProgress.resolve();</div><div class="line">       &#125;</div><div class="line">   &#125;);</div></pre></td></tr></table></figure>
<h3 id="then方法"><a href="#then方法" class="headerlink" title="then方法"></a>then方法</h3><p><strong>（1）概述</strong></p>
<p>then方法的作用也是指定回调函数，它可以接受三个参数，也就是三个回调函数。第一个参数是resolve时调用的回调函数（相当于done方法），第二个参数是reject时调用的回调函数（相当于fail方法），第三个参数是progress()方法调用的回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">deferred.then( doneFilter [, failFilter ] [, progressFilter ] )</div></pre></td></tr></table></figure>
<p><strong>（2）返回值</strong></p>
<p>在jQuery 1.8之前，then()只是.done().fail()写法的语法糖，两种写法是等价的。在jQuery 1.8之后，then()返回一个新的promise对象，而done()返回的是原有的deferred对象。如果then()指定的回调函数有返回值，该返回值会作为参数，传入后面的回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> defer = jQuery.Deferred();</div><div class="line"></div><div class="line">defer.done(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> a * b;</div><div class="line">&#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params"> result </span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"result = "</span> + result);</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"> a, b </span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> a * b;</div><div class="line">&#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params"> result </span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"result = "</span> + result);</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"> a, b </span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> a * b;</div><div class="line">&#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params"> result </span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"result = "</span> + result);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">defer.resolve( <span class="number">2</span>, <span class="number">3</span> );</div></pre></td></tr></table></figure>
<p>在jQuery 1.8版本之前，上面代码的结果是：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">result = <span class="number">2</span> </div><div class="line">result = <span class="number">2</span> </div><div class="line">result = <span class="number">2</span></div></pre></td></tr></table></figure>
<p>在jQuery 1.8版本之后，返回结果是</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">result = <span class="number">2</span> </div><div class="line">result = <span class="number">6</span> </div><div class="line">result = <span class="literal">NaN</span></div></pre></td></tr></table></figure>
<p>这一点需要特别引起注意。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$.ajax( url1, &#123; <span class="attr">dataType</span>: <span class="string">"json"</span> &#125; )</div><div class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params"> data </span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> $.ajax( url2, &#123; <span class="attr">data</span>: &#123; <span class="attr">user</span>: data.userId &#125; &#125; );</div><div class="line">&#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params"> data </span>) </span>&#123;</div><div class="line">  <span class="comment">// 从url2获取的数据</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面代码最后那个done方法，处理的是从url2获取的数据，而不是从url1获取的数据。</p>
<p><strong>（3）对返回值的修改</strong></p>
<p>利用then()会修改返回值这个特性，我们可以在调用其他回调函数之前，对前一步操作返回的值进行处理。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> post = $.post(<span class="string">"/echo/json/"</span>)</div><div class="line">	.then(<span class="function"><span class="keyword">function</span>(<span class="params">p</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> p.firstName;</div><div class="line">	&#125;);</div><div class="line"></div><div class="line">post.done(<span class="function"><span class="keyword">function</span>(<span class="params">r</span>)</span>&#123; <span class="built_in">console</span>.log(r); &#125;);</div></pre></td></tr></table></figure>
<p>上面代码先使用then()方法，从返回的数据中取出所需要的字段（firstName），所以后面的操作就可以只处理这个字段了。</p>
<p>有时，Ajax操作返回json字符串里面有一个error属性，表示发生错误。这个时候，传统的方法只能是通过done()来判断是否发生错误。通过then()方法，可以让deferred对象调用fail()方法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> myDeferred = $.post(<span class="string">'/echo/json/'</span>, &#123;<span class="attr">json</span>:<span class="built_in">JSON</span>.stringify(&#123;<span class="string">'error'</span>:<span class="literal">true</span>&#125;)&#125;)</div><div class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (response.error) &#123;</div><div class="line">                <span class="keyword">return</span> $.Deferred().reject(response);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> response;</div><div class="line">        &#125;,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> $.Deferred().reject(&#123;<span class="attr">error</span>:<span class="literal">true</span>&#125;);</div><div class="line">        &#125;</div><div class="line">    );</div><div class="line"></div><div class="line">myDeferred.done(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</div><div class="line">        $(<span class="string">"#status"</span>).html(<span class="string">"Success!"</span>);</div><div class="line">    &#125;).fail(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</div><div class="line">        $(<span class="string">"#status"</span>).html(<span class="string">"An error occurred"</span>);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>上面代码中，不管是通信出错，或者服务器返回一个错误，都会调用reject方法，返回一个新的deferred对象，状态为rejected，因此就会触发fail方法指定的回调函数。</p>
<p>关于error的处理，jQuery的deferred对象与其他实现Promises规范的函数库有一个重大不同。就是说，如果deferred对象执行过程中，抛出一个非Promises对象的错误，那么将不会被后继的then方法指定的rejected回调函数捕获，而会一直传播到应用程序层面。为了代码行为与Promises规范保持一致，建议出错时，总是使用reject方法返回错误。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">d = $.Deferred()  </div><div class="line">d.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </div><div class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'err'</span>)</div><div class="line">&#125;).fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'fail'</span>)</div><div class="line">&#125;)</div><div class="line">d.resolve()</div><div class="line"><span class="comment">// Error: err</span></div></pre></td></tr></table></figure>
<p>上面代码中，then的回调函数抛出一个错误，按照Promises规范，应该被fail方法的回调函数捕获，但是jQuery的部署是上升到应用程序的层面。</p>
<p><strong>（4）回调函数的返回值</strong></p>
<p>如果回调函数返回deferred对象，则then方法的返回值将是对应这个返回值的promise对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> d1 = $.Deferred();</div><div class="line"></div><div class="line"><span class="keyword">var</span> promise = $.when(<span class="string">'Hello'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">h</span>)</span>&#123;  </div><div class="line">  <span class="keyword">return</span> $.when(h,d1);</div><div class="line">&#125;)</div><div class="line"></div><div class="line">promise.done(<span class="function"><span class="keyword">function</span> (<span class="params">s1,s2</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(s1);</div><div class="line">	<span class="built_in">console</span>.log(s2);</div><div class="line">&#125;)</div><div class="line"></div><div class="line">d1.resolve(<span class="string">'World'</span>)</div><div class="line"><span class="comment">// Hello</span></div><div class="line"><span class="comment">// World</span></div></pre></td></tr></table></figure>
<p>上面代码中，done方法的回调函数，正常情况下只能接受一个参数。但是由于then方法的回调函数，返回一个when方法生成的deferred对象，导致它可以接受两个参数。</p>
<h3 id="pipe方法"><a href="#pipe方法" class="headerlink" title="pipe方法"></a>pipe方法</h3><p>pipe方法接受一个函数作为参数，表示在调用then方法、done方法、fail方法、always方法指定的回调函数之前，先运行pipe方法指定的回调函数。它通常用来对服务器返回的数据做初步处理。</p>
<h3 id="与Promise-A-规格的差异"><a href="#与Promise-A-规格的差异" class="headerlink" title="与Promise A+规格的差异"></a>与Promise A+规格的差异</h3><p>Promise事实上的标准是社区提出的Promise A+规格，jQuery的实现并不完全符合Promise A+，主要是对错误的处理。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> promise2 = promise1.then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"boom!"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面代码在回调函数中抛出一个错误，Promise A+规定此时Promise实例的状态变为reject，该错误被下一个catch方法指定的回调函数捕获。但是，jQuery的Deferred对象此时不会改变状态，亦不会触发回调函数，该错误一般情况下会被window.onerror捕获。换句话说，在Deferred对象中，总是必须使用reject方法来改变状态。</p>
<h2 id="promise对象"><a href="#promise对象" class="headerlink" title="promise对象"></a>promise对象</h2><p><strong>（1）概念</strong></p>
<p>一般情况下，从外部改变第三方完成的异步操作（比如Ajax）的状态是毫无意义的。为了防止用户这样做，可以在deferred对象的基础上，返回一个针对它的promise对象。</p>
<p>简单说，promise对象就是不能改变状态的deferred对象，也就是deferred的只读版。或者更通俗地理解成，promise是一个对将要完成的任务的承诺，排除了其他人破坏这个承诺的可能性，只能等待承诺方给出结果。</p>
<p>你可以通过promise对象，为原始的deferred对象添加回调函数，查询它的状态，但是无法改变它的状态，也就是说<strong>promise对象不允许你调用resolve和reject方法</strong>。</p>
<p><strong>（2）生成promise对象</strong></p>
<p>deferred对象的promise方法，用来生成对应的promise对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPromise</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> $.Deferred().promise();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">    getPromise().resolve(<span class="string">"a"</span>);</div><div class="line">&#125; <span class="keyword">catch</span>(err) &#123;</div><div class="line">    <span class="built_in">console</span>.log(err);</div><div class="line">&#125;</div><div class="line"><span class="comment">// TypeError</span></div></pre></td></tr></table></figure>
<p>上面代码对promise对象，调用resolve方法，结果报错。</p>
<p>jQuery的ajax() 方法返回的就是一个promise对象。此外，Animation类操作也可以使用promise方法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$(<span class="string">'body'</span>).toggle(<span class="string">'blinds'</span>).promise().then(</div><div class="line">  <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">'body'</span>).toggle(<span class="string">'blinds'</span>)</div><div class="line">  &#125;</div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="辅助方法"><a href="#辅助方法" class="headerlink" title="辅助方法"></a>辅助方法</h2><p>deferred对象还有一系列辅助方法，使它更方便使用。</p>
<h3 id="when-方法"><a href="#when-方法" class="headerlink" title="$.when()方法"></a>$.when()方法</h3><p>$.when()接受多个deferred对象作为参数，当它们全部运行成功后，才调用resolved状态的回调函数，但只要其中有一个失败，就调用rejected状态的回调函数。它相当于将多个非同步操作，合并成一个。实质上，when方法为多个deferred对象，返回一个单一的promise对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$.when(</div><div class="line">    $.ajax( <span class="string">"/main.php"</span> ),</div><div class="line">    $.ajax( <span class="string">"/modules.php"</span> ),</div><div class="line">    $.ajax( <span class="string">"/lists.php"</span> )</div><div class="line">).then(successFunc, failureFunc);</div></pre></td></tr></table></figure>
<p>上面代码表示，要等到三个ajax操作都结束以后，才执行then方法指定的回调函数。</p>
<p>when方法里面要执行多少个操作，回调函数就有多少个参数，对应前面每一个操作的返回结果。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$.when(</div><div class="line">    $.ajax( <span class="string">"/main.php"</span> ),</div><div class="line">    $.ajax( <span class="string">"/modules.php"</span> ),</div><div class="line">    $.ajax( <span class="string">"/lists.php"</span> )</div><div class="line">).then(<span class="function"><span class="keyword">function</span> (<span class="params">resp1, resp2, resp3</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(resp1);</div><div class="line">	<span class="built_in">console</span>.log(resp2);</div><div class="line">	<span class="built_in">console</span>.log(resp3);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面代码的回调函数有三个参数，resp1、resp2和resp3，依次对应前面三个ajax操作的返回结果。</p>
<p>如果when方法的参数不是deferred或promise对象，则直接作为回调函数的参数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">d = $.Deferred()  </div><div class="line">$.when(d, <span class="string">'World'</span>).done(<span class="function"><span class="keyword">function</span> (<span class="params">s1, s2</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(s1);</div><div class="line">	<span class="built_in">console</span>.log(s2);</div><div class="line">&#125;)</div><div class="line"></div><div class="line">d.resolve(<span class="string">'Hello'</span>) </div><div class="line"><span class="comment">// Hello </span></div><div class="line"><span class="comment">// World</span></div></pre></td></tr></table></figure>
<p>上面代码中，when的第二个参数是一个字符串，则直接作为回调函数的第二个参数。</p>
<p>此外，如果when方法的参数都不是deferred或promise对象，那么when方法的回调函数将立即运行。</p>
<h2 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h2><h3 id="wait方法"><a href="#wait方法" class="headerlink" title="wait方法"></a>wait方法</h3><p>我们可以用deferred对象写一个wait方法，表示等待多少毫秒后再执行。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$.wait = <span class="function"><span class="keyword">function</span>(<span class="params">time</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> $.Deferred(<span class="function"><span class="keyword">function</span>(<span class="params">dfd</span>) </span>&#123;</div><div class="line">    setTimeout(dfd.resolve, time);</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用方法如下。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$.wait(<span class="number">5000</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Hello from the future!"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="改写setTimeout"><a href="#改写setTimeout" class="headerlink" title="改写setTimeout"></a>改写setTimeout</h3><p>在上面的wait方法的基础上，还可以改写setTimeout方法，让其返回一个deferred对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomethingLater</span>(<span class="params">fn, time</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> dfd = $.Deferred();</div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    dfd.resolve(fn());</div><div class="line">  &#125;, time || <span class="number">0</span>);</div><div class="line">  <span class="keyword">return</span> dfd.promise();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> promise = doSomethingLater(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log( <span class="string">'已经延迟执行'</span> );</div><div class="line">&#125;, <span class="number">100</span>);</div></pre></td></tr></table></figure>
<h3 id="自定义操作使用deferred接口"><a href="#自定义操作使用deferred接口" class="headerlink" title="自定义操作使用deferred接口"></a>自定义操作使用deferred接口</h3><p>我们可以利用deferred接口，使得任意操作都可以用done()和fail()指定回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Twitter = &#123;</div><div class="line">  <span class="attr">search</span>:<span class="function"><span class="keyword">function</span>(<span class="params">query</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> dfd = $.Deferred();</div><div class="line">    $.ajax(&#123;</div><div class="line">     <span class="attr">url</span>:<span class="string">"http://search.twitter.com/search.json"</span>,</div><div class="line">     <span class="attr">data</span>:&#123;<span class="attr">q</span>:query&#125;,</div><div class="line">     <span class="attr">dataType</span>:<span class="string">'jsonp'</span>,</div><div class="line">     <span class="attr">success</span>:dfd.resolve</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> dfd.promise();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用方法如下。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Twitter.search(<span class="string">'javaScript'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">  alert(data.results[<span class="number">0</span>].text);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>deferred对象的另一个优势是可以附加多个回调函数。下面的例子使用了上面所改写的setTimeout函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">arg</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> dfd = $.Deferred();</div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    dfd.reject(<span class="string">"Sorry, something went wrong."</span>);</div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">return</span> dfd;</div><div class="line">&#125;</div><div class="line"></div><div class="line">doSomething(<span class="string">"uh oh"</span>).done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Won't happen, we're erroring here!"</span>);</div><div class="line">&#125;).fail(<span class="function"><span class="keyword">function</span>(<span class="params">message</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(message);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li>Matt Baker, <a href="http://eng.wealthfront.com/2012/12/jquerydeferred-is-most-important-client.html" target="_blank" rel="external">jQuery.Deferred is the most important client-side tool you have</a></li>
<li><a href="http://www.intridea.com/blog/2011/2/8/fun-with-jquery-deferred" target="_blank" rel="external">Fun With jQuery Deferred</a></li>
<li>Bryan Klimt, <a href="http://blog.parse.com/2013/01/29/whats-so-great-about-javascript-promises/" target="_blank" rel="external">What’s so great about JavaScript Promises?</a></li>
<li>José F. Romaniello, <a href="http://joseoncode.com/2011/09/26/a-walkthrough-jquery-deferred-and-promise/" target="_blank" rel="external">Understanding JQuery.Deferred and Promise</a></li>
<li>Julian Aubourg, Addy Osmani, <a href="http://msdn.microsoft.com/en-us/magazine/gg723713.aspx" target="_blank" rel="external">Creating Responsive Applications Using jQuery Deferred and Promises</a></li>
<li>Graham Jenson, <a href="http://maori.geek.nz/post/i_promise_this_will_be_short" target="_blank" rel="external">JQuery Promises and Deferreds: I promise this will be short</a></li>
<li>Q module document, <a href="https://github.com/kriskowal/q/wiki/Coming-from-jQuery" target="_blank" rel="external">Coming from jQuery</a> </li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[无交互行为内容的闪烁FOUC]]></title>
      <url>http://yardfarmer.github.io/2014/11/12/2014-11-22-%E6%97%A0%E4%BA%A4%E4%BA%92%E8%A1%8C%E4%B8%BA%E5%86%85%E5%AE%B9%E7%9A%84%E9%97%AA%E7%83%81FUBC/</url>
      <content type="html"><![CDATA[<p>#无交互行为内容的闪烁FOUC</p>
<p>今天了解了一个新的名词叫做 FOUC 浏览器样式闪烁，之前也听说过一些类似的东西，比如样式突变等等，但这东西竟然有学名的。</p>
<p>###什么是FOUC?</p>
<p>如果使用import方法对CSS进行导入,会导致某些页面在 Windows 下的<code>IE</code>出现一些奇怪的现象:以无样式显示页面内容的瞬间闪烁,这种现象称之为文档样式短暂失效(Flash of Unstyled Content),简称为FOUC。</p>
<p>出现的原因大致为：</p>
<ol>
<li>使用import方法导入样式表。</li>
<li>将样式表放在页面底部</li>
<li>有几个样式表，放在html结构的不同位置。</li>
</ol>
<p>其实原理很清楚：当样式表晚于结构性html加载，当加载到此样式表时，页面将停止之前的渲染。此样式表被下载和解析后，将重新渲染页面，也就出现了短暂的花屏现象。</p>
<p>一般的解决方法：<strong>使用LINK标签将样式表放在文档head中</strong>。</p>
<h3 id="在其他技术中，同样存在-FOUC："><a href="#在其他技术中，同样存在-FOUC：" class="headerlink" title="在其他技术中，同样存在 FOUC："></a>在其他技术中，同样存在 FOUC：</h3><h4 id="requirejs"><a href="#requirejs" class="headerlink" title="requirejs"></a>requirejs</h4><p>使用 requireJs,加载器来加载页面时，也会出现一部分没有交互行为的内容快速闪过（FOUC），比如在JavaScript 执行之前会有一部分无样式的页面原始内容闪烁一下。如果不依赖JavaScript 来修改初始页面的样式， 问题其实并不严重。但如果依赖JavaScript 来操作样式，则需要将样式提取出来放入初 始化CSS 之中，比如隐藏一些元素或展示一个加载指示器，提示页面正在加载中。 </p>
<h4 id="polymer"><a href="#polymer" class="headerlink" title="polymer"></a>polymer</h4><p>在 custom elements 更新 之前可能显示错乱。 为了缓解 FOUC 问题, Polymer 提供了一个 polyfill 解决方案，配合 :unresolved 伪类 使用。 对于简单的 app，你可以为 body 添加 unresolved 属性。这将在页面初始化时隐藏页面直到所有的 elements 被更新才显示。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">unresolved</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 或者,更具体些 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">unresolved</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CSS代码段笔记]]></title>
      <url>http://yardfarmer.github.io/2014/11/12/2014-11-12-CSS%E4%BB%A3%E7%A0%81%E6%AE%B5%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h3 id="内层div充满外层div"><a href="#内层div充满外层div" class="headerlink" title="内层div充满外层div"></a>内层div充满外层div</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>1.内层div充满外层div<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">	<span class="selector-tag">inner_div</span>&#123;</div><div class="line">		<span class="attribute">position</span>: absolute;</div><div class="line">		<span class="attribute">top</span>:<span class="number">0</span>;</div><div class="line">		<span class="attribute">right</span>:<span class="number">0</span>;</div><div class="line">		<span class="attribute">bottom</span>:<span class="number">0</span>;</div><div class="line">		<span class="attribute">left</span>:<span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如果单纯充满外层，淡出 with/height: 100%也可做到，但是这其它元素就不可以覆盖到上面了，absolute 不在正常的瀑布流中.</p>
<h3 id="渐变的用法"><a href="#渐变的用法" class="headerlink" title="渐变的用法"></a>渐变的用法</h3><pre><code>linear-gradient {color startAt,color endAt},{color startAt,color endAt},{...}, 


&lt;style&gt;
    elemnt{
        background-image:-webkit-linear-gradient(
            45deg, 
            red 25%,
            transparent 25%, transparent 50%,
            red 50%, red 75%,
            transparent 75%, transparent 100%
            );
    }
&lt;/style&gt;
</code></pre><h3 id="图片防下载，在图片上做个遮罩"><a href="#图片防下载，在图片上做个遮罩" class="headerlink" title="图片防下载，在图片上做个遮罩"></a>图片防下载，在图片上做个遮罩</h3><pre><code>&lt;div&gt;
    &lt;div class=&apos;cover&apos;&gt;&lt;/div&gt;
    &lt;img&gt;&lt;/img&gt;
&lt;/div&gt;

&lt;style&gt;
    .cover {
        position: absolute;
        width:100%;
        height:100%;

        /*
        positon:absolute;
        top:0;
        right:0;
        bottom:0;
        left:0;
        */
    }    
&lt;/style&gt;
</code></pre><h3 id="div-style"><a href="#div-style" class="headerlink" title="div.style"></a>div.style</h3><pre><code>&lt;script&gt;
    div.style =&gt; CSSStyleDeclaration{}
    div.classList =&gt; [&quot;a&quot;,&quot;b&quot;];  //元素应用的class
    div.className =&gt; &quot;a b&quot;;      //应用的类名
&lt;/script&gt;
</code></pre><h3 id="border-的颜色"><a href="#border-的颜色" class="headerlink" title="border 的颜色"></a>border 的颜色</h3><pre><code>&lt;p&gt;
    如果没有在 border 属性中指定，则默认采用前景色，
    同字体一个颜色，字体默认黑色，
    可通过color指定，所以这个color也适用于border;
&lt;/p&gt;
</code></pre><h3 id="clip-图片剪切显示"><a href="#clip-图片剪切显示" class="headerlink" title="clip 图片剪切显示"></a>clip 图片剪切显示</h3><pre><code>&lt;style&gt;
img {
    position: absolute; left:526px;
    clip: rect(40px  200px  150px  30px);
    /* non-standard syntax, but supported by all major browsers including Firefox and IE */
}
&lt;/style&gt;
</code></pre><p>window.innerHeight 有用的显示区域，视口的高度<br>window.outerHeight 浏览器窗口的高度，包括标题栏菜单栏等等。</p>
<h2 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h2><pre><code>过度 transition: 
        transition-property: 指定过度的 css 属性,
        transition-duration: 指定完成过渡所需时间,
        transition-timing-function: 指定过渡函数,
        transition-delay: 指定过渡开始出现的延迟时间
</code></pre><h2 id="结构性伪类"><a href="#结构性伪类" class="headerlink" title="结构性伪类"></a>结构性伪类</h2><p>:nth-of-type 和 :nth-child 类似, 不同的是它只计算父元素中指定的某种类型的子元素.</p>
<pre><code>ul&gt;li:nth-of-type(3) {
    background-color: orange;
}
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[移动端技术积累]]></title>
      <url>http://yardfarmer.github.io/2014/11/12/2014-11-12-Hammerjs%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>先占位置。</p>
<h2 id="基本使用方法"><a href="#基本使用方法" class="headerlink" title="基本使用方法"></a>基本使用方法</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">var</span> hammer = <span class="keyword">new</span> Hammer(<span class="built_in">document</span>.getElementById(<span class="string">"container"</span>));</div><div class="line"></div><div class="line">hammer.on(<span class="string">'pan'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"pan"</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">hammer.on(<span class="string">'tap'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"tap-单击"</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">hammer.on(<span class="string">"doubletap"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">"onhold-双击"</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">hammer.on(<span class="string">'press'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"press-长按"</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>hammer.js <a href="http://hammerjs.github.io/" target="_blank" rel="external">跨中断的事件解决方案</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[regexp-head-first]]></title>
      <url>http://yardfarmer.github.io/2014/11/10/2014-11-10-regexp-inaction/</url>
      <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>正则表达式（regular expression）是一种表达文本模式的方法，常常用作按照“给定模式”匹配文本的工具，比如给定一个Email地址的模式，然后用来确定一个字符串是否为Email地址。JavaScript的正则表达式体系是参照Perl 5建立的。</p>
<p>新建正则表达式有两种方法。一种是使用字面量，以斜杠表示开始和结束。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> regex = <span class="regexp">/xyz/</span>;</div></pre></td></tr></table></figure>
<p>另一种是使用RegExp构造函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"xyz"</span>);</div></pre></td></tr></table></figure>
<p>上面两种写法是等价的，都建立了一个内容为xyz的正则表达式对象。</p>
<p>RegExp构造函数还可以接受第二个参数，表示修饰符（详细解释见下文）。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"xyz"</span>, <span class="string">"i"</span>);</div><div class="line"><span class="comment">// 等价于</span></div><div class="line"><span class="keyword">var</span> regex = <span class="regexp">/xyz/i</span>;</div></pre></td></tr></table></figure>
<p>这两种写法在运行时有一个细微的区别。采用字面量的写法，正则对象在代码载入时（即编译时）生成；采用构造函数的方法，正则对象在代码运行时生成。考虑到书写的便利和直观，实际应用中，基本上都采用字面量的写法。</p>
<p>正则对象生成以后，有两种使用方式：</p>
<ul>
<li><p>使用正则对象本身的方法，将字符串作为参数，比如regex.test(string)。</p>
</li>
<li><p>使用字符串对象的方法，将正则对象作为参数，比如string.match(regex)。</p>
</li>
</ul>
<p>下面逐一介绍这两种使用方式。</p>
<h2 id="正则对象的属性和方法"><a href="#正则对象的属性和方法" class="headerlink" title="正则对象的属性和方法"></a>正则对象的属性和方法</h2><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>正则对象的属性主要如下：</p>
<ul>
<li><p><strong>ignoreCase</strong>：返回一个布尔值，表示是否设置了i修饰符，该属性只读。</p>
</li>
<li><p><strong>global</strong>：返回一个布尔值，表示是否设置了g修饰符，该属性只读。</p>
</li>
<li><p><strong>lastIndex</strong>：返回下一次开始搜索的位置。该属性可读写，但是只在设置了g修饰符时有意义。</p>
</li>
<li><p><strong>source</strong>：返回正则表达式的字符串形式（不包括反斜杠），该属性只读。</p>
</li>
<li><p><strong>multiline</strong>：返回一个布尔值，表示是否设置了m修饰符，该属性只读。</p>
</li>
</ul>
<p>下面是属性应用的实例。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> r = <span class="regexp">/abc/igm</span>;</div><div class="line"></div><div class="line">r.ignoreCase <span class="comment">// true</span></div><div class="line">r.global <span class="comment">// true</span></div><div class="line">r.multiline <span class="comment">// true</span></div><div class="line">r.lastIndex <span class="comment">// 0</span></div><div class="line">r.source <span class="comment">// "abc"</span></div></pre></td></tr></table></figure>
<h3 id="test方法"><a href="#test方法" class="headerlink" title="test方法"></a>test方法</h3><p>test方法返回布尔值，用来验证字符串是否符合某个模式。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/cat/.test(<span class="string">'cats and dogs'</span>) <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>上面代码验证参数字符串之中是否包含cat，结果返回true。</p>
<p>如果正则表达式带有g修饰符，则每一次test方法都从上一次结束的位置开始向后匹配。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> r = <span class="regexp">/x/g</span>;</div><div class="line"><span class="keyword">var</span> s = <span class="string">'_x_x'</span>;</div><div class="line"></div><div class="line">r.lastIndex <span class="comment">// 0</span></div><div class="line">r.test(s) <span class="comment">// true</span></div><div class="line"></div><div class="line">r.lastIndex <span class="comment">// 2</span></div><div class="line">r.test(s) <span class="comment">// true</span></div><div class="line"></div><div class="line">r.lastIndex <span class="comment">// 4</span></div><div class="line">r.test(s) <span class="comment">// false</span></div></pre></td></tr></table></figure>
<p>上面代码的正则对象使用了g修饰符，表示要记录搜索位置。接着，三次使用test方法，每一次开始搜索的位置都是上一次匹配的后一个位置。</p>
<p>如果正则模式是一个空字符串，则匹配所有字符串。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">""</span>).test(<span class="string">"abc"</span>)</div><div class="line"><span class="comment">// true</span></div></pre></td></tr></table></figure>
<h3 id="exec方法"><a href="#exec方法" class="headerlink" title="exec方法"></a>exec方法</h3><p>exec方法返回匹配结果。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> s = <span class="string">'_x_x'</span>;</div><div class="line"><span class="keyword">var</span> r1 = <span class="regexp">/x/</span>;</div><div class="line"><span class="keyword">var</span> r2 = <span class="regexp">/y/</span>;</div><div class="line"></div><div class="line">r1.exec(s) <span class="comment">// ["x"]</span></div><div class="line">r2.exec(s) <span class="comment">// null</span></div></pre></td></tr></table></figure>
<p>上面代码表示，如果匹配成功，exec方法返回一个数组，里面是匹配结果。如果匹配失败，返回null。</p>
<p>如果正则表示式包含圆括号，则返回的数组会包括多个元素。其中，第一个元素是整个匹配成功的结果，后面的元素就是圆括号对应的匹配成功的组，也就是说第二个元素就对应第一个括号，第三个元素对应第二个括号，以此类推。整个返回数组的length属性等于匹配成功的组数+1。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> s = <span class="string">'_x_x'</span>;</div><div class="line"><span class="keyword">var</span> r = <span class="regexp">/_(x)/</span>;</div><div class="line"></div><div class="line">r.exec(s) <span class="comment">// ["_x", "x"]</span></div></pre></td></tr></table></figure>
<p>上面代码的exex方法，返回一个数组。第一个元素是整个匹配的结果，第二个元素是圆括号匹配的结果。</p>
<p>exec方法的返回数组还包含以下两个属性：</p>
<ul>
<li><strong>input</strong>：整个原字符串。</li>
<li><strong>index</strong>：整个模式匹配成功的开始位置。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> r = <span class="regexp">/a(b+)a/</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> arr = regex.exec(<span class="string">"_abbba_aba_"</span>);</div><div class="line"></div><div class="line">arr</div><div class="line"><span class="comment">// ["abbba", "bbb"]</span></div><div class="line"></div><div class="line">arr.index</div><div class="line"><span class="comment">// 1</span></div><div class="line"></div><div class="line">arr.input</div><div class="line"><span class="comment">// "_abbba_aba_"</span></div></pre></td></tr></table></figure>
<p>上面代码中的index属性等于1，是因为从原字符串的第二个位置开始匹配成功。</p>
<p>如果正则表达式加上g修饰符，则可以使用多次exec方法，下一次搜索的位置从上一次匹配成功结束的位置开始。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> r = <span class="regexp">/a(b+)a/g</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> a1 = r.exec(<span class="string">"_abbba_aba_"</span>);</div><div class="line">a1 <span class="comment">// ["abbba", "bbb"]</span></div><div class="line">a1.index <span class="comment">// 1</span></div><div class="line">r.lastIndex <span class="comment">// 6</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> a2 = r.exec(<span class="string">"_abbba_aba_"</span>);</div><div class="line">a2 <span class="comment">// ["aba", "b"]</span></div><div class="line">a2.index <span class="comment">// 7</span></div><div class="line">r.lastIndex <span class="comment">// 10</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> a3 = r.exec(<span class="string">"_abbba_aba_"</span>);</div><div class="line">a3 <span class="comment">// null</span></div><div class="line">a3.index <span class="comment">// TypeError: Cannot read property 'index' of null</span></div><div class="line">r.lastIndex <span class="comment">// 0</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> a4 = r.exec(<span class="string">"_abbba_aba_"</span>);</div><div class="line">a4 <span class="comment">// ["abbba", "bbb"]</span></div><div class="line">a4.index <span class="comment">// 1</span></div><div class="line">r.lastIndex <span class="comment">// 6</span></div></pre></td></tr></table></figure>
<p>上面代码连续用了四次exec方法，前三次都是从上一次匹配结束的位置向后匹配。当第三次匹配结束以后，整个字符串已经到达尾部，正则对象的lastIndex属性重置为0，意味着第四次匹配将从头开始。</p>
<p>利用g修饰符允许多次匹配的特点，可以用一个循环完成全部匹配。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> r = <span class="regexp">/a(b+)a/g</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> s = <span class="string">"_abbba_aba_"</span>;</div><div class="line"></div><div class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</div><div class="line">	<span class="keyword">var</span> match = r.exec(s);</div><div class="line">	<span class="keyword">if</span> (!match) <span class="keyword">break</span>;</div><div class="line">	<span class="built_in">console</span>.log(match[<span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"><span class="comment">// bbb</span></div><div class="line"><span class="comment">// b</span></div></pre></td></tr></table></figure>
<p>如果正则对象是一个空字符串，则exec方法会匹配成功，但返回的也是空字符串。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> r1 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">""</span>);</div><div class="line"><span class="keyword">var</span> a1 = r1.exec(<span class="string">"abc"</span>);</div><div class="line">a1 <span class="comment">// [""]</span></div><div class="line">a1.index <span class="comment">// 0</span></div><div class="line">r1.lastIndex <span class="comment">// 0 </span></div><div class="line"></div><div class="line"><span class="keyword">var</span> r2 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"()"</span>);</div><div class="line"><span class="keyword">var</span> a2 = r2.exec(<span class="string">"abc"</span>);</div><div class="line">a2 <span class="comment">// ["", ""]</span></div><div class="line">a2.index <span class="comment">// 0</span></div><div class="line">r2.lastIndex <span class="comment">// 0</span></div></pre></td></tr></table></figure>
<h2 id="字符串对象的方法"><a href="#字符串对象的方法" class="headerlink" title="字符串对象的方法"></a>字符串对象的方法</h2><p>字符串对象的方法之中，有4种与正则对象有关。</p>
<ul>
<li><p><strong>match</strong>：返回匹配的子字符串。</p>
</li>
<li><p><strong>search</strong>：按照给定的正则规则进行搜索。</p>
</li>
<li><p><strong>replace</strong>：按照给定的正则规则进行替换。</p>
</li>
<li><p><strong>split</strong>：按照给定规则进行字符串分割。</p>
</li>
</ul>
<p>下面逐一介绍。</p>
<h3 id="match方法"><a href="#match方法" class="headerlink" title="match方法"></a>match方法</h3><p>match方法对字符串进行正则匹配，返回匹配结果。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> s = <span class="string">'_x_x'</span>;</div><div class="line"><span class="keyword">var</span> r1 = <span class="regexp">/x/</span>;</div><div class="line"><span class="keyword">var</span> r2 = <span class="regexp">/y/</span>;</div><div class="line"></div><div class="line">s.match(r1) <span class="comment">// ["x"]</span></div><div class="line">s.match(r2) <span class="comment">// null</span></div></pre></td></tr></table></figure>
<p>从上面代码可以看到，字符串的match方法与正则对象的exec方法非常类似：匹配成功返回一个数组，匹配失败返回null。</p>
<p>如果正则表达式带有g修饰符，则该方法与正则对象的exec方法行为不同，会返回所有匹配成功的结果。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> s = <span class="string">"abba"</span>;</div><div class="line"><span class="keyword">var</span> r = <span class="regexp">/a/g</span>;</div><div class="line"></div><div class="line">s.match(r) <span class="comment">// ["a", "a"]</span></div><div class="line">r.exec(s) <span class="comment">// ["a"]</span></div></pre></td></tr></table></figure>
<h3 id="search方法"><a href="#search方法" class="headerlink" title="search方法"></a>search方法</h3><p>search方法返回第一个满足条件的匹配结果在整个字符串中的位置。如果没有任何匹配，则返回-1。该方法会忽略g参数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="string">'_x_x'</span>.search(<span class="regexp">/x/</span>)</div><div class="line"><span class="comment">// 1</span></div></pre></td></tr></table></figure>
<h3 id="replace方法"><a href="#replace方法" class="headerlink" title="replace方法"></a>replace方法</h3><p>replace方法可以替换匹配的值，它接受两个参数，第一个是搜索模式，第二个是替换的内容。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">str.replace(search, replacement)</div></pre></td></tr></table></figure>
<p>搜索模式如果不加g修饰符，就替换第一个匹配成功的值，否则替换所有匹配成功的值。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="string">"aaa"</span>.replace(<span class="string">"a"</span>, <span class="string">"b"</span>)</div><div class="line"><span class="comment">// "baa"</span></div><div class="line"></div><div class="line"><span class="string">"aaa"</span>.replace(<span class="regexp">/a/</span>, <span class="string">"b"</span>)</div><div class="line"><span class="comment">// "baa"</span></div><div class="line"></div><div class="line"><span class="string">"aaa"</span>.replace(<span class="regexp">/a/g</span>, <span class="string">"b"</span>)</div><div class="line"><span class="comment">// "bbb"</span></div><div class="line"></div><div class="line"><span class="comment">// 去掉两边的空格</span></div><div class="line"><span class="string">"   a    b   "</span>.replace(<span class="regexp">/(?:^\s+)|(?:[\s]+$)/g</span>,<span class="string">''</span>)</div><div class="line"><span class="comment">// "a   b"</span></div></pre></td></tr></table></figure>
<p>replace方法的第二个参数可以使用美元符号$，(从匹配子串中提取替换使用的原料)用来指代所替换的内容。</p>
<blockquote>
<p>青出于蓝而胜于蓝</p>
</blockquote>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby"> $&amp; 指代匹配的子字符串。</span></div><div class="line">-<span class="ruby"> $` 指代匹配结果前面的文本。</span></div><div class="line">-<span class="ruby"> $' 指代匹配结果后面的文本。</span></div><div class="line">-<span class="ruby"> $n 指代匹配成功的第n组内容，n从<span class="number">1</span>开始计数。</span></div><div class="line">-<span class="ruby"> $$ 指代美元符号$。</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="string">"abc"</span>.replace(<span class="string">"b"</span>, <span class="string">"[$`-$&amp;-$']"</span>)</div><div class="line"><span class="comment">// "a[a-b-c]c"</span></div><div class="line"></div><div class="line"><span class="string">"hello world"</span>.replace(<span class="regexp">/(\w+)\s(\w+)/</span>,<span class="string">"$2 $1"</span>)</div><div class="line"><span class="comment">// "world hello"</span></div></pre></td></tr></table></figure>
<p>第二个参数还可以是一个函数，将匹配内容替换为函数返回值。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="string">"3 and 5"</span>.replace(<span class="regexp">/[0-9]+/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">match</span>)</span>&#123;</div><div class="line">			<span class="keyword">return</span> <span class="number">2</span> * match; &#125;)</div><div class="line"><span class="comment">// "6 and 10"</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> a = <span class="string">"The quick brown fox jumped over the lazy dog."</span>;</div><div class="line"><span class="keyword">var</span> pattern = <span class="regexp">/quick|brown|lazy/ig</span>;</div><div class="line">a.replace( pattern, <span class="function"><span class="keyword">function</span> <span class="title">replacer</span>(<span class="params">match</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> match.toUpperCase();</div><div class="line">&#125; );</div><div class="line"><span class="comment">// The QUICK BROWN fox jumped over the LAZY dog.</span></div></pre></td></tr></table></figure>
<p>作为replace方法第二个参数的替换函数，可以接受多个参数。它的第一个参数是捕捉到的内容，第二个参数是捕捉到的组匹配（有多少个组匹配，就有多少个对应的参数）。此外，最后还可以添加两个参数，倒数第二个参数是捕捉到的内容在整个字符串中的位置（比如从第五个位置开始），最后一个参数是原字符串。下面是一个网页模板替换的例子。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> prices = &#123;</div><div class="line">    <span class="string">"pr_1"</span>: <span class="string">"$1.99"</span>,</div><div class="line">    <span class="string">"pr_2"</span>: <span class="string">"$9.99"</span>,</div><div class="line">    <span class="string">"pr_3"</span>: <span class="string">"$5.00"</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> template = <span class="string">".."</span>; <span class="comment">// some ecommerce page template</span></div><div class="line"></div><div class="line">template.replace(</div><div class="line">    <span class="regexp">/(&lt;span id=")(.*?)("&gt;)(&lt;\/span&gt;)/g</span>,</div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">match,$<span class="number">1</span>,$<span class="number">2</span>,$<span class="number">3</span>,$<span class="number">4</span></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> $<span class="number">1</span> + $<span class="number">2</span> + $<span class="number">3</span> + prices[$<span class="number">2</span>] + $<span class="number">4</span>;</div><div class="line">    &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<p>上面代码的捕捉模式中，有四个括号，所以会产生四个组匹配，在匹配函数中用$1到$4表示。匹配函数的作用是将价格插入模板中。</p>
<h3 id="split方法"><a href="#split方法" class="headerlink" title="split方法"></a>split方法</h3><p>split方法按照正则规则分割字符串，返回一个由分割后的各个部分组成的数组。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">str.split(separator, [limit])</div></pre></td></tr></table></figure>
<p>该方法接受两个参数，第一个参数是分隔规则，第二个参数是返回数组的最大成员数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="string">'a,  b,c, d'</span>.split(<span class="string">','</span>) </div><div class="line"><span class="comment">// [ 'a', '  b', 'c', ' d' ]</span></div><div class="line"></div><div class="line"><span class="string">'a,  b,c, d'</span>.split(<span class="regexp">/, */</span>)</div><div class="line"><span class="comment">// [ 'a', 'b', 'c', 'd' ]</span></div><div class="line"></div><div class="line"><span class="string">'a,  b,c, d'</span>.split(<span class="regexp">/, */</span>, <span class="number">2</span>)</div><div class="line">[ <span class="string">'a'</span>, <span class="string">'b'</span> ]</div></pre></td></tr></table></figure>
<p>上面代码使用正则表达式，去除了子字符串的逗号前面的空格。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="string">"aaa*a*"</span>.split(<span class="regexp">/a*/</span>)</div><div class="line"><span class="comment">// [ '', '*', '*' ]</span></div><div class="line"></div><div class="line"><span class="string">"aaa**a*"</span>.split(<span class="regexp">/a*/</span>)</div><div class="line"><span class="comment">// ["", "*", "*", "*"]</span></div></pre></td></tr></table></figure>
<p>上面代码的分割规则是出现0次或多次的a，所以第一个分隔符是“aaa”，第二个分割符是“a”，将整个字符串分成三个部分。出现0次的a，意味着只要没有a就可以分割，实际上就是按字符分割。</p>
<p>如果正则表达式带有括号，则括号匹配的部分也会作为数组成员返回。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="string">"aaa*a*"</span>.split(<span class="regexp">/(a*)/</span>)</div><div class="line"><span class="comment">// [ '', 'aaa', '*', 'a', '*' ]</span></div></pre></td></tr></table></figure>
<p>上面代码的正则表达式使用了括号，第一个组匹配是“aaa”，第二个组匹配是“a”，它们都作为数组成员返回。</p>
<p>下面是另一个组匹配的例子。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="string">'a,  b  ,  '</span>.split(<span class="regexp">/(,)/</span>)</div><div class="line"><span class="comment">// ["a", ",", "  b  ", ",", "  "]</span></div><div class="line"></div><div class="line"><span class="string">'a,  b  ,  '</span>.split(<span class="regexp">/ *(,) */</span>)</div><div class="line"><span class="comment">// ["a", ",", "b", ",", ""]</span></div></pre></td></tr></table></figure>
<h2 id="匹配规则"><a href="#匹配规则" class="headerlink" title="匹配规则"></a>匹配规则</h2><p>正则表达式对字符串的匹配有很复杂的规则。下面一一介绍这些规则。</p>
<h3 id="字面量字符和元字符"><a href="#字面量字符和元字符" class="headerlink" title="字面量字符和元字符"></a>字面量字符和元字符</h3><p>大部分字符在正则表达式中，就是字面的含义，比如/a/匹配a，/b/匹配b。它们都叫做“字面量字符”（literal characters）。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/dog/.test(<span class="string">"old dog"</span>) <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>上面代码中正则表达式的dog，就是字面量字符，所以/dog/匹配old dog，因为它就表示d、o、g三个字母连在一起。</p>
<p>除了字面量字符以外，还有一部分字符有特殊含义，不代表字面的意思。它们叫做“元字符”（metacharacters），主要有以下几个。</p>
<p><strong>（1）点字符（.)</strong></p>
<p>点字符（.）匹配除回车（\r）、换行(\n) 、行分隔符（\u2028）和段分隔符（\u2029）以外的所有字符。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/c.t/</div></pre></td></tr></table></figure>
<p>上面代码中的c.t匹配c和t之间包含任意一个字符的情况，只要这三个字符在同一行，比如cat、c2t、c-t等等，但是不匹配coot。</p>
<p><strong>（2）位置字符</strong></p>
<p>位置字符用来提示字符所处的位置，主要有两个字符。</p>
<ul>
<li>^ 表示字符串的起首。</li>
<li>$ 表示字符串的行尾。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/^test/.test(<span class="string">"test123"</span>) <span class="comment">// true</span></div><div class="line">/test$/.test(<span class="string">"new test"</span>) <span class="comment">// true</span></div><div class="line">/^test$/.test(<span class="string">"test"</span>) <span class="comment">// true</span></div><div class="line">/^test$/.test(<span class="string">"test test"</span>) <span class="comment">// false</span></div></pre></td></tr></table></figure>
<p><strong>（3）选择符（|）</strong></p>
<p>竖线符号（|）在正则表达式中表示“或关系”（OR），即 cat|dog 表示匹配cat或dog。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/<span class="number">11</span>|<span class="number">22</span>/.test(<span class="string">"911"</span>) <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h3 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h3><p>字符类（class）表示有一系列字符可供选择，只要匹配其中一个就可以了。所有可供选择的字符都放在方括号内，比如[xyz] 表示x、y、z之中任选一个匹配。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/[abc]/.test(<span class="string">"hello world"</span>) <span class="comment">// false</span></div><div class="line">/[abc]/.test(<span class="string">"apple"</span>) <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>上面代码表示，字符串hello world不包含abc这三个字母中的任一个，而字符串apple包含字母a。</p>
<p>有两个字符在字符类中有特殊含义。</p>
<p><strong>（1）脱字符（&#94;）</strong></p>
<p>如果方括号内的第一个字符是[&#94;]，则表示除了字符类之中的字符，其他字符都可以匹配。比如，[&#94;xyz] 表示除了x、y、z之外都可以匹配。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/[^abc]/.test(<span class="string">"hello world"</span>) <span class="comment">// true</span></div><div class="line">/[^abc]/.test(<span class="string">"bbc"</span>) <span class="comment">// false</span></div></pre></td></tr></table></figure>
<p>上面代码表示，字符串hello world不包含字母abc中的任一个，所以返回true；字符串bbc不包含abc以外的字母，所以返回false。</p>
<blockquote>
<p>注意，脱字符只有在字符类的第一个位置才有特殊含义，否则就是字面含义。</p>
</blockquote>
<p><strong>（2）连字符（-）</strong></p>
<p>某些情况下，对于连续序列的字符，连字符（-）用来提供简写形式，表示字符的连续范围。比如，[abc]可以写成[a-c]，[0123456789]可以写成[0-9]，同理[A-Z]表示26个大写字母。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/a-z/.test(<span class="string">"b"</span>) <span class="comment">// false</span></div><div class="line">/[a-z]/.test(<span class="string">"b"</span>) <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>上面代码中，当连字号（dash）不出现在方括号之中，就不具备简写的作用，只代表字面的含义，所以不匹配字符b。只有当连字号用在方括号之中，才表示连续的字符序列。</p>
<p>以下都是合法的字符类简写形式。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[<span class="number">0</span><span class="number">-9.</span>,]</div><div class="line">[<span class="number">0</span><span class="number">-9</span>a-fA-F]</div><div class="line">[a-zA-Z0<span class="number">-9</span>-]</div><div class="line">[<span class="number">1</span><span class="number">-31</span>]</div></pre></td></tr></table></figure>
<p>上面代码中最后一个字符类[1-31]，不代表1到31，只代表1到3。</p>
<blockquote>
<p>注意，字符类的连字符必须在头尾两个字符中间，才有特殊含义，否则就是字面含义。</p>
</blockquote>
<h3 id="重复类"><a href="#重复类" class="headerlink" title="重复类"></a>重复类</h3><p>{} 表示模式的重复次数。{n}表示重复n次，{n,}表示至少重复n次，{n,m}表示重复不少于n次，不多于m次。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/lo&#123;<span class="number">2</span>&#125;k/.test(<span class="string">"look"</span>) <span class="comment">// true</span></div><div class="line">/lo&#123;<span class="number">2</span>,<span class="number">5</span>&#125;k/.test(<span class="string">"looook"</span>) <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h3 id="量词符"><a href="#量词符" class="headerlink" title="量词符"></a>量词符</h3><ul>
<li>? 表示某个模式出现1次或0次，等同于{0, 1}。</li>
<li>* 表示某个模式出现0次或多次，等同于 {0,}。</li>
<li>+ 表示某个模式出现1次或多次，等同于 {1,}。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/t?est/.test(<span class="string">"test"</span>) <span class="comment">// true</span></div><div class="line">/t?est/.test(<span class="string">"est"</span>) <span class="comment">// true</span></div><div class="line"></div><div class="line">/t+est/.test(<span class="string">"test"</span>) <span class="comment">// true</span></div><div class="line">/t+est/.test(<span class="string">"ttest"</span>) <span class="comment">// true</span></div><div class="line">/t+est/.test(<span class="string">"tttest"</span>) <span class="comment">// true</span></div><div class="line">/t+est/.test(<span class="string">"est"</span>) <span class="comment">// false</span></div><div class="line"></div><div class="line">/t*est/.test(<span class="string">"test"</span>) <span class="comment">// true</span></div><div class="line">/t*est/.test(<span class="string">"ttest"</span>) <span class="comment">// true</span></div><div class="line">/t*est/.test(<span class="string">"tttest"</span>) <span class="comment">// true</span></div><div class="line">/t*est/.test(<span class="string">"est"</span>) <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>以上三个量词符，默认情况下的匹配规则都是贪婪模式，即最大可能匹配，直到下一个字符不满足匹配规则为止。比如，对于字符串“aaa”来说，/a+/将会匹配“aaa”，而不会匹配“aa”。为了将贪婪模式改为非贪婪模式，可以在量词符后面加一个问号，/a+?/将会只匹配“a”。</p>
<h3 id="转义符"><a href="#转义符" class="headerlink" title="转义符"></a>转义符</h3><p>正则表达式中那些有特殊含义的字符，如果要匹配它们本身，就需要在它们前面要加上反斜杠。比如要匹配加号，就要写成\+。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/<span class="number">1</span>+<span class="number">1</span>/.test(<span class="string">"1+1"</span>)</div><div class="line"><span class="comment">// false</span></div><div class="line"></div><div class="line">/<span class="number">1</span>\+<span class="number">1</span>/.test(<span class="string">"1+1"</span>)</div><div class="line"><span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>正则模式中，需要用斜杠转义的，一共有12个字符：&#94;、.、[、$、(、)、|、*、+、?、{和 \。需要特别注意的是，如果使用RegExp方法生成正则对象，转义需要使用两个斜杠，因为字符串内部会先转义一次。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"1\+1"</span>)).test(<span class="string">"1+1"</span>) <span class="comment">// false</span></div><div class="line">(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"1\\+1"</span>)).test(<span class="string">"1+1"</span>) <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><p>修饰符（modifier）表示模式的附加规则，放在正则模式的最尾部。</p>
<p><strong>（1）g修饰符</strong></p>
<p>默认情况下，第一次匹配成功后，正则对象就停止向下匹配了。g修饰符表示全局匹配（global），加上它以后，正则对象将匹配全部符合条件的结果，主要用于搜索和替换。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> regex = <span class="regexp">/b/</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> str = <span class="string">'abba'</span>;</div><div class="line"></div><div class="line">regex.test(str); <span class="comment">// true</span></div><div class="line">regex.test(str); <span class="comment">// true</span></div><div class="line">regex.test(str); <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>上面代码连续做了三次匹配，都返回true。它的含义是如果不加g修饰符，每次匹配时都是从字符串头部开始匹配。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> regex = <span class="regexp">/b/g</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> str = <span class="string">'abba'</span>;</div><div class="line"></div><div class="line">regex.test(str); <span class="comment">// true</span></div><div class="line">regex.test(str); <span class="comment">// true</span></div><div class="line">regex.test(str); <span class="comment">// false</span></div></pre></td></tr></table></figure>
<p>上面代码中，因为字符串“abba”只有两个“b”，所以前两次匹配结果为true，第三次匹配结果为false。它的含义是加上g修饰符以后，每次匹配都是从上一次匹配成功处开始往后匹配。</p>
<p><strong>（2）i修饰符</strong></p>
<p>默认情况下，正则对象区分字母的大小写，加上i修饰符以后表示忽略大小写（ignorecase）。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/abc/.test(<span class="string">"ABC"</span>) <span class="comment">// false</span></div><div class="line">/abc/i.test(<span class="string">"ABC"</span>) <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>上面代码表示，加了i修饰符以后，不考虑大小写，所以模式abc匹配字符串ABC。</p>
<p><strong>（3）m修饰符</strong></p>
<p>有时，字符串的头部或尾部可能会有换行符。默认情况下，正则对象会将换行符当作算入字符串的开头或结尾。m修饰符表示多行模式（multiline），加上它以后，正则对象会忽略字符串头部或尾部的换行符，即&#94;和$会忽略换行符。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/world$/.test(<span class="string">"hello world\n"</span>) <span class="comment">// false</span></div><div class="line">/world$/m.test(<span class="string">"hello world\n"</span>) <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>上面的代码中，字符串结尾处有一个换行符。如果不加m修饰符，匹配不成功，因为字符串的结尾不是world；加上以后，换行符被省略，匹配成功。</p>
<p>修饰符可以多个一起使用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> regex = <span class="regexp">/test/ig</span>;</div></pre></td></tr></table></figure>
<h3 id="预定义模式"><a href="#预定义模式" class="headerlink" title="预定义模式"></a>预定义模式</h3><p>预定义模式指的是某些常见模式的简写方式。</p>
<ul>
<li>\d 匹配0-9之间的任一数字，相当于[0-9]。</li>
<li>\D 匹配所有0-9以外的字符，相当于[^0-9]。</li>
<li>\w 匹配任意的字母、数字和下划线，相当于[A-Za-z0-9_]。</li>
<li>\W 除所有字母、数字和下划线以外的字符，相当于/[&#94;A-Za-z0-9_]/ 。</li>
<li>\s 匹配空格（包括制表符、空格符、断行符等），相等于[\t\r\n\v\f]。</li>
<li>\S 匹配非空格的字符，相当于[&#94;\t\r\n\v\f]。</li>
<li>\b 匹配词的边界。</li>
<li>\B 匹配非词边界，即在词的内部。</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/\s\w*/.exec("hello world") // [" world"]</div><div class="line"></div><div class="line">/\bworld/.test("hello world") // true</div><div class="line">/\bworld/.test("hello-world") // true</div><div class="line">/\bworld/.test("helloworld") // false</div><div class="line"></div><div class="line">/\Bworld/.test("hello-world") // false</div><div class="line">/\Bworld/.test("helloworld") // true</div></pre></td></tr></table></figure>
<h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h3><p>正则对象对一些不能打印的特殊字符，提供了表达形式。</p>
<ul>
<li>\cX 表示 Ctrl-X</li>
<li>[\b] 匹配退格键(U+0008)，不要与\b混淆。</li>
<li>\n 匹配换行键。</li>
<li>\r 匹配回车键。</li>
<li>\t 匹配制表符tab（U+0009）。</li>
<li>\v 匹配垂直制表符（U+000B）。</li>
<li>\f 匹配换页符（U+000C）。</li>
<li>\0 匹配null字符（U+0000）。</li>
<li>\xhh 匹配一个以两位十六进制数表示的字符。</li>
<li>\uhhhh 匹配一个以四位十六进制数表示的unicode字符。</li>
</ul>
<h3 id="组匹配"><a href="#组匹配" class="headerlink" title="组匹配"></a>组匹配</h3><p><strong>（1）概述</strong></p>
<p>正则表达式的括号表示分组匹配，括号中的模式可以用来捕获分组的内容。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> m = <span class="string">"abcabc"</span>.match(<span class="regexp">/(.)b(.)/</span>);</div><div class="line">m </div><div class="line"><span class="comment">// ["abc", "a", "c"]</span></div></pre></td></tr></table></figure>
<p>上面代码中，正则表达式/(.)b(.)/一共使用两个括号，第一个括号捕获a，第二个括号捕获c。</p>
<p>注意，使用组匹配时，不宜同时使用g修饰符，否则match方法不会捕获分组的内容。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> m = <span class="string">"abcabc"</span>.match(<span class="regexp">/(.)b(.)/g</span>);</div><div class="line">m</div><div class="line"><span class="comment">// ["abc", "abc"]</span></div></pre></td></tr></table></figure>
<p>上面代码使用带g修饰符的正则表达式，结果match方法只捕获了匹配整个表达式的部分。</p>
<p>在正则表达式内部，可以用\n引用括号匹配的内容，n是从1开始的自然数，表示对应顺序的括号。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/(.)b(.)\<span class="number">1</span>b\<span class="number">2</span>/.test(<span class="string">"abcabc"</span>)</div><div class="line"><span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>上面的代码中，\1表示前一个括号匹配的内容（即“a”），\2表示第二个括号匹配的内容（即“b”）。</p>
<p>组匹配非常有用，下面是一个匹配网页标签的例子。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> tagName = <span class="regexp">/&lt;([^&gt;]+)&gt;[^&lt;]*&lt;\/\1&gt;/</span>;</div><div class="line">tagName.exec(<span class="string">"&lt;b&gt;bold&lt;/b&gt;"</span>)[<span class="number">1</span>]</div><div class="line"><span class="comment">// 'b'</span></div></pre></td></tr></table></figure>
<p><strong>（2）非捕获组</strong></p>
<p>(?:x)称为非捕获组（Non-capturing group），表示不返回该组匹配的内容，即匹配的结果中不计入这个括号。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> m = <span class="string">"abc"</span>.match(<span class="regexp">/(?:.)b(.)/</span>);</div><div class="line"></div><div class="line">m[<span class="number">1</span>]</div><div class="line"><span class="comment">// "c"</span></div></pre></td></tr></table></figure>
<p>上面代码中的模式，一共使用了两个括号。其中第一个括号是非捕获组，所以返回的第一个被捕获的组是第二个括号所匹配的“c”。</p>
<p>下面是用来分解网址的正则表达式。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> url = <span class="regexp">/(http|ftp):\/\/([^/\r\n]+)(\/[^\r\n]*)?/</span>;</div><div class="line"></div><div class="line">url.exec(<span class="string">"http://google.com/"</span>);</div><div class="line"><span class="comment">// ["http://google.com/", "http", "google.com", "/"]</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> url = <span class="regexp">/(?:http|ftp):\/\/([^/\r\n]+)(\/[^\r\n]*)?/</span>;</div><div class="line"></div><div class="line">url.exec(<span class="string">"http://google.com/"</span>);</div><div class="line"><span class="comment">// ["http://google.com/", "google.com", "/"]</span></div></pre></td></tr></table></figure>
<p>上面的代码中，前一个正则表达式是正常匹配，第一个括号返回网络协议；后一个正则表达式是非捕获匹配，返回结果中不包括网络协议。</p>
<p><strong>（3）先行断言</strong></p>
<p>x(?=y)称为先行断言（Positive look-ahead），x只有在y前面才匹配，y不会被计入返回结果。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> m = <span class="string">"abc"</span>.match(<span class="regexp">/b(?=c)/</span>);</div><div class="line">m </div><div class="line"><span class="comment">// "b"</span></div></pre></td></tr></table></figure>
<p>上面的代码使用了先行断言，b在c前面所以被匹配，但是括号对应的c不会被返回。</p>
<p><strong>（4）后行断言</strong></p>
<p>x(?!y)称为后行断言（Negative look-ahead），x只有不在y前面才匹配，y不会被计入返回结果。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> m = <span class="string">"abd"</span>.match(<span class="regexp">/b(?!c)/</span>);</div><div class="line">m</div><div class="line"><span class="comment">// ["b"]</span></div></pre></td></tr></table></figure>
<p>上面的代码使用了后行断言，b不在c前面所以被匹配，而且括号对应的d不会被返回。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li>Axel Rauschmayer, <a href="http://www.2ality.com/2011/04/javascript-overview-of-regular.html" target="_blank" rel="external">JavaScript: an overview of the regular expression API</a></li>
<li>Mozilla Developer Network, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions" target="_blank" rel="external">Regular Expressions</a></li>
<li>Axel Rauschmayer, <a href="http://www.2ality.com/2013/08/regexp-g.html" target="_blank" rel="external">The flag /g of JavaScript’s regular expressions</a></li>
<li>Sam Hughes, <a href="http://qntm.org/files/re/re.html" target="_blank" rel="external">Learn regular expressions in about 55 minutes</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[length==+length]]></title>
      <url>http://yardfarmer.github.io/2014/11/09/2014-11-09-length==+length/</url>
      <content type="html"><![CDATA[<p>读 underscroe 源码的时候看到了</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> length = obj.length;</div><div class="line"></div><div class="line"> <span class="keyword">if</span> (length === +length) &#123;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>符号会尝试把后面的 length 转成数字，比如 +”1” =&gt; 1, 同样 -“1” =&gt; -1</p>
<p>所以，+length 的目的就是如果 length 不是数字的化，就要转成数字。</p>
<blockquote>
<p>NaN === NaN 返回false</p>
<p>null === null 返回 true</p>
</blockquote>
<p>但这还不是最终目的:</p>
<ol>
<li><p>如果 length 赋值为 undefined，</p>
<p>因为 +undefined =&gt; NaN, 并且 NaN 不等 NaN</p>
<p>所以 length==+length 可以排除 length 为 undefinde 的情况.</p>
</li>
<li><p>如果 length 赋值为 null，</p>
<p>因为 +null =&gt; 0,  从而，null === 0 同样返回false</p>
<p>所以 length==+length 可以排除 length 为 null 的情况.</p>
</li>
</ol>
<p>最终实现了 只有 length 是 <strong>数字</strong> 或者 <strong>数字字符串</strong> 的目的。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[javascript协议限定符]]></title>
      <url>http://yardfarmer.github.io/2014/11/09/2014-11-09-javascript%E5%8D%8F%E8%AE%AE%E9%99%90%E5%AE%9A%E7%AC%A6/</url>
      <content type="html"><![CDATA[<p>javascript: URL可以用在可以使用常规URL的任意地方, 比如<a>标记的href属性，</a></p>
<p><form>的action属性，甚至window.open() 方法的参数.</form></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[code-skill]]></title>
      <url>http://yardfarmer.github.io/2014/11/09/2014-11-09-code-skill-collection/</url>
      <content type="html"><![CDATA[<h3 id="带前缀方法声明"><a href="#带前缀方法声明" class="headerlink" title="带前缀方法声明"></a>带前缀方法声明</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> thisFunc,</div><div class="line">		prefixList = [<span class="string">'webkit'</span>, <span class="string">'moz'</span>, <span class="string">'ms'</span>];</div><div class="line">	</div><div class="line">	<span class="comment">//check each method for availability, when one is found,</span></div><div class="line">	<span class="comment">//use that</span></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</div><div class="line">		thisFunc = prefixList[i] + <span class="string">'RequestAnimationFrame'</span>;</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(<span class="built_in">window</span>[thisFunc]) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</div><div class="line">				<span class="built_in">window</span>[thisFunc](callback);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h3 id="Function-prototype-bind-创建函数"><a href="#Function-prototype-bind-创建函数" class="headerlink" title="Function.prototype.bind 创建函数"></a>Function.prototype.bind 创建函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">someFunction() &#123; </div><div class="line">   <span class="keyword">this</span>.x = <span class="number">54</span>;	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> goOut = &#123;</div><div class="line">	<span class="attr">x</span>: <span class="number">722</span></div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="keyword">var</span> newLife = someFunction.bind(goOut);</div><div class="line">newLife(); <span class="comment">// this.x =&gt; 722</span></div><div class="line"></div><div class="line"><span class="comment">// another one </span></div><div class="line"><span class="comment">// 偷梁换柱</span></div><div class="line">[<span class="string">"log"</span>, <span class="string">"info"</span>, <span class="string">"warn"</span>, <span class="string">"error"</span>].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">method</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>[method] = <span class="built_in">console</span>[method].bind(</div><div class="line">        <span class="built_in">console</span>, <span class="comment">// used for `this`</span></div><div class="line">        <span class="keyword">new</span> <span class="built_in">Date</span>().toISOString()</div><div class="line">    );</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="随机整数"><a href="#随机整数" class="headerlink" title="随机整数"></a>随机整数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// '|' 对它的整型操作数逐位执行布尔或(OR) 操作。</span></div><div class="line"><span class="comment">// 如果其中一个操 作数相应的位为1 ，或者两个操作数相应位都是1 ，那么结果中的这一位就为1</span></div><div class="line"><span class="built_in">Math</span>.random()*<span class="number">10</span>|<span class="number">0</span> <span class="comment">// 按位或()</span></div><div class="line"><span class="built_in">Math</span>.random()*<span class="number">16</span>|<span class="number">0</span></div></pre></td></tr></table></figure>
<h3 id="数组转换"><a href="#数组转换" class="headerlink" title="数组转换"></a>数组转换</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 类数组转数组</span></div><div class="line"><span class="keyword">var</span> args = [].slice.call(<span class="built_in">arguments</span>);</div><div class="line"></div><div class="line"><span class="comment">// 数组转字符串(数组元素连到一块儿)</span></div><div class="line"><span class="keyword">var</span> strs = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].join(<span class="string">","</span>);</div><div class="line"></div><div class="line"><span class="comment">// 字符串转数组</span></div><div class="line"><span class="keyword">var</span> arr = <span class="string">"1,2,3"</span>.split(<span class="string">","</span>);</div></pre></td></tr></table></figure>
<h3 id="改写setTimeout"><a href="#改写setTimeout" class="headerlink" title="改写setTimeout"></a>改写setTimeout</h3><p>改进setTimeout方法，让其返回一个deferred对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomethingLater</span>(<span class="params">fn, time</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> dfd = $.Deferred();</div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    dfd.resolve(fn());</div><div class="line">  &#125;, time || <span class="number">0</span>);</div><div class="line">  <span class="keyword">return</span> dfd.promise();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> promise = doSomethingLater(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log( <span class="string">'已经延迟执行'</span> );</div><div class="line">&#125;, <span class="number">100</span>);</div></pre></td></tr></table></figure>
<h3 id="批量创建函数"><a href="#批量创建函数" class="headerlink" title="批量创建函数"></a>批量创建函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 引子,比 typeof运算符 更准的类型判断函数</span></div><div class="line"><span class="keyword">var</span> type = <span class="function"><span class="keyword">function</span> (<span class="params">o</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> s = <span class="built_in">Object</span>.prototype.toString.call(o);</div><div class="line">    <span class="keyword">return</span> s.match(<span class="regexp">/\[object (.*?)\]/</span>)[<span class="number">1</span>].toLowerCase();</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 主角</span></div><div class="line">[<span class="string">'Null'</span>,</div><div class="line"> <span class="string">'Undefined'</span>,</div><div class="line"> <span class="string">'Object'</span>,</div><div class="line"> <span class="string">'Array'</span>,</div><div class="line"> <span class="string">'String'</span>,</div><div class="line"> <span class="string">'Number'</span>,</div><div class="line"> <span class="string">'Boolean'</span>,</div><div class="line"> <span class="string">'Function'</span>,</div><div class="line"> <span class="string">'RegExp'</span>,</div><div class="line"> <span class="string">'Element'</span>,</div><div class="line"> <span class="string">'NaN'</span>,</div><div class="line"> <span class="string">'Infinite'</span></div><div class="line">].forEach(<span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</div><div class="line">    type[<span class="string">'is'</span> + t] = <span class="function"><span class="keyword">function</span> (<span class="params">o</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> type(o) === t.toLowerCase();</div><div class="line">    &#125;;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// =&gt;</span></div><div class="line">type(&#123;&#125;); <span class="comment">// "object"</span></div><div class="line">type([]); <span class="comment">// "array"</span></div><div class="line">type(<span class="number">5</span>); <span class="comment">// "number"</span></div><div class="line">type(<span class="literal">null</span>); <span class="comment">// "null"</span></div><div class="line">type(); <span class="comment">// "undefined"</span></div><div class="line">type(<span class="regexp">/abcd/</span>); <span class="comment">// "regex"</span></div><div class="line">type(<span class="keyword">new</span> <span class="built_in">Date</span>()); <span class="comment">// "date"</span></div></pre></td></tr></table></figure>
<h3 id="判断是否为对象"><a href="#判断是否为对象" class="headerlink" title="判断是否为对象"></a>判断是否为对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">// 如果 Object 函数的参数是对象，它总是返回原对象</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObject</span>(<span class="params">target</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> target === <span class="built_in">Object</span>(target);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="length-lenght"><a href="#length-lenght" class="headerlink" title="length === +lenght"></a>length === +lenght</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">if</span>(length === +length) &#123;</div><div class="line"><span class="comment">// 强调 length 只能是数字或者 数字字符串</span></div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">arr = some array;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i, max = arr.length; i &lt; max; i++) &#123;</div><div class="line">	<span class="comment">// get length only once.	</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> arr = some array, </div><div class="line">length = arr.length;</div><div class="line"></div><div class="line"><span class="keyword">while</span>( length-- ) &#123;</div><div class="line">     <span class="comment">// code </span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> A = &#123;</div><div class="line">    <span class="attr">a</span> : <span class="number">1</span>,</div><div class="line">    <span class="attr">b</span> : <span class="number">2</span>  </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="利用-amp-amp-或者-替代-if"><a href="#利用-amp-amp-或者-替代-if" class="headerlink" title="利用 &amp;&amp; 或者 || 替代 if"></a>利用 &amp;&amp; 或者 || 替代 if</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">   <span class="built_in">Object</span>.prototype.abc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">   </div><div class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> A) &#123;</div><div class="line">   </div><div class="line">       A.hasOwnProperty(i) &amp;&amp; <span class="built_in">console</span>.log(A[i],i); </div><div class="line">       <span class="comment">// 等同于 </span></div><div class="line">       <span class="keyword">if</span>(A.hasOwnProperty(i)) &#123;</div><div class="line">           <span class="built_in">console</span>.log(A[i],i); </div><div class="line">       &#125;    </div><div class="line">   &#125;</div><div class="line"></div><div class="line"><span class="comment">// 有则用,没有则初始化</span></div><div class="line"><span class="keyword">var</span> calls = <span class="keyword">this</span>._callbacks || (<span class="keyword">this</span>._callbacks = &#123;&#125;);</div><div class="line"></div><div class="line">(<span class="keyword">this</span>._callbacks[i] || (<span class="keyword">this</span>._callbacks[i]) = []).push(someCallback);</div></pre></td></tr></table></figure>
<h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span> 和 <span class="keyword">case</span> 对齐，增加可读性</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">var</span> inspect_me = <span class="number">0</span>,</div><div class="line">        result;</div><div class="line">    </div><div class="line">    <span class="keyword">switch</span> (inspect_me) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="number">0</span>: </div><div class="line">        result = <span class="string">'a'</span></div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">        result = <span class="string">'b'</span></div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">default</span> : </div><div class="line">        result = <span class="string">'unknown'</span></div><div class="line">	&#125;</div><div class="line">	<span class="built_in">console</span>.log(result); <span class="comment">// a</span></div></pre></td></tr></table></figure>
<h3 id="关于编码规范-空格的使用位置"><a href="#关于编码规范-空格的使用位置" class="headerlink" title="关于编码规范 空格的使用位置"></a>关于编码规范 空格的使用位置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i += <span class="number">1</span>) &#123; &#125;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; max = <span class="number">10</span>; i &lt; max; i += <span class="number">1</span>) &#123;&#125;</div><div class="line"></div><div class="line">	<span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line"></div><div class="line">	<span class="keyword">var</span> o = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;;</div><div class="line"></div><div class="line"></div><div class="line">	myFunc(a, b, c)</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">myFunc</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"></div><div class="line">	<span class="keyword">var</span> myFunc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">// 构造函数用大写</span></div><div class="line"></div><div class="line">	<span class="keyword">var</span> adam = <span class="keyword">new</span> Person();</div></pre></td></tr></table></figure>
<h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// module 模式</span></div><div class="line"><span class="comment">// 1. 模块化</span></div><div class="line"><span class="comment">// 2. 封装了变量和function, 和全局的namespace</span></div><div class="line"><span class="comment">// 3. 只暴露了public方法,隐藏了私有方法</span></div><div class="line">	<span class="keyword">var</span> myModule = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    </div><div class="line">		<span class="keyword">var</span> name = <span class="string">'module A'</span>,</div><div class="line">			mou = &#123;&#125;;</div><div class="line">			</div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">privateName</span> (<span class="params"></span>) </span>&#123;</div><div class="line">			<span class="built_in">console</span>.log(<span class="string">'moudle name is '</span>+ name)</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		mou.pubName = name;</div><div class="line">		mou.pubFunc = privateName</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> mou;</div><div class="line">		</div><div class="line">	&#125;)();</div><div class="line"></div><div class="line">	myModule.pubFunc();</div><div class="line">	<span class="built_in">console</span>.log(myModule,<span class="number">1</span>);</div></pre></td></tr></table></figure>
<h3 id="支持module扩展"><a href="#支持module扩展" class="headerlink" title="支持module扩展"></a>支持module扩展</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myModule = (<span class="function"><span class="keyword">function</span> (<span class="params">my</span>) </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">var</span> name = <span class="string">'module X'</span>;</div><div class="line">	</div><div class="line">	my.Address = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'moudle name is '</span>+ name);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">return</span> my;</div><div class="line"> </div><div class="line">&#125;(myModule || &#123;&#125;));</div><div class="line"></div><div class="line"><span class="comment">//myModule.pubFunc();</span></div><div class="line"><span class="built_in">console</span>.log(myModule,<span class="number">2</span>)</div></pre></td></tr></table></figure>
<h3 id="对象克隆时方法的克隆"><a href="#对象克隆时方法的克隆" class="headerlink" title="对象克隆时方法的克隆?"></a>对象克隆时方法的克隆?</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 用闭包保存状态值</span></div><div class="line">	<span class="keyword">var</span> elems = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'a'</span>);</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;　elems.length; i ++) &#123;</div><div class="line">		elems[i].addEventListener(<span class="string">'click'</span>,</div><div class="line">		(<span class="function"><span class="keyword">function</span>(<span class="params">index</span>) </span>&#123;</div><div class="line">		   <span class="built_in">console</span>.log(<span class="string">'real index is '</span>+ index);</div><div class="line">		&#125;)(i)</div><div class="line">		,<span class="literal">false</span>)</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h2 id="Array-splice-的使用方式"><a href="#Array-splice-的使用方式" class="headerlink" title="Array.splice 的使用方式"></a>Array.splice 的使用方式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 集删除，取值，插入于一身</span></div><div class="line"></div><div class="line"><span class="comment">// 删除：</span></div><div class="line">	<span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</div><div class="line">	arr.splice(startindex,length);</div><div class="line">	arr.splice(<span class="number">0</span>,<span class="number">2</span>) =&gt; &#123;</div><div class="line">		arr == [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</div><div class="line">		<span class="keyword">return</span> [<span class="number">1</span>,<span class="number">2</span>]</div><div class="line">	&#125;</div><div class="line"></div><div class="line"><span class="comment">// 截取新子串： </span></div><div class="line">	<span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</div><div class="line">	arr.splice(startindex,cut_length); <span class="comment">// 若 startindex 省略默认为0</span></div><div class="line">	arr.splice(<span class="number">1</span>,<span class="number">2</span>) =&gt; &#123;</div><div class="line">		arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>];</div><div class="line">		<span class="keyword">return</span> [<span class="number">2</span>,<span class="number">3</span>];</div><div class="line">	&#125;</div><div class="line"></div><div class="line"><span class="comment">// 插入</span></div><div class="line">	<span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</div><div class="line">	arr.splice(startindex,<span class="number">0</span>[标识插入],....[插入值,可多个,但不是数组]);</div><div class="line">	arr.splice(<span class="number">3</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>)&#123;</div><div class="line">		arr =&gt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</div><div class="line">		<span class="keyword">return</span> []</div><div class="line">	&#125;</div><div class="line"></div><div class="line"><span class="comment">// 覆盖插入</span></div><div class="line"></div><div class="line">	<span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</div><div class="line">	arr.splice(startindex,n[覆盖的元素个数],....[插入值,可多个,但不是数组]);</div><div class="line">	arr.splice(<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>) &#123;</div><div class="line">		arr =&gt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</div><div class="line">		<span class="keyword">return</span> [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</div><div class="line">	&#125;</div><div class="line"><span class="comment">// return 返回的是受影响的元素</span></div></pre></td></tr></table></figure>
<h2 id="amp-amp"><a href="#amp-amp" class="headerlink" title="&amp;&amp;"></a>&amp;&amp;</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// "&amp;&amp;" 的行为有时称做"短路" (short circuiting) ，很多代码利用了这一特性来有条件地执行代码。</span></div><div class="line"><span class="comment">// 例如，下面两行JavaScript代码是完全等价的:</span></div><div class="line"></div><div class="line">	<span class="keyword">if</span> (a == b) stop(); <span class="comment">//只有在a==b的时候才调用stop()</span></div><div class="line">	(a == b) &amp;&amp; stop(); </div><div class="line"></div><div class="line"><span class="comment">// 如果 id 为 undefined，则直接给 topic 赋值 undefined，</span></div><div class="line"><span class="comment">// 若 id 有值，但 topics 里没有 id 属性，仍返回给 topic undefined，</span></div><div class="line"><span class="comment">// 当 id 非空，且 topic 里有 id 时，才取得非空值。</span></div><div class="line">topic = id &amp;&amp; topics[ id ];</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 如果max width 已经定义了，直接使用它,否则在preferences对象中查找max_width</span></div><div class="line"><span class="comment">// 如果没有定义它，则使用一个写死的常量</span></div><div class="line">	<span class="keyword">var</span> max = max_width || preferences.max_width || <span class="number">500</span>;</div><div class="line"><span class="string">``</span><span class="string">` </span></div><div class="line"></div><div class="line">Javascript 精粹中出现:</div><div class="line">`<span class="string">``</span>javascript</div><div class="line">	<span class="comment">// typeof 结果为 false, 则小括号为 false, 结果为 that.</span></div><div class="line">	<span class="comment">// typeof true, return other;</span></div><div class="line">	<span class="comment">// 精妙!</span></div><div class="line">	<span class="keyword">return</span> (<span class="keyword">typeof</span> other === <span class="string">'object'</span>  &amp;&amp; other) || that;</div></pre></td></tr></table></figure>
<h2 id="父页面调用子页面方法"><a href="#父页面调用子页面方法" class="headerlink" title="父页面调用子页面方法"></a>父页面调用子页面方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#atParent'</span>).contents().find(<span class="string">'childElement'</span>).trigger(<span class="string">'click'</span>);</div><div class="line"><span class="comment">// native html5</span></div><div class="line"><span class="keyword">var</span> iframe = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'iframe'</span>)[<span class="number">0</span>];</div><div class="line"><span class="keyword">var</span> iframeDocument = iframe.contentDocument; <span class="comment">// 获得了子页面的文档对象</span></div></pre></td></tr></table></figure>
<h2 id="取得指定标记下所有子标签"><a href="#取得指定标记下所有子标签" class="headerlink" title="取得指定标记下所有子标签"></a>取得指定标记下所有子标签</h2><p>Returns a list of elements with the given tag name.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getByClass</span>(<span class="params">tparent,tclass</span>) </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">// getElementsByTagName() = &gt; HTMLCollection =&gt; 类数组</span></div><div class="line">	<span class="comment">// The special string "*" represents all elements.</span></div><div class="line">	<span class="keyword">var</span> allclass = tparent.getElementsByTagName(<span class="string">'*'</span>);</div><div class="line"></div><div class="line">	<span class="keyword">var</span> result = [];</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, max = allclass.length; i &lt; max; i++ ) &#123;</div><div class="line">		<span class="keyword">if</span> ( allclass[i].clssName == tclass ) &#123;</div><div class="line">			result.push(allcalss[i]);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">a = <span class="number">1</span>;</div><div class="line">b = a++; <span class="comment">// b = 1; a = 2;</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params"></span>) (<span class="params">parent, child</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> i,</div><div class="line">		toStr = <span class="built_in">Object</span>.propotype.toString,</div><div class="line">		<span class="comment">// x: arrName = '[Object Array]';</span></div><div class="line">		arrName = <span class="string">'[object Array]'</span>;</div><div class="line">	</div><div class="line">	<span class="comment">// forget check child if null </span></div><div class="line">	child = child || &#123;&#125;;</div><div class="line"></div><div class="line">	<span class="keyword">for</span>( i <span class="keyword">in</span> parent ) &#123;</div><div class="line">		<span class="keyword">if</span>( parent.hasOwnProerty[i] ) &#123;</div><div class="line">			<span class="keyword">if</span>(<span class="keyword">typeof</span> parent[i] === <span class="string">"object"</span>) &#123;</div><div class="line">				child[i] = (toStr.call(parent[i]) === arrName) ? [] : &#123;&#125;;</div><div class="line">				deepCopy(parent[i],child[i]);</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				child[i] = parent[i];</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> child;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="对象继承"><a href="#对象继承" class="headerlink" title="对象继承"></a>对象继承</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">inherit</span>(<span class="params">p</span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span>(p == <span class="literal">null</span>) &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="built_in">TypeError</span>();</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>(<span class="built_in">Object</span>.create) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="built_in">Object</span>.create(p); <span class="comment">// 直接使用它</span></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">var</span> t = <span class="keyword">typeof</span> p;</div><div class="line">	<span class="keyword">if</span>(t !== <span class="string">'object'</span> &amp;&amp; t !== <span class="string">'function'</span>) &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="built_in">TypeError</span>();</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">	f.prototype = p;</div><div class="line">	rturn <span class="keyword">new</span> f();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="灵活常见html元素"><a href="#灵活常见html元素" class="headerlink" title="灵活常见html元素"></a>灵活常见html元素</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>.createElement(<span class="string">'script'</span>))</div><div class="line">	.attr(<span class="string">'src'</span>, <span class="string">'http://example.com/example.js'</span>)</div><div class="line">	.appendTo(<span class="string">'head'</span>);</div></pre></td></tr></table></figure>
<h2 id="split"><a href="#split" class="headerlink" title="split"></a>split</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 计算单词数</span></div><div class="line"><span class="comment">// "".split(regExp);</span></div><div class="line">	<span class="keyword">var</span> a = <span class="string">"a xxx ssd sdf 4rff     dsfs"</span>;</div><div class="line">	<span class="keyword">var</span> b = a.split(<span class="regexp">/\s+/</span>); <span class="comment">// =&gt; ["a", "xxx", "ssd", "sdf", "4rff", "dsfs"]</span></div><div class="line">	<span class="keyword">var</span> c = b.length;</div></pre></td></tr></table></figure>
<h2 id="判断对象是否为空"><a href="#判断对象是否为空" class="headerlink" title="判断对象是否为空"></a>判断对象是否为空</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 对象转会为布尔值</span></div><div class="line"><span class="keyword">var</span> isChromium = !!<span class="built_in">window</span>.chrome;</div><div class="line"><span class="comment">// isChromium =&gt; true</span></div><div class="line">!!<span class="literal">undefined</span> <span class="comment">// =&gt; false</span></div><div class="line">!!<span class="string">""</span> <span class="comment">// =&gt; false</span></div><div class="line">!!<span class="string">"1"</span> <span class="comment">// =&gt; true</span></div><div class="line">!!<span class="literal">null</span> <span class="comment">// =&gt; false</span></div><div class="line">!!<span class="literal">false</span>  <span class="comment">// =&gt; false</span></div><div class="line">!!<span class="string">"false"</span> <span class="comment">// =&gt; true (这种奇葩的情况不少)</span></div></pre></td></tr></table></figure>
<h2 id="批量获取-dom-元素"><a href="#批量获取-dom-元素" class="headerlink" title="批量获取 dom 元素"></a>批量获取 dom 元素</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> elements = &#123;</div><div class="line">	  <span class="attr">head</span>: <span class="literal">null</span>,</div><div class="line">	  <span class="attr">targetA</span>: <span class="literal">null</span>,</div><div class="line">	  <span class="attr">targetB</span>: <span class="literal">null</span>,</div><div class="line">	  <span class="attr">targetC</span>: <span class="literal">null</span>,</div><div class="line">	  <span class="attr">targetD</span>: <span class="literal">null</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> elements) elements[i] = <span class="built_in">document</span>.getElementByID(i);</div></pre></td></tr></table></figure>
<h2 id="函数执行时的上下文"><a href="#函数执行时的上下文" class="headerlink" title="函数执行时的上下文"></a>函数执行时的上下文</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 如果 thisArg 部分为空，则认为 global</span></div><div class="line">	settings.complete.call(<span class="literal">null</span>, text); </div><div class="line"></div><div class="line">	<span class="comment">// 同上，forEach 的第二个参数就是用作回调的上下文 </span></div><div class="line">	[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].forEach( <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.breakFlag === <span class="literal">true</span>) &#123;</div><div class="line">		</div><div class="line">		<span class="comment">// 此处的 false 只是阻止了当前循环的执行，而不会影响后续循环</span></div><div class="line">			<span class="keyword">return</span> <span class="literal">false</span>;  </div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (v === <span class="number">2</span>) &#123;</div><div class="line">			<span class="keyword">this</span>.breakFlag = <span class="literal">true</span></div><div class="line">		&#125;</div><div class="line">		<span class="built_in">console</span>.log(v) <span class="comment">//只输出1,2</span></div><div class="line">	&#125;, &#123;&#125;);  <span class="comment">// '&#123;&#125;' 指定 callback 的上下文</span></div></pre></td></tr></table></figure>
<h2 id="习惯使用选择器上下文"><a href="#习惯使用选择器上下文" class="headerlink" title="习惯使用选择器上下文"></a>习惯使用选择器上下文</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">   $(<span class="string">'div.foo'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">       $(<span class="string">"span"</span>,<span class="keyword">this</span>).addClass(<span class="string">'bar'</span>); <span class="comment">// 限定查找范围</span></div><div class="line">   &#125;);	</div><div class="line"><span class="comment">// 对选择器表达式 “span” 的查找被限制在了 this 的范围内，</span></div><div class="line"><span class="comment">// 即只有被点击元素内的 span 元素才会添加 “bar”。</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[行框与行内框]]></title>
      <url>http://yardfarmer.github.io/2014/11/06/2014-11-06-%E8%A1%8C%E6%A1%86%E4%B8%8E%E8%A1%8C%E5%86%85%E6%A1%86%E7%9A%84%E6%A6%82%E5%BF%B5/</url>
      <content type="html"><![CDATA[<p>文本行中的每个元素都会生成一个内容区。这个内容区则会生成一个行内框（inline box），当一行中的所有内容均已生成了行内框，那么接下来在行框的构造中就会考虑这些行内框，行框要包含住最高行内框的顶端和最低行内框的底端。</p>
<p><img src="/images/codesnip_20141106213406.png" alt="行框图"></p>
<p>需要说明的是：行内框中最大的 line-height 就是行框的高度。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[css中的单位]]></title>
      <url>http://yardfarmer.github.io/2014/11/02/2014-11-02-css%20%E4%B8%AD%E7%9A%84%E5%BA%A6%E9%87%8F/</url>
      <content type="html"><![CDATA[<h2 id="angle"><a href="#angle" class="headerlink" title="angle"></a>angle</h2><p>angle 者，角也。<br>积极的角度代表(right angles)，负角度代表(left angles)。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background</span><span class="selector-pseudo">:-moz-linear-gradient(10deg</span>,<span class="selector-tag">red</span>,<span class="selector-tag">green</span>,<span class="selector-tag">yellow</span>);</div></pre></td></tr></table></figure>
<p>角度为水平方向逆时针向上旋转10°</p>
<p>当指定的角度，请记住，它是一个由水平线与渐变线产生的的角度，逆时针方向。因此，使用0deg将产生一个左到右横向梯度，而90度将创建一个从底部到顶部的垂直渐变。</p>
<h2 id="webkit-gradient"><a href="#webkit-gradient" class="headerlink" title="webkit-gradient"></a>webkit-gradient</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">webkit核心浏览器下的的基本语法如下：</div><div class="line">-webkit-gradient(type, start_point, end_point, / stop...) </div><div class="line">-webkit-gradient(type, inner_center, inner_radius, outer_center, outer_radius, / stop...)</div><div class="line"></div><div class="line"></div><div class="line">参数</div><div class="line">参数类型	简要说明</div><div class="line">type	渐变的类型，可以是线性渐变(linear)或是径向渐变(radial)</div><div class="line">start_point	渐变图像中渐变的起始点</div><div class="line">end_point	渐变图像中渐变的结束点</div><div class="line">stop	color-stop()方法，指定渐变进程中特定的颜色</div><div class="line">inner_center	内部中心点，径向渐变起始圆环</div><div class="line">inner_radius	内部半径，径向渐变起始圆</div><div class="line">outer_center	外部渐变结束圆的中心点</div><div class="line">outer_radius	外部渐变结束圆的半径</div></pre></td></tr></table></figure>
<p>关于参数的具体说明</p>
<ol>
<li>start_point 和 end_point</li>
<li>划一条渐变线，会有起始点和结束点，这个起始点和结束点就对应这里的start_point和end_point参数</li>
</ol>
<p>start_point(x1,x2)，end_point(x2,y2)，这里的 x,y 对应左上角为起点的坐标，<br>此处的x,y参数表示与CSS中的background-position是一致的，可以使像素值，或是百分比值或是left,top,right,bottom。</p>
<p>当x1等于x2，y1不等于y2，实现垂直渐变，调整y1，y2的值可以调整渐变半径大小；<br>当y1等于y2，x1不等于x2，实现水平渐变，调整x1，x2的值可以调整渐变半径大小；<br>当y1不等于y2，x1不等于x2，实现角度渐变，当x1,x2,y1,y2取值为极值的时候接近垂直渐变或水平渐变；<br>当x1等于x2，y1等于y2，实现没有渐变，取from色，即 <strong>from(颜色值)</strong> ；</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jquery 基础用法]]></title>
      <url>http://yardfarmer.github.io/2014/10/31/2014-08-21-jquery%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>整理了这些作为下阶段读源码前的知识储备，同时分享给大家。共勉。</p>
<h2 id="总述"><a href="#总述" class="headerlink" title="总述"></a>总述</h2><p>jQuery 框架提供了很多方法，但大致上可以分为3 大类：</p>
<ol>
<li>获取jQuery 对象的方法</li>
<li>在jQuery 对象间跳转的方法</li>
<li>获取jQuery 对象后调用的方法</li>
</ol>
<h3 id="获取-jQuery-对象"><a href="#获取-jQuery-对象" class="headerlink" title="获取 jQuery 对象"></a>获取 jQuery 对象</h3><p>是怎样获取jQuery 对象。大致来说，是通过最核心的<code>$()</code>方法，将页面上的元素（或者在页面上不存在的 html 片段）包装成 jQuery 对象。<br><code>$()方法</code>里面支持的语法又包括：</p>
<ol>
<li>分别是表达式（包括类表达式.，id 表达式#，元素表达式等）</li>
<li>符号（包括后代符号space，next 符号+等)</li>
<li>过滤器（包括:过滤器和[]过滤器）</li>
<li>现在显然还有更多</li>
</ol>
<p>通过以上组合，通过选择器 <code>$()</code> 可”查询“得到 jQuery 对象（或者jQuery 对象的集合）。</p>
<h3 id="对象跳转"><a href="#对象跳转" class="headerlink" title="对象跳转"></a>对象跳转</h3><p>是在jQuery 对象间的跳转。也就是说，已经得到了一个jQuery 对象，但并不是想要的，那么可以通过一系列的跳转方法，比如<em>parent()、next()、children()、find()</em>等，或者过滤筛选的方法，比如<em>eq、filter()、not()</em>等，来得到最终想要操作的jQuery 对象。</p>
<p>用跳转和过滤方式得到的jQuery 结果，往往通过比较复杂的表达式组合，可以达到同样的目的。<br>比如说 <code>$(&quot;div&quot;).eq(3)</code>，也可以用<code>$(&quot;div:eq(3)&quot;)</code> 达到同样的目的。<br>又比如说<code>$(&quot;div&quot;).find(&quot;span&quot;)</code>，可以用<code>$(&quot;div span&quot;)</code>取到同样的元素。</p>
<p>方法是很灵活的，要根据具体的情况来选择。根据经验来说，HTML 页面写得越规范，使用 jQuery 就越简单。</p>
<p>还有一种情况，在得到了jQuery()对象之后，想要判断其是否满足条件，那么可以调用 ==is()、hasClass()==等方法，返回一个boolean 值，进行后续的判断。这类方法也可以归到这类。</p>
<h3 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h3><p>在获取准确的 jQuery 对象之后，调用其上的各种方法，来进行操作。这一步反而是比较简单的了。<br>后面就是对 jQuery 框架各种方法的简要介绍。</p>
<h3 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h3><p>####$(…);</p>
<pre><code>/**
 *  一切的核心，可以跟4 种参数。
 */
$();

/**
 *  返回jQuery 对象或者jQuery 对象的集合
 *  比如$(&quot;#id&quot;)、$(&quot;.class&quot;)
 */
$(expression);

/**
 *  返回jQuery 对象，或者jQuery 对象的集合
 *  比如$(&quot;&lt;span&gt;hello world&lt;/span&gt;&quot;)
 */
$(html)

/**
 *  返回jQuery 对象，或者jQuery 对象的集合
 *  比如$(document.body)
 */
$(element)

/**
 *  所有元素
 */
$(*)
```
</code></pre><h4 id="jQuery-对象获取"><a href="#jQuery-对象获取" class="headerlink" title="jQuery 对象获取"></a>jQuery 对象获取</h4><pre><code>```javascript

/**
 *  返回该jQuery 对象在集合中的索引
 */
jQuery.index(element);

/**
 *  遍历jQuery 对象集合，在每个对象上执行 callback 函数，
 *  function callback(index, domElement){
 *    this //DOMElement
 *  };
 */
jQuery.each(function);

/**
 *  返回 jQuery 对象集合的大小
 */
jQuery.size();

/**
 *  相当于size()方法
 */
jQuery.length

/**
 *  获取原生 DomElement 对象的 Array,
 *  即将 jQuery 对象转成 数组对象，
 *  虽然 jQuery 对象也有 length 属性，且可用下标读写
 *  但并非是数组对象。
 */
jQuery.get()

/**
 *  获取原生 DomElement 对象
 */
jQuery.get(index)

/**
 *  获取 jQuery 对象集合中的一个 jQuery 对象
 */
jQuery.eq(position)
</code></pre><h4 id="Data-相关方法"><a href="#Data-相关方法" class="headerlink" title="Data 相关方法"></a>Data 相关方法</h4><p>在匹配的元素身上存值(store data)， <code>.data()</code> 方法允许在我们以一种安全的方式附加数据到 dom 元素，不会产生循环引用和内存泄露。</p>
<pre><code>jQuery.data(name)        // 取值
jQuery.data(name, value) // 赋值
jQuery.removeData(name)  // 清理

$( &quot;body&quot; ).data( &quot;foo&quot;, 52 );
$( &quot;body&quot; ).data( &quot;bar&quot;, { myType: &quot;test&quot;, count: 40 } );
$( &quot;body&quot; ).data( { baz: [ 1, 2, 3 ] } );
$( &quot;body&quot; ).data( &quot;foo&quot; ); // 52
$( &quot;body&quot; ).data(); // { foo: 52, bar: { myType: &quot;test&quot;, count: 40 }, baz: [ 1, 2, 3 ] }
</code></pre><h4 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h4><pre><code>/**
 *  多目标选择器
 *  可以选择多个元素或者表达式，
 *  包装成 jQuery 对象的集合
 *  例子：$(&quot;div,span&quot;)
 */

$(&quot;table tr td&quot;); //multiple(selector1, selector2)

$(&quot;#id &gt; span&quot;); //直接节点

$(&quot;label + input&quot;) //next(prev, next) 同级的紧挨着的下一个

$(&quot;#prev ~ div&quot;) // siblings(prev, siblings),同样要求是同级
</code></pre><h4 id="基本的过滤器"><a href="#基本的过滤器" class="headerlink" title="基本的过滤器"></a>基本的过滤器</h4><pre><code>$(&quot;:header&quot;);     // 所有 header, &lt;h1&gt;~&lt;h6&gt;
$(&quot;tr:odd&quot;);      // 选中所有奇数行
$(&quot;tr:even&quot;);     // 选中所有偶数行
$(&quot;:animated&quot;);   // 选中所有当前有特效的素
$(&quot;div:animated&quot;);// 选中运行动画的
$(&quot;tr:first&quot;);    // 选中第一行
$(&quot;tr:last&quot;);     // 选中最后一行
$(&quot;input:not(:checked)&quot;);  //选中所有没有“checked”
$(&quot;td:gt(4)&quot;);    // 选中所有index 是4 之后的td
$(&quot;td:lt(4)&quot;);    // 选中所有index 是4 之前的td

$(&quot;td:eq(4)&quot;);    // 选中index 是 4 的td
$(&quot;td&quot;).eq(4);    // 选中index 是 4 的td
</code></pre><h4 id="内容过滤选择器"><a href="#内容过滤选择器" class="headerlink" title="内容过滤选择器"></a>内容过滤选择器</h4><pre><code>$(&quot;div:contains(&apos;John&apos;)&quot;); // 选中所有包含&quot;John&quot;的div
$(&quot;td:empty&quot;);    // 选中所有内容为空的td
$(&quot;div:has(p)&quot;);  // 选中包含有&lt;p&gt;元素的&lt;div&gt;元素，返回jQuery 对象集合

$(&quot;td:parent&quot;);   //选中所有包含子节点的元素，包括文本也可以算是子节点
</code></pre><h4 id="可见性过滤器"><a href="#可见性过滤器" class="headerlink" title="可见性过滤器"></a>可见性过滤器</h4><pre><code>$(&quot;span:hidden&quot;);  // 选中所有隐藏的&lt;span&gt;
$(&quot;span:visible&quot;); // 选中所有可见的&lt;span&gt;
</code></pre><p>关于可见性，这里需要额外说明的。在老版本的 jQuery 中 ==<code>visibility:hidden;</code>是认为不可见的==，我有证据，</p>
<pre><code>Sizzle.selectors.filters.hidden = function(elem){
    return &quot;hidden&quot; === elem.type ||
        jQuery.css(elem, &quot;display&quot;) === &quot;none&quot; ||
        jQuery.css(elem, &quot;visibility&quot;) === &quot;hidden&quot;;
};
`
</code></pre><p>这段代码出自 <code>jquery-1.3.1.js</code>,然而到近代的版本中(在1.3.2就改了)</p>
<pre><code>jQuery.expr.filters.hidden = function( elem ) {
          var width = elem.offsetWidth,
              height = elem.offsetHeight;
          // 没有 visibility 什么事
          return ( width === 0 &amp;&amp; height === 0 ) || (!jQuery.support.reliableHiddenOffsets &amp;&amp; ((elem.style &amp;&amp; elem.style.display) || jQuery.css( elem, &quot;display&quot; )) === &quot;none&quot;);
      };
</code></pre><p>简单的说就是：==如果元素占用空间了，就认为是可见的。==只要不是0的都算可见的。 </p>
<p>所以，<code>visibility：hidden;</code> 或者 <code>opacity:0;</code> 由于占有空间，它们算事“可见”的。</p>
<h4 id="属性过滤器"><a href="#属性过滤器" class="headerlink" title="属性过滤器"></a>属性过滤器</h4><pre><code>$(&quot;div[id]&quot;);   // 选中包含 id 属性的div
$(&quot;input[name$=&apos;bc&apos;]&quot;);  // 选中 name 属性以 &apos;bc&apos; 结尾的 input
$(&quot;input[name^=&apos;letter&apos;]&quot;); // 选中属性 name 是以&apos;letter&apos;开头的 input
$(&quot;input[tag*=&apos;man&apos;]&quot;); // 属性tag里包含&apos;man&apos;
$(&quot;input[abc=&apos;def&apos;]&quot;); // 属性 abc 的值为 &apos;def&apos;

$(&quot;input[title!=&apos;722&apos;]&quot;);  // 选中属性 title 不包含&apos;722&apos;的
$(&quot;input[id][gender$=&apos;man&apos;]&quot;); // 选中包含id 属性，和以&apos;man&apos;结尾的属性 gender 的&lt;input&gt;元素
</code></pre><h4 id="孩子过滤器"><a href="#孩子过滤器" class="headerlink" title="孩子过滤器"></a>孩子过滤器</h4><pre><code>$(&quot;ul li:nth-child(2)&quot;); // 选中自身是&lt;ul&gt;元素的第二个子节点的&lt;li&gt;元素，注意这个计算是从 1 开始的，不是从0 开始
$(&quot;div span:firstChild&quot;); // 选中自身是&lt;div&gt;元素的第一个子节点的&lt;span&gt;元素
$(&quot;div span:lastChild&quot;); // 选中自身是&lt;div&gt;元素的最后一个子节点的&lt;span&gt;元素
</code></pre><h4 id="表单过滤器"><a href="#表单过滤器" class="headerlink" title="表单过滤器"></a>表单过滤器</h4><pre><code>$(&quot;:button&quot;);   //所有 &lt;button&gt; 和 &lt;input type=&quot;button&quot;&gt; 元素
$(&quot;form :checkbox&quot;)； // 选中所有&lt;form&gt;标签下的&lt;input type=&quot;checkbox&quot;&gt; 不过这样会比较慢

$(&quot;input:checkbox&quot;)； // 推荐

$(&quot;:file&quot;)； // 选中所有&lt;input type=&quot;file&quot;&gt;
$(&quot;:hidden&quot;); // 选中所有隐藏元素，以及&lt;input type=&quot;hidden&quot;&gt;
$(&quot;:input&quot;); // 选中所有&lt;input&gt;
$(&quot;:text&quot;);  // 选中所有&lt;input type=&quot;text&quot;&gt;
$(&quot;:password&quot;); // 选中所有&lt;input type=&quot;password&quot;&gt;
$(&quot;:radio&quot;);    // 选中所有&lt;input type=&quot;radio&quot;&gt;
$(&quot;input:radio&quot;);  // 最佳实践是这样

$(&quot;:image&quot;)； // 选中所有&lt;input type=&quot;image&quot;&gt;
$(&quot;:reset&quot;);  // 选中所有&lt;input type=&quot;reset&quot;&gt;
$(&quot;:submit&quot;); // 选中所有&lt;input type=&quot;submit&quot;&gt;

$(&quot;input:enabled&quot;); // 选中所有enabled 的&lt;input&gt;元素
$(&quot;input:disabled&quot;); // 选中所有disabled 的&lt;input&gt;元素
$(&quot;input:checked&quot;); // 选中所有 checked 的 checkbox
$(&quot;input:selected&quot;); // 选中所有 selected 的&lt;option&gt;元素
</code></pre><h4 id="属性相关的方法"><a href="#属性相关的方法" class="headerlink" title="属性相关的方法"></a>属性相关的方法</h4><pre><code>jQuery.removeAttr(name);
jQuery.attr(name); // 返回属性的值，比如$(&quot;img&quot;).attr(&quot;src&quot;)
jQuery.attr(key,value); // 这是设置属性的值
jQuery.attr(properties); // 也是设置属性的值

$(&quot;img&quot;).attr({
    src: &quot;/images/hat.gif&quot;,
    title: &quot;jQuery&quot;,
    alt: &quot;jQuery Logo&quot;
});

jQuery.attr(key,function); // function 计算出的结果，赋给key

// 在回调函数中
function callback(index) {
 // index == position in the jQuery object
 // this means DOM Element
}
</code></pre><h4 id="类相关的操作"><a href="#类相关的操作" class="headerlink" title="类相关的操作"></a>类相关的操作</h4><pre><code>jQuery.toggleClass(class); // 反复加减 class
jQuery.toggleClass(class,switch); // 增加一个 switch 表达式

// 表达式计算后返回 class 名称
$( &quot;div.foo&quot; ).toggleClass(function() {
  if ( $( this ).parent().is( &quot;.bar&quot; ) ) {
    return &quot;happy&quot;;
  } else {
    return &quot;sad&quot;;
  }
});

jQuery.hasClass(class)； // 返回boolean
jQuery.removeClass(class); // 去掉挂载的 class
jQueyr.addClass(class)； // 加载 class
</code></pre><h4 id="html相关的操作"><a href="#html相关的操作" class="headerlink" title="html相关的操作"></a>html相关的操作</h4><pre><code>jQuery.html()； // 返回包含的html 文本
jQuery.html(val); // 用val 替换包含的 html 文本,输入的代码会被执行
</code></pre><h4 id="文本相关的方法"><a href="#文本相关的方法" class="headerlink" title="文本相关的方法"></a>文本相关的方法</h4><pre><code>jQuery.text();  // 返回包含的纯文本，不会包括html 标签，比如&lt;span&gt;abcd&lt;/span&gt;，调用 .text() 方法，只会返回abcd，不会返回&lt;span&gt;abcd&lt;/span&gt;

jQuery.text(val); // 用 val 替换包含的纯文本，和html(val)方法的区别在于，所有的内容会被看作是纯文本，不会作为html 标签进行处理，比如调用.text(&quot;&lt;span&gt;abcd&lt;/span&gt;&quot;)，&lt;span&gt; 和 &lt;/span&gt;不会被认为是html 标签，而是作为纯文本显示了。
</code></pre><h4 id="值相关的操作"><a href="#值相关的操作" class="headerlink" title="值相关的操作"></a>值相关的操作</h4><pre><code>jQuery.val(); // 返回 string 或者array
jQuery.val(val); // 设置 string 值
jQuery.val(array); // 设置多个值，以上 3 个方法，主要都是用在表单标签里，如&lt;input type=&quot;text&quot;&gt;，&lt;input type=&quot;checkbox&quot;&gt;等
</code></pre><h4 id="在jQuery-对象之间查找"><a href="#在jQuery-对象之间查找" class="headerlink" title="在jQuery 对象之间查找"></a>在jQuery 对象之间查找</h4><p>需要弄清： ==文本和节点是两回事，在 DOM 里就分开了。==<br>    jQuery.parent(expr); // 找父亲节点，可以传入expr 进行过滤,比如</p>
<pre><code>$(&quot;span&quot;).parent();
$(&quot;span&quot;).parent(&quot;. class&quot;); // 用表达式过滤

jQuery.parents(expr); // 祖先元素，不限于父元素
jQuery.children(expr); // 返回所有子节点(不包括文本)，和 parents()方法不一样的是，这个方法只会返回直接的孩子节点，不会返回所有的子孙节点

jQuery.contents(); // 返回下面的所有内容，包括节点和文本。这个方法和 children()的区别就在于，包括空白文本，也会被作为一个jQuery 对象返回，children()则只会返回节点

jQuery.prev(); // 返回上一个兄弟节点，不是所有的兄弟节点
jQuery.prevAll(); // 返回所有之前的兄弟节点
jQuery.next(); // 返回下一个兄弟节点，不是所有的兄弟节点 (+)
jQuery.nextAll(); // 返回所有之后的兄弟节点(~)
jQuery.siblings(); // 返回兄弟姐妹节点，不分前后
jQuery.add(expr); // 往既有的jQuery 对象集合中增加新的jQuery 对象，例子：
$(&quot;div&quot;).add(&quot;p&quot;);

jQuery.find(expr); // 从当前的初始集合下去找,不会返回初始集合内容：
$(&quot;body&quot;).find(&quot;div&quot;);
// 等同于：
jQuery.find(&quot;body div&quot;);


jQuery.filter(expr); // 从初始的jQuery 对象集合中筛选出一部分
</code></pre><p>####串联方法</p>
<pre><code>jQuery.andSelf();  // 把最后一次查询前一次的集合,也增加到最终结果集中,比如:

$(&quot;div&quot;).find(&quot;p&quot;).andSelf(); 这样结果集中包括所有的&lt;p&gt;和&lt;div&gt;。如果是$(&quot;div&quot;).find(&quot;p&quot;),那就只有&lt;p&gt;，没有&lt;div&gt;

jQuery.end(); // 把最后一次查询前一次的集合，作为最终结果集，比如
$(&quot;p&quot;).find(&quot;span&quot;).end(); // 所有的&lt;p&gt;，没有&lt;span&gt;
</code></pre><h4 id="DOM-文档操作方法"><a href="#DOM-文档操作方法" class="headerlink" title="DOM 文档操作方法"></a>DOM 文档操作方法</h4><pre><code>a.append(b); // b 加到 a 上
$(&quot;div&quot;).append(&quot;&lt;span&gt;hello&lt;/span&gt;&quot;);

a.appendTo(b); // a 加到 b 上
$(&quot;&lt;span&gt;hello&lt;/span&gt;&quot;).appendTo(&quot;#div&quot;)； 

$(&quot;span&quot;).appendTo(&quot;div&quot;); //隐藏的 move，移动元素

/* 比如在：

 &lt;div id=&apos;a&apos;&gt;a: &lt;span&gt; hello &lt;/span&gt; &lt;/div&gt;
 &lt;div id=&apos;b&apos;&gt;b: &lt;/div&gt;

 经过

 $(&apos;span&apos;).appendTo(&quot;#b&quot;);
</code></pre><p> 结果会是正样：</p>
<pre><code>a:
b: hello
</code></pre><p> 接下来，</p>
<pre><code>jQuery.prepend(content); // 在选择元素的内部第一个位置插入


a.prependTo(b); // a 插到 b 内部的排头位置

jQuery.after(content); 注意是 content，在外部插入，插入到后面，比如
$(&quot;#foo&quot;).after(&quot;&lt;span&gt;hello&lt;/span&gt;&quot;); // 参数是内容，不能是选择器

jQuery.insertAfter(selector)；// 允许是选择器
$(&quot;&lt;span&gt;hello&lt;/span&gt;&quot;).insertAfter(&quot;#foo&quot;);

jQuery.before(content); // 在外部插入，插入到前面, 参数不是选择器

jQuery.insertBefore(selector); // 外面插入

jQuery.wrapInner(html); // 在内部插入标签，比如
$(&quot;p&quot;).wrapInner(&quot;&lt;span&gt;&lt;/span&gt;&quot;);

jQuery.wrap(html); // 在外部插入标签，比如
$(&quot;p&quot;).wrap(&quot;&lt;div&gt;&lt;/div&gt;&quot;); // 所有的 p 都会被各自的div 包裹

jQuery.wrapAll(html); // 所选元素会被同一个大的 html 整个的全部包裹

jQuery.replaceWith(content); 比如
$(this).replaceWith(&quot;&lt;div&gt;&quot;+$(this).text()+&quot;&lt;/div&gt;&quot;);

jQuery.replaceAll(selector);
$(&quot;&lt;div&gt;hello&lt;/div&gt;&quot;).replaceAll(&quot;p&quot;);

jQuery.empty();
$(&quot;p&quot;).empty(); // 从娃娃做起，会把&lt;p&gt;下面的所有子节点清空,但不清理 p

jQuery.remove(expr);
$(&quot;p&quot;).remove(); // 从自身做起，会把所有&lt;p&gt;移除，可以用表达式做参数，进行过滤
</code></pre><p>// 表面看跟 remove 做的一样，删除元素；<br>// 但是保留了元素中的数据或事件, 通过返回值返回，留存后用，<br>// 需要时候随时能补上去，绑定的数据事件不受影响。<br>    jQuery.detach();</p>
<pre><code>jQuery.clone([withDataAndEvents ] ));
</code></pre><p>使用案例</p>
<p>在使用 append 的时候，隐约的我们发现了它具有移动的功效：</p>
<pre><code>&lt;div class=&quot;container&quot;&gt;
  &lt;div class=&quot;hello&quot;&gt;Hello&lt;/div&gt;
  &lt;div class=&quot;goodbye&quot;&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;

$( &quot;.hello&quot; ).appendTo( &quot;.goodbye&quot; );
</code></pre><p>结果变成了这样：</p>
<pre><code>&lt;div class=&quot;container&quot;&gt;
  &lt;div class=&quot;goodbye&quot;&gt;
    Goodbye
    &lt;div class=&quot;hello&quot;&gt;Hello&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre><p>如果我们的需求是额外的拷贝一份元素到目的地：</p>
<pre><code>$( &quot;.hello&quot; ).clone().appendTo( &quot;.goodbye&quot; );

这样会更方便，结果会是这样：

    &lt;div class=&quot;container&quot;&gt;
      &lt;div class=&quot;hello&quot;&gt;Hello&lt;/div&gt;
      &lt;div class=&quot;goodbye&quot;&gt; 
        Goodbye 
        &lt;div class=&quot;hello&quot;&gt;Hello&lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
</code></pre><p>clone 的用法也分两种：</p>
<pre><code>clone(true);  // 克隆，并且连带数据和绑定的事件
clone()/clone(false); // 克隆，表面结构
</code></pre><h4 id="CSS-相关方法"><a href="#CSS-相关方法" class="headerlink" title="CSS 相关方法"></a>CSS 相关方法</h4><pre><code>jQuery.css(name); // 获取一个 css 属性的值，比如
$(&quot;p&quot;).css(&quot;color&quot;)

jQuery.css(object); // 设置css 属性的值，比如
$(&quot;p&quot;).css({
     &quot;color&quot;:&quot;red&quot;,
     &quot;border&quot;:&quot;1px red solid&quot;
  });

jQuery.css(name,value);
$(&quot;p&quot;).css(&quot;color&quot;,&quot;red&quot;);
</code></pre><h4 id="位置计算相关方法"><a href="#位置计算相关方法" class="headerlink" title="位置计算相关方法"></a>位置计算相关方法</h4><pre><code>jQuery.scrollLeft(); // 设置滚动条偏移，这个方法对可见元素或不可见元素都生效
jQuery.scrollTop();  // 设置滚动条偏移，这个方法对可见元素或不可见元素都生效

jQuery.offset();     // 计算偏移量，返回值有 2 个属性，分别是 top 和left

jQuery.position();  // 计算位置，返回值也有2 个属性，top 和 left,返回：

[object Object] {
  left: 34.546875,
  top: 11
}
</code></pre><p>这里需要额外补充：</p>
<blockquote>
<p>The .offset() method allows us to retrieve the current position of an element relative to the document. Contrast this with .position(), which retrieves the current position relative to the offset parent.</p>
</blockquote>
<p>简单来说就是：==offset 是相对于 document，而 position 相对于父元素。==</p>
<h4 id="宽度和高度计算相关方法"><a href="#宽度和高度计算相关方法" class="headerlink" title="宽度和高度计算相关方法"></a>宽度和高度计算相关方法</h4><p>这组方法需要结合CSS 的盒子模型来理解，margin 始终不参与计算</p>
<pre><code>jQuery.height();     // 计算的是 content
jQuery.innerHeight();  // 计算的是 content+padding
jQuery.outerHeight(); // 计算的是content+padding+border

jQuery.width();
jQuery.innerWidth();
jQuery.outerWidth();
</code></pre><h4 id="浏览器及特性检测"><a href="#浏览器及特性检测" class="headerlink" title="浏览器及特性检测"></a>浏览器及特性检测</h4><pre><code>$.support，可以检测当前浏览器是否支持下列属性，返回boolean。包括boxModel、cssFloat、
opacity、tbody 等
$.browser，检测当前浏览器类型，返回一个map，其中可能的值有safari、opera、msie、mozilla
</code></pre><h4 id="数据缓存方法"><a href="#数据缓存方法" class="headerlink" title="数据缓存方法"></a>数据缓存方法</h4><p>// 该类方法是jQuery.data()方法和jQuery.removeData()的另一种形式，增加的elem 参数是DOM Element</p>
<pre><code>$.data(elem, name);// 取出elem 上name 的值
$.data(elem, name, value); // 设置elem,name为 value
$.removeData(elem, name); //删除 elem 上的 name
$.removeData(elem); // 删除elem 上的所有缓存数据
</code></pre><h4 id="工具方法"><a href="#工具方法" class="headerlink" title="工具方法"></a>工具方法</h4><pre><code>$.isArray(obj); // 检测一个对象是否是数组
$.isFunction(obj); // 检测一个对象是否是函数
$.trim(str); // 去除string 的空格

$.( value, array [, fromIndex ] )
$.inArray(value, array); // 返回value 在array 中的下标， 如果没有找到则返回-1

$.inArray(123, [&quot;john&quot;,1,123,&quot;f&quot;]); // return2

$.unique(array); // 去除array 中的重复元素，该方法只对DOM Element 有效，对string 和 number 无效
</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最后，由于篇幅限制，把最重要的 <code>事件绑定</code> 和 <code>ajax</code> 独立出来，并且也还没写完呢，先到这里。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[尝试山寨Backbone]]></title>
      <url>http://yardfarmer.github.io/2014/10/31/2014-11-03-mvc-backbone/</url>
      <content type="html"><![CDATA[<p>前几天梳理了下 MVC 的知识,准备好基础,现在开始学习 BackBone.js 。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mvc-backbone]]></title>
      <url>http://yardfarmer.github.io/2014/10/31/2013-11-15-%E5%B0%9D%E8%AF%95%E5%B1%B1%E5%AF%A8Backbone/</url>
      <content type="html"><![CDATA[<p>学习了 BackBone.js, 为了更加深刻的理解，尝试山寨之。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mvc之投石问路]]></title>
      <url>http://yardfarmer.github.io/2014/10/31/2014-10-31-mvc/</url>
      <content type="html"><![CDATA[<h2 id="什么是MVC"><a href="#什么是MVC" class="headerlink" title="什么是MVC"></a>什么是MVC</h2><p>MVC 是一种设计模式，它将应用划分为3 个部分：数据（模型）、展现层（视图）和用户交互层（控制器）。换句话说，一个事件的发生是这样的过程：<br>1． 用户和应用产生交互。<br>2． 控制器的事件处理器被触发。<br>3． 控制器从模型中请求数据，并将其交给视图。<br>4． 视图将数据呈现给用户。</p>
<p>现在来看一个真实的例子</p>
<p>1． 用户提交一个新的聊天消息。<br>2． 控制器的事件处理器被触发。<br>3． 控制器创建了一个新的聊天模型（Chat Model）记录。<br>4． 然后控制器更新视图。<br>5． 用户在聊天窗口看到新的聊天消息。</p>
<h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><p>模型用来存放应用的所有数据对象。比如，可能有一个User 模型，用以存放用户列表、他们的属性及所有与模型有关的逻辑。<br>模型不必知晓视图和控制器的细节，模型只需包含数据及直接和这些数据相关的逻辑。任何事件处理代码、视图模板，以及那些和模型无关的逻辑都应当隔离在模型之外。</p>
<blockquote>
<p>将模型和视图的代码混在一起，是违反MVC 架构原则的。模型是最应该从你的应用中解<br>耦出来的部分。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> user = User.find(<span class="string">'foo'</span>);</div><div class="line">user.destroy();</div></pre></td></tr></table></figure>
<p>当控制器从服务器抓取数据或创建新的记录时，它就将数据包装成模型实例。</p>
<h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>视图层是呈现给用户的，用户与之产生交互。在JavaScript 应用中，视图大都是由HTML、CSS 和JavaScript 模板组成的。</p>
<p>实际上，和模型类似，视图也应当从应用的其他部分中解耦出来。视图不必知晓模型和控制器中的细节，它们是相互独立的。</p>
<blockquote>
<p>将逻辑混入视图之中是编程的大忌。</p>
</blockquote>
<p>##控制器<br>控制器是模型和视图之间的纽带。控制器从视图获得事件和输入，对它们进行处理（很可能包含模型），并相应地更新视图。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Controller = &#123;&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 使用匿名函数来封装一个作用域</span></div><div class="line">(Controller.users = <span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">var</span> nameClick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="comment">/* ... */</span></div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	<span class="comment">// 在页面加载时绑定事件监听</span></div><div class="line">	$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		$(<span class="string">"#view .name"</span>).click(nameClick);</div><div class="line">	&#125;);</div><div class="line"></div><div class="line">&#125;)(jQuery);</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ajax]]></title>
      <url>http://yardfarmer.github.io/2014/10/31/2014-10-31-ajax_deferred_promise/</url>
      <content type="html"><![CDATA[<p>最本质的 ajax 其实是这样的：</p>
<iframe width="100%" height="300" src="http://jsfiddle.net/codinglion/Lnbvv/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>jQuery 出现后，在发出Ajax请求时，jQuery会帮我们确定取得数据的最佳方式。可用的方式包括标准的XMLHttpRequest对象、ms的ActiveX对象XMLHTTP 或 script 标签。</p>
<p>由于不同请求使用的数据传输方式可能不一样，那我们就需要一个公共的接口与这些通信交互。为此，jqXHR对象提供了这种接口在 XMLHttpRequest对象可用的情况下，封装该对象的行为；在XMLHttpRequest对象不可用的情况下，则尽可能模拟它。这个对象提供给我们的属性和方法包括：</p>
<ul>
<li>包含返回数据的 .responseText或.responseXML；</li>
<li>包含状态码和状态描述的 .status和.statusText；</li>
<li>操作与请求一起发送的HTTP头部的.setRequestHeader()；</li>
<li>提早中断通信的.abort()</li>
</ul>
<p>jQuery的所有 Ajax 方法都会返回jqXHR对象，只要把这个对象保存起来，随后就可以方便地使用这些属性和方法。</p>
<p>乍一看，调用.done()和.fail()与之前的写法相比并没有明显的好处。可是，这两个承诺方法的确是有好处的。第一，可以多次调用这两个方法，根据需要添加多个处理程序。</p>
<p>第二，如果把调用$.ajax()的结果保存在一个变量中，那么就可以考虑代码的可读性，在后面再添加处理程序。</p>
<p>第三，如果在添加处理程序的时候Ajax操作已经完成，就会立即调用该处理程序。</p>
<p>第四，我们最好采用与jQuery库中其他代码一致的语法，这带来的好处不言而喻。</p>
<hr>
<h2 id="Promise-对象和Deferred-对象"><a href="#Promise-对象和Deferred-对象" class="headerlink" title="Promise 对象和Deferred 对象"></a>Promise 对象和Deferred 对象</h2><pre><code>// jQuery 1.4 
// &quot;马上就要&quot;
$.get(&apos;/mydata&apos;, {
    success: onSuccess,
    failure: onFailure,
    always: onAlways
});

// jQuery 1.5
// 分期交付
var promise = $.get(&apos;/mydata&apos;);
    promise.done(onSuccess);
    promise.fail(onFailure);
    promise.always(onAlways);
</code></pre><p>jQuery 1.5 改变了 Ajax 那种“马上就要”的态度。我们喜爱的所有 Ajax 函数（$.ajax、$.get 及$.post）现在都会返回Promise（承诺）对象。</p>
<p>Promise 对象代表一项有两种可能结果（成功或失败）的任务，它还持有多个回调，出现不同结果时会分别触发相应的回调。</p>
<p>进度通知的存在并没有改变每个Promise 对象的最终状态为已执行或<br>已拒绝这一事实。（否则，Promise 对象将永远保持挂起状态。）但为<br>什么要这样呢？为什么不让Promise 对象随时变化成任意的状态，而<br>偏偏只有这两种状态呢？</p>
<iframe width="100%" height="300" src="http://jsfiddle.net/codinglion/826p0n62/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<iframe width="100%" height="300" src="http://jsfiddle.net/codinglion/zpnpzga2/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<iframe width="100%" height="300" src="http://jsfiddle.net/codinglion/toLdwsjv/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<iframe width="100%" height="300" src="http://jsfiddle.net/codinglion/1qmmro5o/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<iframe width="100%" height="300" src="http://jsfiddle.net/codinglion/bfdpnnen/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux 用户管理]]></title>
      <url>http://yardfarmer.github.io/2014/10/31/2014-10-31-linux_user_manage/</url>
      <content type="html"><![CDATA[<p>创建一个用户 foo 这个用户只能在/home/foo 上面增加删除文件， foo 不能在其他目录加减文件</p>
<pre><code>useradd -d /home/foo  -m foo
[root@] # passwd jc

chown foo -R /home/foo
</code></pre><p>Linux 系统是一个多用户多任务的分时操作系统，用户在登录时键入正确的用户名和口令后，就能够进入系统和自己的主目录。</p>
<p>用户账号的管理工作主要涉及到用户账号的添加、修改和删除。<br>添加用户账号就是在系统中创建一个新账号，然后为新账号分配用户号、用户组、主目录和登录Shell等资源。刚添加的账号是被锁定的，无法使用。</p>
<h2 id="添加新的用户账号"><a href="#添加新的用户账号" class="headerlink" title="添加新的用户账号"></a>添加新的用户账号</h2><p>使用useradd命令，其语法如下：</p>
<p>代码:<br>useradd 选项 用户名</p>
<p>-c comment 指定一段注释性描述。<br>-d 目录 指定用户主目录，如果此目录不存在，则同时使用 ==-m ==选项，可以创建主目录。<br>-g 用户组 指定用户所属的用户组。<br>-G 用户组，用户组 指定用户所属的附加组。<br>-s Shell文件 指定用户的登录Shell。<br>-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。</p>
<pre><code># useradd –d /usr /sam -m sam
</code></pre><p>此命令创建了一个用户sam，其中-d和-m选项用来为登录名sam产生一个主目录/usr/sam（/usr为默认的用户主目录所在的父目录）。</p>
<pre><code># useradd -s /bin/sh  -g group –G adm,root gem
</code></pre><p>此命令新建了一个用户gem，该用户的登录Shell是/bin/sh，它属于group用户组，同时又属于adm和root用户组，其中group用户组是其主组。</p>
<h2 id="删除帐号"><a href="#删除帐号" class="headerlink" title="删除帐号"></a>删除帐号</h2><p>如果一个用户的账号不再使用，可以从系统中删除。删除用户账号就是要将/etc/passwd等系统文件中的该用户记录删除，必要时还删除用户的主目录。删除一个已有的用户账号使用userdel命令，其格式如下：</p>
<p>代码:<br>userdel 选项 用户名</p>
<p>常用的选项是-r，它的作用是把用户的主目录一起删除。</p>
<p>代码:</p>
<pre><code># userdel sam
</code></pre><p>此命令删除用户sam在系统文件中（主要是/etc/passwd, /etc/shadow, /etc/group等）的记录，同时删除用户的主目录。</p>
<h2 id="修改帐号"><a href="#修改帐号" class="headerlink" title="修改帐号"></a>修改帐号</h2><p>修改用户账号就是根据实际情况更改用户的有关属性，如用户号、主目录、用户组、登录Shell等。</p>
<pre><code>usermod 选项 用户名
</code></pre><p>常用的选项包括-c, -d, -m, -g, -G, -s, -u以及-o等，这些选项的意义与useradd命令中的选项一样，可以为用户指定新的资源值。另外，有些系统可以使用如下选项：</p>
<p>-l 新用户名</p>
<pre><code>#usermod -l urchin(新用户名称)  test(原来用户名称) 
</code></pre><p>这个选项指定一个新的账号，即将原来的用户名改为新的用户名。</p>
<pre><code># usermod -s /bin/ksh -d /home/z –g developer sam
</code></pre><p>此命令将用户sam的登录Shell修改为ksh，主目录改为/home/z，用户组改为developer。</p>
<h2 id="用户口令的管理"><a href="#用户口令的管理" class="headerlink" title="用户口令的管理"></a>用户口令的管理</h2><p>用户管理的一项重要内容是用户口令的管理。用户账号刚创建时没有口令，但是被系统锁定，无法使用，必须为其指定口令后才可以使用，即使是指定空口令。<br>指定和修改用户口令的Shell命令是passwd。超级用户可以为自己和其他用户指定口令，普通用户只能用它修改自己的口令。</p>
<pre><code>passwd 选项 用户名
</code></pre><p>-l 锁定口令，即禁用账号。<br>-u 口令解锁。<br>-d 使账号无口令。<br>-f 强迫用户下次登录时修改口令。<br>如果默认用户名，则修改当前用户的口令。</p>
<p>假设当前用户是sam，则下面的命令修改该用户自己的口令：</p>
<pre><code>$ passwd
Old password:******
New password:*******
Re-enter new password:*******
</code></pre><p>如果是超级用户，可以用下列形式指定任何用户的口令：</p>
<pre><code># passwd sam
New password:*******
Re-enter new password:*******
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[为什么闭包会引起内存泄露]]></title>
      <url>http://yardfarmer.github.io/2014/10/31/2014-10-31-%E9%97%AD%E5%8C%85%E5%92%8C%E5%86%85%E5%AD%98/</url>
      <content type="html"><![CDATA[<p>JavaScript使用一种称为垃圾收集的技术来管理分配给它的内存。这与C这样的底层语言不同，C要求使用多少借多少，用完再释放回去。其他语言，比如 Objective-C，实现了一个引用计数系统来辅助完成这些工作，我们能够了解到有多少个程序块使用了一个特定的内存段，因而可以在不需要时清除这些内存段。</p>
<p>JavaScript是一种高级语言，它一般是通过后台来维护这种计数系统。</p>
<p>当JavaScript代码生成一个新的内存驻留项时（比如一个对象或函数），系统就会为这个项留出一块内存空间。因为这个对象可能会被传递给很多函数，并且会被指定给很多变量，所以很多代码都会指向这个对象的内存空间。JavaScript会跟踪这些指针，当最后一个指针废弃不用时，这个对象占用的内存会被释放。</p>
<pre><code>A ---------&gt; B ------------&gt; C
</code></pre><p>例如对象A有一个属性指向B，而B也有一个属性指向C。即使当前作用域中只有对象A有效，但由于指针的关系所有3个对象都必须保留在内存中。当离开A的当前作用域时（例如代码执行到声明A的函数的末尾处），垃圾收集器就可以释放A占用的内存。此时，由于没有什么指向B，因此B可以释放，最后，C也可以释放。</p>
<p>然而，当对象间的引用关系变得复杂时，处理起来也会更加困难。</p>
<pre><code>A ---------&gt; B ------------&gt; C
             ^、_ _ _ _ _ _ _|
</code></pre><p>这里，我们又为对象C添加了一个引用B的属性。在这种情况下，当A释放时，仍然有来自C的指针指向B。这种引用循环需要由JavaScript进行特殊的处理，但必须考虑到整个循环与作用域中的其他变量已经处于隔离状态。</p>
<p>从这里我们可以看到，闭包问题的本质是作用域的问题，我平时写的闭包大多出现在：</p>
<h3 id="循环引用"><a href="#循环引用" class="headerlink" title="循环引用"></a>循环引用</h3><p>闭包可能会导致在不经意间创建循环引用。因为函数是必须保存在内存中的对象，所以位于函数执行上下文中的所有变量也需要保存在内存中：</p>
<pre><code>function outerFn() {
    var outerVar = {};
    function innerFn() {
        console.log(outerVar);
    }
    outerVar.fn = innerFn;
    return innerFn;
};
</code></pre><p>这里创建了一个名为 outerVar 的对象，该对象在内部函数innerFn()中被引用。然后，为 outerVar 创建了一个指向 innerFn()的属性，之后返回了innerFn()。这样就在 innerFn() 上创建了一个引用outerVar的闭包，而outerVar又引用了innerFn()。</p>
<p>这会导致变量在内存中存在的时间比想象得长，而且又不容易被发现。这还不算完，还有可能会出现比这种情况更隐蔽的引用循环：</p>
<pre><code>function outerFn() {
    var outerVar = {};
    function innerFn() {
        console.log(&apos;hello&apos;);
    }
    outerVar.fn = innerFn;
    return innerFn;
};
</code></pre><p>这里我们修改了innerFn()，不再招惹 outerVar。但是，这样做仍然没有断开循环引用。<br>即使innerFn()不再勾引 outerVar，outerVar 也仍然位于innerFn()的封闭环境中。由于闭包的原因，位于 outerFn()中的所有变量都隐含地被 innerFn()所引用。我们再想一想，在 java 中的内部类不也是类似当前情况吗，内部类能够‘看’外部的 this。此时此刻，正如彼时彼刻，竟如此相像。因此，闭包会使意外地创建这些引用循环变得易如反掌。</p>
<h3 id="DOM与JavaScript的循环"><a href="#DOM与JavaScript的循环" class="headerlink" title="DOM与JavaScript的循环"></a>DOM与JavaScript的循环</h3><p>虽然我很早就知道闭包，也在调试内存问题时在 chrome F12 里的 profile 是里看到 <code>closure reference</code>,但是并不清除这个问题的根源。因为上述情况通常不是什么问题，JavaScript能够检测到这些情况并在它们孤立时将其清除。</p>
<p>最近看到关于这个问题的解释：在旧版本IE中存在一种难以处理的循环引用问题。</p>
<blockquote>
<p>当一个循环中同时包含DOM元素和常规JavaScript对象时，IE无法释放任何一个对象——因为这两类对象是由不同的内存管理程序负责管理的。</p>
</blockquote>
<p>除非关闭浏览器，否则这种循环在IE中永远得不到释放。为此，随着时间的推移，这可能会导致大量内存被无效地占用。</p>
<p>导致这种循环的一个常见原因是简单的事件处理:</p>
<pre><code>$(document).ready(function() {
    var button = document.getElementById(&apos;button-1&apos;);
        button.onclick = function() {
            console.log(&apos;hello&apos;);
            return false;
        };
});
</code></pre><p>当指定单击事件处理程序时，就创建了一个在其封闭的环境中包含button变量的闭包。而且，现在的button也包含一个指向闭包（onclick属性自身）的引用。这样，就导致了在IE中即使离开当前页面也不会释放这个循环。<br>为了释放内存，就需要断开循环引用，例如关闭窗口,删除onclick属性。另外，也可以像下面这样重写代码来</p>
<p>避免这种闭包：</p>
<pre><code>function hello() {
    console.log(&apos;hello&apos;);
    return false;
}

$(document).ready(function() {
    var button = document.getElementById(&apos;button-1&apos;);
    button.onclick = hello;
});
</code></pre><p>因为hello()函数不再包含  button，引用就成了单向的（从button到hello）,不存的循环，所以就不会造成内存泄漏了。</p>
<p>用jQuery化解引用循环</p>
<p>下面，我们通过常规的jQuery结构来编写同样的代码：</p>
<pre><code>$(document).ready(function() {
    var $button = $(&apos;#button-1&apos;);
        $button.click(function(event) {
            event.preventDefault();
            console.log(&apos;hello&apos;);
        });
});
</code></pre><p>即使此时仍然会创建一个闭包，并且也会导致同前面一样的循环，但这里的代码却不会使 <code>IE</code> 发生内存泄漏。由于jQuery考虑到了内存泄漏的潜在危害，所以它会手动释放自己指定的所有事件处理程序。只要坚持使用jQuery的事件绑定方法，就无需为这种特定的常见原因导致的内存泄<br>漏而担心。</p>
<p>但是，这并不意味着我们完全脱离了险境。当对DOM元素进行其他操作时，仍然要处处留心。只要是将JavaScript对象指定给DOM元素，就可能在旧版本IE中导致内存泄漏。jQuery只是有助于减少发生这种情况的可能性。</p>
<p>有鉴于此，jQuery为我们提供了另一个避免这种泄漏的工具。用.data()方法，将信息附加到DOM元素。由于这里的数据并非直接保存在扩展属性中（jQuery使用一个内部对象并通过它创建的ID来保存这里所说的数<br>据），因此永远也不会构成引用循环，从而有效回避了内存泄漏问题。</p>
<p>下面附上 jQuery 源码的相关说法：</p>
<pre><code>// We have to handle DOM nodes and JS objects differently        
   because IE6-7

// can&apos;t GC object references properly across the DOM-JS boundary

// Only DOM nodes need the global jQuery cache; JS object data is

// attached directly to the object so GC can occur automatically
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jQuery-event-on]]></title>
      <url>http://yardfarmer.github.io/2014/10/31/2014-08-20-jquery-event-on/</url>
      <content type="html"><![CDATA[<p><strong>.on()</strong></p>
<p><strong>.on(event,[,selector][,data],handler)</strong></p>
<p>重点在于这里有个 selector，这个 selector 是对前面选择器的一个细化，选择的是前面选择器的子元素。</p>
<p> 好方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> option = <span class="string">"loading"</span>;</div><div class="line"><span class="keyword">var</span> a = <span class="keyword">typeof</span> option == <span class="string">"object"</span> &amp;&amp; option;</div><div class="line"><span class="keyword">var</span> b = <span class="literal">true</span> &amp;&amp; option;  <span class="comment">// return "loading"</span></div><div class="line"><span class="keyword">var</span> c = <span class="literal">false</span> &amp;&amp; option; <span class="comment">// return false;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>Selector context is implemented with the .find() method;<br>therefore:</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">   $( <span class="string">"li.item-ii"</span> ).find( <span class="string">"li"</span> ) </div><div class="line"><span class="comment">// is equivalent to </span></div><div class="line">   $( <span class="string">"li"</span>, <span class="string">"li.item-ii"</span> ).</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[隐形的翅膀]]></title>
      <url>http://yardfarmer.github.io/2014/10/23/2014-10-23-swing/</url>
      <content type="html"><![CDATA[<p>每一次都在徘徊孤单中坚强</p>
<p>每一次就算受伤害也不闪泪光</p>
<p>不去想他们拥有美丽的太阳</p>
<p>带我飞，给我希望</p>
<p>我终于翱翔，穿过云朵不害怕</p>
<p>我看见每天的夕阳都会由变化</p>
<p>我终于看到， 所有梦想都开花</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[regexp_reference]]></title>
      <url>http://yardfarmer.github.io/2014/10/23/2014-10-31-regexp/</url>
      <content type="html"><![CDATA[<h2 id="基础符号"><a href="#基础符号" class="headerlink" title="基础符号"></a>基础符号</h2><p>字符串字面值（string literal），来匹配目标字符串的。所谓字符串字面值，就是字面上看到的值.</p>
<h2 id="使用符号"><a href="#使用符号" class="headerlink" title="使用符号"></a>使用符号</h2><pre><code>？ 表示    可选
+  一个或多个    
*  0或多
|  选择，or
\  转义
</code></pre><p>匹配数字: \d ,要匹配非数字字符，可使用包含以下大写字母 D 的简写式：\D。</p>
<pre><code>\D 匹配非数字，同时包括空格（含回车换行）和标点。

\D 与\w 的区别是

\D 会匹配空格、标点符号（引号、连字符、反斜杠、方括号）等字符，而\w 却不会.
</code></pre><p><strong>\w 匹配 数字，字母和下划线</strong></p>
<pre><code>\W 匹配 空格，标点 和 非字母，非数字
</code></pre><p><strong>\D 和 \W 的共同点是：都可以匹配空格和标点</strong></p>
<pre><code>\s 空白符，空白不是空格，匹配 换行 和 空格,它会匹配：
</code></pre><ol>
<li>空格</li>
<li>制表符（\t）</li>
<li>换行符（\n）</li>
<li><p>回车符（\r）</p>
<p>与</p>
</li>
</ol>
<p>[ \t\n\r] </p>
<p>表示相同。</p>
<p>. 点号 可以 <strong>排除行结束符之外的所有字符</strong></p>
<pre><code>[\w\W] 与 .* 的区别  

[\w\W] 用了互补的集合，来表示“任意字符”，这里和.（点）的概念差不多，但.（点）在默认的情况下是不支持换行符的，用[\w\W]就可以匹配任意的字符，也包括换行符；
</code></pre><p>匹配单词的边界 \b</p>
<p>简写式\b匹配单词边界，不消耗任何字符；<br>可以用在从多个单词中查找指定单词，特点是单词周围是空格，所以如果<br>配置文章中的单词用这个 \bxyz\b, 可以免去 axyz 这种巧合，单独的匹配<br>单词 xyz。</p>
<p> .+ 可以用于计算行数，简单至极！<br>原因是点号通常不会匹配折行符，例如换行符（U+000A）或回车符（U+000D） </p>
<p>sed 是Unix 流编辑器，它支持用正则表达式转换文本。</p>
<h2 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h2><blockquote>
<p>断言标记边界，但是并不耗用字符.</p>
</blockquote>
<p>字符并不会返回到结果中。断言也被称做零宽度断言（zero-widthassertion）。零宽度断言不匹配字符，而是匹配字符串中的位置。</p>
<p>其中的一些，比如^ 和$，也叫做锚位符（anchor）<br>^ 会匹配行或者字符串的起始<strong>位置</strong>。</p>
<pre><code>.^$*+?|(){}[]\-
</code></pre><p>这15 个元字符在正则表达式中有特殊含义，用来编写匹配模式。</p>
<p>如果你在RegExr 上方的文本框中尝试匹配这些字符，则不会看到任何结果.</p>
<p>因为RegExr 会认为这是个正则表达式而不是字符串字面值。现在试一下<br>\Q$\E</p>
<p>它将匹配$，因为\Q 和\E 之间的任意字符都会被解释为普通字符。</p>
<h2 id="捕获分组和向后引用"><a href="#捕获分组和向后引用" class="headerlink" title="捕获分组和向后引用"></a>捕获分组和向后引用</h2><p>当一个模式的全部或者部分内容由一对括号分组时，它就对内容进行<br>捕获并临时存储于内存中。</p>
<h2 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h2><h3 id="贪心、懒惰、占有"><a href="#贪心、懒惰、占有" class="headerlink" title="贪心、懒惰、占有"></a>贪心、懒惰、占有</h3><p>量词自身是贪心的。贪心的量词会首先匹配整个字符串。尝试匹配时，它会选定尽<br>可能多的内容，也就是整个输入。</p>
<blockquote>
<p>量词首次尝试匹配整个字符串，如果失败则回退一个字符后再次尝试。这个过程叫做回溯（backtracking）。</p>
</blockquote>
<p>它会每次回退一个字符，直到找到匹配的内容或者没有字符可尝试为止。</p>
<p>懒惰（有时也说勉强）的量词则使用另一种策略。</p>
<p>它从目标的起始位置开始尝试寻找匹配，每次检查字符串的一个字符，寻找它要匹配的内容,最后，它会尝试匹配整个字符串。</p>
<p>比如 在  666666 在匹配 6{2,6}， 既可以2个6 就能匹配，也可以6个6才匹配，懒惰就去用两个6去匹配，贪心就去母串中匹配直到6个6.</p>
<p>要使一个量词成为懒惰的，必须在普通量词后添加一个问号（?）。它每次只“吃”一点。</p>
<blockquote>
<p>环视是一种非捕获分组，它根据某个模式之前或之后的内容匹配其他模式。环视也<br>称为零宽度断言。</p>
</blockquote>
<h3 id="正前瞻"><a href="#正前瞻" class="headerlink" title="正前瞻"></a>正前瞻</h3><p>a(?=b) 匹配:</p>
<p>c<strong>a</strong>bd   </p>
<p>只有匹配模式的第一部是被标亮的，环视模式不会标亮。用于前面匹配的要求（帮助把关），但是不会作为匹配。</p>
<h3 id="反前瞻"><a href="#反前瞻" class="headerlink" title="反前瞻"></a>反前瞻</h3><p>反前瞻是对正前瞻的取反操作。这意味着要匹配某个模式时，需要在它后面找不到<br>含有给定前瞻模式的内容。</p>
<p>a(?!b) 匹配:</p>
<p><strong>a</strong>ab</p>
<p>sd<strong>a</strong>vdabd</p>
<p>必须满足匹配部分要匹配，但不要匹配括号里的内容。</p>
<h3 id="正后顾-正后顾不适用于-javascript"><a href="#正后顾-正后顾不适用于-javascript" class="headerlink" title="正后顾(正后顾不适用于 javascript)"></a>正后顾(正后顾不适用于 javascript)</h3><p>(?&lt;=a)b</p>
<p>a<strong>b</strong>c</p>
<p>aa<strong>b</strong>d</p>
<h3 id="反后顾-反后顾不适用于-javascript"><a href="#反后顾-反后顾不适用于-javascript" class="headerlink" title="反后顾(反后顾不适用于 javascript)"></a>反后顾(反后顾不适用于 javascript)</h3><p>(?&lt;!a)b</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[不完美]]></title>
      <url>http://yardfarmer.github.io/2014/10/23/2014-10-23-%E7%9C%8B%E5%BE%85%E4%B8%8D%E5%AE%8C%E7%BE%8E/</url>
      <content type="html"><![CDATA[<h1 id="不完美"><a href="#不完美" class="headerlink" title="不完美"></a>不完美</h1><p>黄金是不完美的，</p>
<p>钻石是不完美的，</p>
<p>它们都不纯。</p>
<p>手机不是完美的，</p>
<p>平板不是完美的，</p>
<p>他们太小了，他们没有键盘。</p>
<p>书本是不完美的，太沉，没法搜索，</p>
<p>pdf 也是不完美的，看它们的设备太少。</p>
<p>vim 是不完美的，小问题太多。</p>
<p>我，我自己也是不完美的，</p>
<p>对！</p>
<p>通通不完美！</p>
<p>然而，什么东西又是完美的呢？</p>
<p>眼睛里放的总是不完美，那么天空是暗淡的，</p>
<p>可我要的又是什么呢？</p>
<p>我要的就是使用我身边不完美的东西，</p>
<p>去创造出属于我的同样不完美的完美。</p>
<blockquote>
<p>2014年10月23日 跑步归来有感</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[基本视觉格式化]]></title>
      <url>http://yardfarmer.github.io/2014/10/22/2014-10-22-%E5%9F%BA%E6%9C%AC%E8%A7%86%E8%A7%89%E6%A0%BC%E5%BC%8F%E5%8C%96/</url>
      <content type="html"><![CDATA[<h1 id="css基本视觉格式化"><a href="#css基本视觉格式化" class="headerlink" title="css基本视觉格式化"></a>css基本视觉格式化</h1><h2 id="containing-block"><a href="#containing-block" class="headerlink" title="containing block"></a>containing block</h2><p>每个元素都相对于其包含块摆放；也就是说,包含块是一个元素的“<strong>布局上下文</strong>”。</p>
<pre><code>&lt;div&gt;
    &lt;p&gt;
    &lt;/P&gt;
&lt;/div&gt;
</code></pre><p> p 的包含块就是 div，div 的包含块就是 body。</p>
<blockquote>
<p>想想浏览器怎么把一个元素“画”出来，至少要知道定位和尺寸。定位有三种normal flow, floats和 absolute，无论属于哪种首先要找所在的containing block(我翻译为容器块)，相当于一个大箱子里摆很多小盒子，小盒子怎么摆取决于大箱子。</p>
</blockquote>
<p>怎么确定一个元素的containing block，由position属性确定:</p>
<ol>
<li>根元素所在的 containing block 被称为 initial containing block，在我们常用的浏览器环境下，指的是原点与 canvas 重合，大小和 viewport 相同的矩形；</li>
<li>static(默认的)/relative：简单说就是它的父元素的内容框（除 margin, border, padding 外的区域))</li>
<li>absolute: 则是先找到其祖先元素中最近的 position 属性非 static 的元素.</li>
<li>fixed: 它的 containing block一律为根元素(html/body)，根元素也是initial containing block(viewport).</li>
</ol>
<p>一般来说，盒子本身就为其子孙建立了 containing block，用来计算内部盒子的位置、大小，而对内部的盒子，具体采用哪个 containing block 来计算，需要分情况来讨论：</p>
<h2 id="block-formatting-context-BFC"><a href="#block-formatting-context-BFC" class="headerlink" title="block formatting context(BFC)"></a>block formatting context(BFC)</h2><p>block formatting context(块级格式化上下文)是一种布局特性，还是往箱子里放东西，bfc可以理解为打了”隔板”把一组小盒子分离开。</p>
<p>在这种布局方式下，盒子们自所在的 containing block 顶部起一个接一个垂直排列，水平方向上撑满整个宽度 (除非内部的盒子自己内部建立了新的 BFC)。</p>
<h2 id="block-level-box"><a href="#block-level-box" class="headerlink" title="block-level box"></a>block-level box</h2><p>一个 block-level element (‘display’ 属性值为 ‘block’, ‘list-item’ 或是 ‘table’) 会生成一个 block-level box，这样的盒子会参与到 block-formatting context (一种布局的方式) 中。</p>
<p>“block-level box一定会产生block formatting context”是错误的，block-level box须通过设置如overflow不为visible(IE6/7无效，可以设zoom)、float不为none等等来创建block formatting context。</p>
<p>触发了bfc的block level box，没有margin callapse的问题，并且边缘不会和float box的边缘重叠，利用它可以清浮动。</p>
<p>页面上任何一个元素都可以看成box，box 分 block-level，inline-level 和 匿名(anonymous box)的。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[css-layout]]></title>
      <url>http://yardfarmer.github.io/2014/10/20/2014-10-20-css-layout/</url>
      <content type="html"><![CDATA[<h1 id="浅谈-css-布局标准"><a href="#浅谈-css-布局标准" class="headerlink" title="浅谈 css 布局标准"></a>浅谈 css 布局标准</h1><p>第一版 CSS1 诞生于96年12月，它是为了辅助 HTML 的展现效果而整出来的。<br>第二版 CSS2 诞生于98年5月。随后发布修订版css2.1,</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[custom_element_draft]]></title>
      <url>http://yardfarmer.github.io/2014/10/04/2014-10-03-custom_element_draft/</url>
      <content type="html"><![CDATA[<h2 id="custom-element"><a href="#custom-element" class="headerlink" title="custom element"></a>custom element</h2><p>参考<br><a href="http://w3c.github.io/webcomponents/spec/custom/" target="_blank" rel="external">http://w3c.github.io/webcomponents/spec/custom/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Shadow trees]]></title>
      <url>http://yardfarmer.github.io/2014/10/03/2014-10-03-shadowdom-draft/</url>
      <content type="html"><![CDATA[<h2 id="Shadow-trees"><a href="#Shadow-trees" class="headerlink" title="Shadow trees"></a>Shadow trees</h2><p>w3c 中关于 Shadow tress 是这样说的：</p>
<ol>
<li>文档树是根节点为文档(document)的节点树. (A document tree is a node tree [DOM] whose root node is a document.)</li>
<li>任何元素都能拥有一个按顺序排列的关联0到多个节点树的列表.(Any element can have an associated ordered list of zero or more node trees.)</li>
<li>该元素作为此节点树的宿主，如果这个节点树在该元素的节点树列表中.(An element hosts a node tree if the node tree is a member of this associated list.)</li>
<li>shadow host就一个元素 hosts 一个或多个节点树.(A shadow host is an element that hosts one or more node trees.)</li>
<li>shadow root 是一个 shadow tree 的根节点。</li>
<li>如果某个shadow host, hosts 了多个 shadow tree， 最近添加的成为 younger，越早越 older。</li>
</ol>
<p>参考<br><a href="http://w3c.github.io/webcomponents/spec/shadow/#shadow-trees" target="_blank" rel="external">http://w3c.github.io/webcomponents/spec/shadow/#shadow-trees</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[spm：客户端库管理工具]]></title>
      <url>http://yardfarmer.github.io/2014/10/01/2014-11-10-%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BA%93%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-spm/</url>
      <content type="html"><![CDATA[<blockquote>
<p>spm is a powerful and integrated static package manager designed for browser-side solutions including JavaScript, CSS and template.</p>
</blockquote>
<p>spm 中的组件都是以 CommonJs 的组织方式, 并且可以通过 seajs 加载运行.</p>
<p>spm基于node.js，所以安装之前，必须先确保已安装node.js。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install spm -g</div></pre></td></tr></table></figure>
<p>下面的命令可以更新或卸载 spm。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo npm update -g spm</div><div class="line">sudo npm uninstall -global spm</div></pre></td></tr></table></figure>
<h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><h3 id="库的安装"><a href="#库的安装" class="headerlink" title="库的安装"></a>库的安装</h3><p>初始化 package</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir example</div><div class="line"><span class="built_in">cd</span> example</div><div class="line">spm init</div></pre></td></tr></table></figure>
<p>spm install命令用于安装某个库，需要指明库的名字。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">spm install backbone</div></pre></td></tr></table></figure>
<p>Package Commands:</p>
<pre><code>init           initialize a package
login          login your account
install        install a package
publish        publish a package
unpublish      unpublish a package
tree           show dependencies tree
info           information of a package
search         search packages
test           test a package
doc            documentation manager
build          build package
completion     output completion bash script
</code></pre><p>与 bower 不同的是， spm 增加了 <code>doc</code>，’build’ 功能, 通过 <code>build</code> 用于将编写的 CommonJS 模块编译后兼容多种的加载方式.</p>
<p>build 同时能解决相对依赖和绝对依赖的问题。</p>
<p>###spm build</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">-O [dir]  输出目录,默认为: dist</div><div class="line">-o [file] 输出文件名</div><div class="line"></div><div class="line"><span class="comment"># include 在 spm3.x 已经不再推荐</span></div><div class="line">--include [include]: 指定打包策略</div><div class="line">	- relative 打包相对依赖</div><div class="line">	- all 打包所有依赖</div><div class="line">	- standalone, 打包所有依赖并且自运行(不需要加载器, 比如在浏览器下直接放在 header 下)</div><div class="line"></div><div class="line">--standalone 不需要加载器,等同于 --include -standalone</div><div class="line">--sea 编译成 seajs 用的文件, 等同于老式的 --include[relative/all]</div></pre></td></tr></table></figure>
<p>###package.json<br><code>spm</code> 使用和 <code>npm</code> 基本一致的 <code>package.json</code> 来描述组件.</p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="string">"spm"</span>: &#123;</div><div class="line">        <span class="string">"main"</span>: <span class="string">"calendar.js"</span>,</div><div class="line">        <span class="string">"dependencies"</span>: &#123;&#125;,</div><div class="line">        <span class="string">"devDependencies"</span>: &#123;&#125;,</div><div class="line">        <span class="string">"tests"</span>: <span class="string">"tests/*-spec.js"</span>,</div><div class="line">        <span class="string">"ignore"</span>: [</div><div class="line">            <span class="string">"dist"</span>,</div><div class="line">            <span class="string">"_site"</span></div><div class="line">        ],</div><div class="line">        <span class="string">"buildArgs"</span>: <span class="string">"--ignore jquery"</span></div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td> dest</td>
<td>输出目录, 默认为 dist</td>
</tr>
<tr>
<td> include</td>
<td>指定打包策略, 可选 –sea/–standalone 等方式</td>
</tr>
<tr>
<td> ignore</td>
<td>指定不进行 transport 的依赖</td>
</tr>
<tr>
<td> skip</td>
<td>指定不进行分析的依赖</td>
</tr>
<tr>
<td> idleaing</td>
<td>模块名前缀,默认为 /</td>
</tr>
<tr>
<td> withDeps</td>
<td>同时打包所有依赖, 默认为 false</td>
</tr>
</tbody>
</table>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="http://spmjs.io/documentation/spm-commands" target="_blank" rel="external">spm.io</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[了解 Modernizr]]></title>
      <url>http://yardfarmer.github.io/2014/09/02/2014-09-02-modernizr/</url>
      <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>为了渐进增强和特性检测，Modernizr 出场.</p>
<p>首先，从modernizr.com下载这个库。下载的时候，可以选择所需要的模块。然后，将它插入HTML页面的头部，放在head标签之中。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">class</span>=<span class="string">"no-js"</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/modernizr.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="CSS的新增class"><a href="#CSS的新增class" class="headerlink" title="CSS的新增class"></a>CSS的新增class</h2><p>使用Modernizr以后，首先会把html元素的class替换掉。以chrome浏览器为例，新增的class大概是下面的样子。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">class</span>=<span class="string">"js no-touch postmessage history multiplebgs boxshadow opacity cssanimations csscolumns cssgradients csstransforms csstransitions fontface localstorage sessionstorage svg inlinesvg blobbuilder blob bloburls download formdata"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>IE 7则是这样：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">class</span>=<span class="string">"js no-touch postmessage no-history no-multiplebgs no-boxshadow no-opacity no-cssanimations no-csscolumns no-cssgradients no-csstransforms no-csstransitions fontface localstorage sessionstorage no-svg no-inlinesvg wf-loading no-blobbuilder no-blob no-bloburls no-download no-formdata"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后，就可以针对不同的CSS class，指定不同的样式。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="selector-class">.button</span> &#123;</div><div class="line">   <span class="attribute">background</span>: <span class="number">#000</span>;</div><div class="line">   <span class="attribute">opacity</span>: <span class="number">0.75</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.no-opacity</span> <span class="selector-class">.button</span> &#123;</div><div class="line">   <span class="attribute">background</span>: <span class="number">#444</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="JavaScript侦测"><a href="#JavaScript侦测" class="headerlink" title="JavaScript侦测"></a>JavaScript侦测</h2><p>除了提供新增的CSS class，Modernizr还提供JavaScript方法，用来侦测浏览器是否支持某个功能。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Modernizr.cssgradients; <span class="comment">//True in Chrome, False in IE7</span></div><div class="line"></div><div class="line">Modernizr.fontface; <span class="comment">//True in Chrome, True in IE7</span></div><div class="line"></div><div class="line">Modernizr.geolocation; <span class="comment">//True in Chrome, False in IE7</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> (Modernizr.canvas)&#123;</div><div class="line">	<span class="comment">// 支持canvas</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">   <span class="comment">// 不支持canvas</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (Modernizr.touch)&#123;</div><div class="line">	<span class="comment">// 支持触摸屏</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">   <span class="comment">// 不支持触摸屏</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="加载器"><a href="#加载器" class="headerlink" title="加载器"></a>加载器</h2><p>Modernizr允许根据Javascript侦测的不同结果，加载不同的脚本文件。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Modernizr.load(&#123;</div><div class="line">  <span class="attr">test</span> :        Modernizr.localstorage,</div><div class="line">  <span class="attr">yep</span>  :        <span class="string">'localStorage.js'</span>,</div><div class="line">  <span class="attr">nope</span> :        <span class="string">'alt-storageSystem.js'</span>,</div><div class="line">  <span class="attr">complete</span> :    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; enableStorgeSaveUI();&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Modernizr.load方法用来加载脚本。它的属性如下：</p>
<ul>
<li>test：用来测试浏览器是否支持某个属性。</li>
<li>yep：如果浏览器支持该属性，加载的脚本。</li>
<li>nope：如果浏览器不支持该属性，加载的脚本。</li>
<li>complete：加载完成后，运行的JavaScript代码。</li>
</ul>
<p>可以指定在支持某个功能的情况，所要加载的JavaScript脚本和CSS样式。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Modernizr.load(&#123;</div><div class="line">  <span class="attr">test</span> : Modernizr.touch,</div><div class="line">  <span class="attr">yep</span> :  [<span class="string">'js/touch.js'</span>, <span class="string">'css/touchStyles.css'</span>]</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li>Chris Griffith, <a href="http://www.adobe.com/devnet/html5/articles/up-and-running-with-modernizr.html" target="_blank" rel="external">Up and running with Modernizr</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[让Vim 如虎添翼]]></title>
      <url>http://yardfarmer.github.io/2014/08/20/2014-08-20-vim&gist/</url>
      <content type="html"><![CDATA[<p>用 IntelliJ 的时觉得 <code>create gist</code> 很好用，查了下，发现 vim 下也有这个插件，于是马上配置上。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol>
<li><p><a href="http://www.vim.org/scripts/script.php?script_id=2423" target="_blank" rel="external">下载 Gist.vim </a></p>
</li>
<li><p>解压后进入目录，拷贝文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cp plugin/gist.vim    ~/.vim/plugin</div><div class="line">    cp <span class="built_in">autoload</span>/gist.vim  ~/.vim/<span class="built_in">autoload</span></div></pre></td></tr></table></figure>
</li>
<li><p>如果你的 vim 没有安装 <code>webapi-vim</code> 还要把这个也安装上<br><a href="http://www.vim.org/scripts/script.php?script_id=4019" target="_blank" rel="external">下载 webapi</a><br>拷贝文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp -R <span class="built_in">autoload</span>/webapi  ~/.vim/<span class="built_in">autoload</span>/webapi</div></pre></td></tr></table></figure>
</li>
<li><p>设置 github 用户名</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config --global github.user &lt;username&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>重启vim<br>输入命令，会提示输入 github 的密码，确认后会把当前整个文档内容发送到 gist。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:Gist</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:Gist</div></pre></td></tr></table></figure>
<p><a href="https://github.com/chenyakun/gist-vim" target="_blank" rel="external">这里有详细使用方法</a></p>
<h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rm -rf ~/.vim/plugin/gist.vim</div><div class="line">   rm -rf ~/.vim/<span class="built_in">autoload</span>/gist.vim</div><div class="line">   rm -rf ~/.gist-vim</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[javascript 中的类]]></title>
      <url>http://yardfarmer.github.io/2014/08/18/2014-08-20-javascript%E7%B1%BB%E5%BA%93/</url>
      <content type="html"><![CDATA[<h2 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h2><p>对于静态的类来说，JavaScript 对象直接量就已经够用了，但使用继承和实例来创建经典的类往往更有帮助。</p>
<blockquote>
<p>JavaScript 是基于原型的编程语言，并没有包含内置类的实现。</p>
</blockquote>
<p>但通过JavaScript 可以轻易地模拟出经典的类。</p>
<p>JavaScript 中有构造函数和 new 运算符。<strong>构造函数用来给实例对象初始化属性和值</strong>。任何JavaScript 函数都可以用做构造函数，构造函数必须使用 new 运算符作为前缀来创建新的实例。</p>
<p>new 运算符改变了函数的执行上下文，同时改变了return 语句的行为。</p>
<p>当使用 new 关键字来调用构造函数时，执行上下文从全局对象（window）变成一个空的上下文<code>{}</code>，这个上下文代表了新生成的实例。因此，this 关键字指向当前创建的实例。如果构造函数没有返回值，那么这个新生成的实例就作为默认的返回值。如果指定了返回值，这个新实例就白白浪费了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</div><div class="line"><span class="keyword">this</span>.name = name;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 实例化一个Person</span></div><div class="line"><span class="keyword">var</span> alice = <span class="keyword">new</span> Person(<span class="string">'zhang'</span>); </div><div class="line"></div><div class="line"><span class="keyword">if</span> .. 这样</div><div class="line"></div><div class="line">Person(<span class="string">'ben dan'</span>); <span class="comment">//=&gt; undefined</span></div></pre></td></tr></table></figure>
<p>上面这个例子说明了 new 与不 new 的区别。这个函数只会返回undefined，并且执行上下文是window（全局）对象，无意间创建了一个全局变量name。</p>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Class build my Own class</div><div class="line"> * Created by cyk on 14-8-19.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">var</span> Class = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="meta">    "use strict"</span>;</div><div class="line"></div><div class="line">    <span class="comment">// in current line, 'this' is : Class &#123;&#125; 对象实例</span></div><div class="line">    <span class="comment">// in the finally, as we have a return value ,so the Class &#123;&#125; is unused.</span></div><div class="line"></div><div class="line">    <span class="comment">// 这样的做法每次都会产生一个'新的' klass 字面量方法</span></div><div class="line">    <span class="keyword">var</span> klass = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// this 均是上下文中新生成的实例</span></div><div class="line">        <span class="keyword">this</span>.init.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    klass.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"></div><div class="line">    <span class="comment">// 定义 prototype 的别名</span></div><div class="line">    klass.fn = klass.prototype;</div><div class="line"></div><div class="line">    <span class="comment">// 定义类的别名</span></div><div class="line">    klass.fn.parent = klass;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// 给类添加属性</span></div><div class="line">    klass.extend  = <span class="function"><span class="keyword">function</span> (<span class="params"> obj </span>) </span>&#123;</div><div class="line">        <span class="comment">// 可选的回调方法 extended</span></div><div class="line">        <span class="keyword">var</span> extended = obj.extended;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>( <span class="keyword">var</span> i <span class="keyword">in</span> obj ) &#123;</div><div class="line">            klass[i] = obj[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (extended) extended(klass);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">// 给实例添加属性</span></div><div class="line">    klass.include = <span class="function"><span class="keyword">function</span> (<span class="params"> obj </span>) </span>&#123;</div><div class="line">        <span class="comment">// 可选的回调方法</span></div><div class="line">        <span class="keyword">var</span> included = obj.included;</div><div class="line">        <span class="keyword">for</span>( <span class="keyword">var</span> i <span class="keyword">in</span> obj )&#123;</div><div class="line">            klass.fn[i] = obj[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (included) included(klass);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * 这里的实现支持extended 和included 回调。</div><div class="line">     * 将属性传入对象后就会触发这两回调函数</div><div class="line">     */</div><div class="line"></div><div class="line">    <span class="keyword">return</span> klass;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> ORMModule = &#123;</div><div class="line"></div><div class="line">   <span class="attr">save</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"><span class="meta">       "use strict"</span>;</div><div class="line">       <span class="comment">// 共享的函数</span></div><div class="line">   &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> Person = <span class="keyword">new</span> Class();</div><div class="line"></div><div class="line"><span class="comment">// 虽然和上一行代码一样,但是获得的值却是新 new 出来的,</span></div><div class="line"><span class="comment">// 所有 Asset 和 Person 指向的都是 Class 的不同变量,只是变量内容相似罢了</span></div><div class="line"><span class="keyword">var</span> Asset  = <span class="keyword">new</span> Class();</div><div class="line"></div><div class="line"><span class="comment">// 所以 Person 和 Asset 现在指向的并非同一个变量</span></div><div class="line"></div><div class="line">Person.include(ORMModule);</div><div class="line"></div><div class="line">Asset.include(ORMModule);</div><div class="line"></div><div class="line">Person.include(&#123;</div><div class="line">    <span class="attr">find</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">       <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// person is : Class instance,</span></div><div class="line"><span class="comment">// klass &#123;init: function, parent: function, save: function, find: function&#125;</span></div><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</div><div class="line"></div><div class="line"><span class="keyword">var</span> asset = <span class="keyword">new</span> Asset();</div><div class="line"></div><div class="line"></div><div class="line">person.find(); <span class="comment">// klass</span></div><div class="line"></div><div class="line">asset.find();  <span class="comment">// undefined is not a function</span></div></pre></td></tr></table></figure>
<hr>
<p>先到这里，下集不见不看。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux 安装 oracle11g 记录]]></title>
      <url>http://yardfarmer.github.io/2014/08/02/2014-08-02-linux%E5%AE%89%E8%A3%85oracle11g%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<h2 id="准备oracle安装文件"><a href="#准备oracle安装文件" class="headerlink" title="准备oracle安装文件"></a>准备oracle安装文件</h2><p> Oracle11gR2包含两个文件linux_11gR2_database_1of2.zip和linux_11gR2_database_2of2.zip，将这两个文件通过SSH上传到/usr /local/oracle中。<br>解压安装文件到当前目录</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@localhost root]<span class="selector-id">#cd</span> /usr/local/oracle</div><div class="line"></div><div class="line">[root@localhost oracle]<span class="selector-id">#unzip</span> linux_11gR2_database_1of2<span class="selector-class">.zip</span></div><div class="line"></div><div class="line">[root@localhost oracle]<span class="selector-id">#unzip</span> linux_11gR2_database_2of2.zip</div></pre></td></tr></table></figure>
<p>执行以上命令后，将会在/usr/local/oracle/下面产生名为database的目录，这就是oracle安装程序的目录。</p>
<h2 id="准备oracle的安装目标目录"><a href="#准备oracle的安装目标目录" class="headerlink" title="准备oracle的安装目标目录"></a>准备oracle的安装目标目录</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost oracle]<span class="selector-id">#mkdir</span> –<span class="selector-tag">p</span> /opt/oracle</div></pre></td></tr></table></figure>
<p>安装目标目录是用户想将oracle安装到哪个位置的目录，本次我们将oracle安装到/opt/oracle目录中，以下为目录创建命令。</p>
<h2 id="创建oracle相关用户和用户组"><a href="#创建oracle相关用户和用户组" class="headerlink" title="创建oracle相关用户和用户组"></a>创建oracle相关用户和用户组</h2><p>oracle不能在root帐户下进行安装，所以需要为oracle的安装专门创建一个用户，同时需要创建dba和oinstall的用户组。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-attr">[root@localhost oracle]</span><span class="selector-id">#groupadd</span> <span class="selector-tag">dba</span></div><div class="line"><span class="selector-attr">[root@localhost oracle]</span><span class="selector-id">#groupadd</span> <span class="selector-tag">oinstall</span></div></pre></td></tr></table></figure>
<p>以下命令将创建dba和oinstall用户组：<br>以下命令将创建oracle用户，并设置密码</p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[root@localhost oracle]<span class="comment">#useradd -g oinstall -G dba oracle</span></div><div class="line"></div><div class="line">[root@localhost oracle]<span class="comment">#passwd oracle</span></div><div class="line"></div><div class="line">Changing password <span class="keyword">for</span> user oracle.</div><div class="line"></div><div class="line">New UNIX password: [在此键入密码]</div><div class="line"></div><div class="line">BAD PASSWORD: <span class="literal">it</span> <span class="keyword">is</span> based <span class="literal">on</span> a dictionary word</div><div class="line"></div><div class="line">Retype <span class="keyword">new</span> UNIX password: [在此再次键入密码]</div><div class="line"></div><div class="line">passwd: all authentication tokens updated successfully.</div></pre></td></tr></table></figure>
<p>以下命令将oracle安装目录（/opt/oracle）赋予oracle用户oinstall用户组</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-attr">[root@localhost oracle]</span><span class="selector-id">#chown</span> –<span class="selector-tag">R</span> <span class="selector-tag">oracle</span><span class="selector-pseudo">:oinstall</span> /<span class="selector-tag">opt</span>/<span class="selector-tag">oracle</span></div></pre></td></tr></table></figure>
<h2 id="检查安装ORACLE依赖的RPM软件包"><a href="#检查安装ORACLE依赖的RPM软件包" class="headerlink" title="检查安装ORACLE依赖的RPM软件包"></a>检查安装ORACLE依赖的RPM软件包</h2><p>oracle的安装所依赖的软件包，有一部分linux是没有安装的。这需要将这些尚未安装的软件包先安装后才能正常安装oracle。这些未安装的软件包在linux安装光盘上可以取到，我</p>
<p>们直接在linux的光盘上对这些软件包进行安装（也可将所需的软件包直接复制到linux本地磁盘中），首先我们需要挂载linux光盘，使用以下命令：</p>
<p>[root@localhost oracle]#mkdir /mnt/cdrom</p>
<p>[root@localhost oracle]#mount /dev/cdrom /mnt/cdrom<br>安装所缺少的软件包，此处只安装本linux系统所缺少的软件包。如oracle安装过程中，对软件包进行检查时，发现仍有所需软件包未安装时，可根据显示未安装软件包的名字，再次对所缺少的软件包进行安装。以下为安装命令：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="selector-attr">[root@localhost oracle]</span>#</div><div class="line"><span class="selector-tag">rpm</span> <span class="selector-tag">-ivh</span> <span class="selector-tag">kernel-headers-2</span><span class="selector-class">.6</span><span class="selector-class">.18-164</span><span class="selector-class">.el5</span><span class="selector-class">.i386</span><span class="selector-class">.rpm</span></div><div class="line"></div><div class="line"><span class="selector-tag">rpm</span> <span class="selector-tag">-ivh</span> <span class="selector-tag">glibc-headers-2</span><span class="selector-class">.5-42</span><span class="selector-class">.i386</span><span class="selector-class">.rpm</span></div><div class="line"></div><div class="line"><span class="selector-tag">rpm</span> <span class="selector-tag">-ivh</span> <span class="selector-tag">glibc-devel-2</span><span class="selector-class">.5-42</span><span class="selector-class">.i386</span><span class="selector-class">.rpm</span></div><div class="line"></div><div class="line"><span class="selector-tag">rpm</span> <span class="selector-tag">-ivh</span> <span class="selector-tag">libgomp-4</span><span class="selector-class">.4</span><span class="selector-class">.0-6</span><span class="selector-class">.el5</span><span class="selector-class">.i386</span><span class="selector-class">.rpm</span></div><div class="line"></div><div class="line"><span class="selector-tag">rpm</span> <span class="selector-tag">-ivh</span> <span class="selector-tag">sysstat-7</span><span class="selector-class">.0</span><span class="selector-class">.2-3</span><span class="selector-class">.el5</span><span class="selector-class">.i386</span><span class="selector-class">.rpm</span></div><div class="line"></div><div class="line"><span class="selector-tag">rpm</span> <span class="selector-tag">-ivh</span> <span class="selector-tag">libaio-devel-0</span><span class="selector-class">.3</span><span class="selector-class">.106-3</span><span class="selector-class">.2</span><span class="selector-class">.i386</span><span class="selector-class">.rpm</span></div><div class="line"></div><div class="line"><span class="selector-tag">rpm</span> <span class="selector-tag">-ivh</span> <span class="selector-tag">libstdc</span>++<span class="selector-tag">-devel-4</span><span class="selector-class">.1</span><span class="selector-class">.2-46</span><span class="selector-class">.el5</span><span class="selector-class">.i386</span><span class="selector-class">.rpm</span></div><div class="line"></div><div class="line"><span class="selector-tag">rpm</span> <span class="selector-tag">-ivh</span> <span class="selector-tag">unixODBC-2</span><span class="selector-class">.2</span><span class="selector-class">.11-7</span><span class="selector-class">.1</span><span class="selector-class">.i386</span><span class="selector-class">.rpm</span></div><div class="line"></div><div class="line"><span class="selector-tag">rpm</span> <span class="selector-tag">-ivh</span> <span class="selector-tag">unixODBC-devel-2</span><span class="selector-class">.2</span><span class="selector-class">.11-7</span><span class="selector-class">.1</span><span class="selector-class">.i386</span><span class="selector-class">.rpm</span></div><div class="line"></div><div class="line"><span class="selector-tag">rpm</span> <span class="selector-tag">-ivh</span> <span class="selector-tag">gcc-4</span><span class="selector-class">.1</span><span class="selector-class">.2-46</span><span class="selector-class">.el5</span><span class="selector-class">.i386</span><span class="selector-class">.rpm</span></div><div class="line"></div><div class="line"><span class="selector-tag">rpm</span> <span class="selector-tag">-ivh</span> <span class="selector-tag">gcc-c</span>++<span class="selector-tag">-4</span><span class="selector-class">.1</span><span class="selector-class">.2-46</span><span class="selector-class">.el5</span><span class="selector-class">.i386</span><span class="selector-class">.rpm</span></div><div class="line"></div><div class="line"><span class="selector-tag">rpm</span> <span class="selector-tag">-ivh</span> <span class="selector-tag">elfutils-libelf-devel-0</span><span class="selector-class">.137-3</span><span class="selector-class">.el5</span><span class="selector-class">.i386</span><span class="selector-class">.rpm</span> <span class="selector-tag">elfutils-libelf-devel-static-0</span><span class="selector-class">.137-3</span><span class="selector-class">.el5</span><span class="selector-class">.i386</span><span class="selector-class">.rpm</span></div></pre></td></tr></table></figure>
<p>软件包安装完成后，</p>
<h2 id="设置linux内核参数"><a href="#设置linux内核参数" class="headerlink" title="设置linux内核参数"></a>设置linux内核参数</h2><p>打开修改/etc/sysctl.conf，在最后加入以下内容</p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"><span class="stylus"></span></div><div class="line"><span class="selector-id">#kernel</span><span class="selector-class">.shmall</span> = <span class="number">2097152</span></div><div class="line"></div><div class="line"><span class="selector-id">#kernel</span><span class="selector-class">.shmmax</span> = <span class="number">2147483648</span></div><div class="line"></div><div class="line">kernel<span class="selector-class">.shmmni</span> = <span class="number">4096</span></div><div class="line"></div><div class="line">kernel<span class="selector-class">.sem</span> = <span class="number">250</span> <span class="number">32000</span> <span class="number">100</span> <span class="number">128</span></div><div class="line"></div><div class="line">net<span class="selector-class">.core</span><span class="selector-class">.rmem_default</span> = <span class="number">4194304</span></div><div class="line"></div><div class="line">net<span class="selector-class">.core</span><span class="selector-class">.rmem_max</span> = <span class="number">4194304</span></div><div class="line"></div><div class="line">net<span class="selector-class">.core</span><span class="selector-class">.wmem_default</span> = <span class="number">262144</span></div><div class="line"></div><div class="line">fs<span class="selector-class">.file-max</span> = <span class="number">6815744</span></div><div class="line"></div><div class="line">net<span class="selector-class">.ipv4</span><span class="selector-class">.ip_local_port_range</span> = <span class="number">9000</span> <span class="number">65500</span></div><div class="line"></div><div class="line">net<span class="selector-class">.core</span><span class="selector-class">.wmem_max</span> = <span class="number">1048576</span></div><div class="line"></div><div class="line">fs<span class="selector-class">.aio-max-nr</span> = <span class="number">1048576</span></div></pre></td></tr></table></figure>
<h2 id="修改-etc-security-limits-conf"><a href="#修改-etc-security-limits-conf" class="headerlink" title="修改 /etc/security/limits.conf"></a>修改 /etc/security/limits.conf</h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">修改 /etc/security/limits.conf,加入内容</div><div class="line"></div><div class="line">oracle soft nproc <span class="number">2047</span></div><div class="line"></div><div class="line">oracle hard nproc <span class="number">16384</span></div><div class="line"></div><div class="line">oracle soft nofile <span class="number">1024</span></div><div class="line"></div><div class="line">oracle hard nofile <span class="number">65536</span></div></pre></td></tr></table></figure>
<h2 id="修改系统环境变量-etc-profile"><a href="#修改系统环境变量-etc-profile" class="headerlink" title="修改系统环境变量/etc/profile"></a>修改系统环境变量<code>/etc/profile</code></h2><p>修改环境变量<code>/etc/profile</code>，加入以下内容</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> [ <span class="variable">$USER</span> = <span class="string">"oracle"</span> ]; <span class="keyword">then</span></div><div class="line"></div><div class="line">	<span class="keyword">if</span> [ <span class="variable">$SHELL</span> = <span class="string">"/bin/ksh"</span> ]; <span class="keyword">then</span></div><div class="line"></div><div class="line">		<span class="built_in">ulimit</span> -p 16384</div><div class="line"></div><div class="line">		<span class="built_in">ulimit</span> -n 65536</div><div class="line"></div><div class="line">	<span class="keyword">else</span></div><div class="line">		<span class="built_in">ulimit</span> -u 16384 -n 65536</div><div class="line">	<span class="keyword">fi</span></div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure>
<h2 id="设置ORACLE环境变量"><a href="#设置ORACLE环境变量" class="headerlink" title="设置ORACLE环境变量"></a>设置ORACLE环境变量</h2><p>修改oracle用户主目录（/home/oracle）的的环境变量配置文件<code>~/.bash_profile</code>。使用以下命令</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@localhost</span> oracle]<span class="meta">#vi /home/oracle/.bash_profile</span></div></pre></td></tr></table></figure>
<p>往配置文件中加入以下内容</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">export ORACLE_SID=orcl （注意这个值要和下面创建的数据库实例名称相同）</div><div class="line"></div><div class="line">export ORACLE_BASE=<span class="regexp">/opt/oracle</span><span class="regexp">/app</span></div><div class="line"></div><div class="line">export ORACLE_HOME=$ORACLE_BASE/product<span class="regexp">/11.2.0/dbhome</span>_1</div><div class="line"></div><div class="line">export PATH=$<span class="symbol">PATH:</span>$HOME/<span class="symbol">bin:</span>$ORACLE_HOME/bin</div><div class="line"></div><div class="line">export LD_LIBRARY_PATH=$ORACLE_HOME/<span class="class"><span class="keyword">lib</span>:/<span class="title">usr</span>/<span class="title">lib</span></span></div></pre></td></tr></table></figure>
<h2 id="开始安装过程"><a href="#开始安装过程" class="headerlink" title="开始安装过程"></a>开始安装过程</h2><p>以上步骤设置完成后，建议重新启动系统，使所有设置生效。现在使用oracle用户登录，并转到ORACLE安装程序目录。以下的每一个步骤都oracle安装过程的一个步骤（每一个步骤对应一个安装界面）。</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost <span class="keyword">oracle] </span><span class="comment"># su oracle</span></div><div class="line"></div><div class="line">[<span class="keyword">oracle@localhost </span><span class="keyword">oracle] </span><span class="comment">#cd /usr/local/oracle/database</span></div></pre></td></tr></table></figure>
<p>运行安装命令</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[oracle<span class="symbol">@localhost</span> database] <span class="meta">#./runInstaller</span></div></pre></td></tr></table></figure>
<p>有桌面类和服务器类两个选项，此处选择<em>服务器类(server)</em>。</p>
<p><em>可以选择只安装数据库软件, 即不创建通常的数据库实例和数据库文件</em></p>
<p>如果只是安装了数据库软件,<strong>安装结束后</strong>可以再</p>
<p>配置监听</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ORACLE_HOME</span><span class="regexp">/bin/</span>netca</div></pre></td></tr></table></figure>
<p>安装实例或数据库</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ORACLE_HOME</span><span class="regexp">/bin/</span>dbca</div></pre></td></tr></table></figure>
<p>完成以上操作时，建议重新启动一次，避免某些设置未生效。重启后使用oracle用户登录，打开终端，键入以下命令运行以下命令<br>启动监听：</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@localhost</span> oracle]$lsnrctl start</div></pre></td></tr></table></figure>
<p>启动数据库和实例：</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@localhost</span> oracle]$sqlplus /nolog</div><div class="line">[root<span class="symbol">@localhost</span> oracle]$conn /as sysdba</div></pre></td></tr></table></figure>
<p>进入sqlplus后，执行启动数据库命令，以下命令将创建、安装并打开ORACLE实例。此时，数据库系统处于正常工作状态，可以接受用户请求。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SQL&gt;startup</div></pre></td></tr></table></figure>
<p>关闭用</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SQL&gt;<span class="built_in">shutdown</span> immediate</div></pre></td></tr></table></figure>
<h2 id="额外说明"><a href="#额外说明" class="headerlink" title="额外说明"></a>额外说明</h2><p>验证监听</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>tnsping sid/serviceName</div></pre></td></tr></table></figure>
<h2 id="监听的配置"><a href="#监听的配置" class="headerlink" title="监听的配置"></a>监听的配置</h2><p>下回再写.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[shell读取配置文件]]></title>
      <url>http://yardfarmer.github.io/2014/08/02/2014-08-02-shell%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>最近鼓捣双机热备,写了些shell脚本</p>
<h2 id="适用配置文件"><a href="#适用配置文件" class="headerlink" title="适用配置文件"></a>适用配置文件</h2><p>以 ifbeat 为例,linux的标准的配置文件中等号两遍不能存在括号, <em>空格</em> 或特殊符号可以用转衣服 ‘ \’</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">beat</span>=<span class="literal">true</span></div><div class="line"><span class="attr">primary</span>=<span class="literal">true</span></div><div class="line"><span class="attr">vip</span>=<span class="number">12.22</span>.<span class="number">192.146</span></div></pre></td></tr></table></figure>
<h2 id="shell中读取配置文件"><a href="#shell中读取配置文件" class="headerlink" title="shell中读取配置文件"></a>shell中读取配置文件</h2><p>source 命令会读取配置文件,然后将配置文件中等号左面的key列作为变量读入内存中</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span> cofingfile</div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="variable">$beat</span>      // <span class="literal">true</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$primary</span>   // <span class="literal">true</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$vip</span>       // 12.22.192.146</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux常用工具]]></title>
      <url>http://yardfarmer.github.io/2014/08/01/2014-08-04-linux-air-command/</url>
      <content type="html"><![CDATA[<p>使用时</p>
<blockquote>
<p>如空气般必须，如呼吸般自然</p>
</blockquote>
<h2 id="文件链接"><a href="#文件链接" class="headerlink" title="文件链接"></a>文件链接</h2><p>链接文件可以节省磁盘空间，修改链接文件，等于修改原文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ln <span class="_">-s</span> /path/realfile /linkto/path/linkfile</div><div class="line"><span class="_">-s</span> 表示创建的是符号链接</div></pre></td></tr></table></figure>
<h2 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">zip -r myfile.zip ./*</div><div class="line">-r: 递归压缩</div><div class="line"></div><div class="line">zip <span class="_">-d</span> myfile smart.txt</div><div class="line">删除掉压缩文件中的 smart.txt</div><div class="line"></div><div class="line">zip -m myfile.zip ./add.txt</div><div class="line">向压缩文件中 myfile.zip 添加(插入) add.txt 文件</div></pre></td></tr></table></figure>
<h2 id="unzip"><a href="#unzip" class="headerlink" title="unzip"></a>unzip</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">unzip -o <span class="_">-d</span> /home/sunny myfile.zip</div><div class="line">-o: 直接覆盖不提示</div><div class="line"><span class="_">-d</span>: 指明将文件解压到哪</div></pre></td></tr></table></figure>
<h2 id="管道输出到文件"><a href="#管道输出到文件" class="headerlink" title="管道输出到文件"></a>管道输出到文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ls /ect/hosts &gt; filename</div><div class="line">追加到文件</div><div class="line">ls /etc/hosts &gt;&gt; filename</div></pre></td></tr></table></figure>
<h2 id="env"><a href="#env" class="headerlink" title="env"></a>env</h2><blockquote>
<p> env executes utility after modifying the environment as specified on the command line.  The option name=value<br>     specifies an environmental variable, name, with a value of value.  The option `-i’ causes env to completely ignore<br>     the environment it inherits.</p>
</blockquote>
<p> If no utility is specified, env prints out the names and values of the variables in the environment, with one name=value pair per line.</p>
<p>如果使用参数 i, 设定环境为制定的环境,排除其他默认参数的影响<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">env -i [<span class="keyword">name</span>=<span class="keyword">value</span>] java -jar xx</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux修改hostname]]></title>
      <url>http://yardfarmer.github.io/2014/08/01/2014-07-31-linux%E4%BF%AE%E6%94%B9hostname/</url>
      <content type="html"><![CDATA[<p>最近鼓捣Oracle，记录些技巧</p>
<h2 id="修改hostname"><a href="#修改hostname" class="headerlink" title="修改hostname"></a>修改hostname</h2><figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"><span class="vala"><span class="meta"># vim /ect/hosts              </span></span></div><div class="line"><span class="meta"># vim /etc/sysconfig/network  修改hostname</span></div><div class="line"><span class="meta"># service network restart     重启网络服务</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Git学习总结]]></title>
      <url>http://yardfarmer.github.io/2014/06/20/2014-06-20-Git%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>##Git的一些基本概念</p>
<ul>
<li><p>设置自己的用户名和邮箱</p>
  <figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config –<span class="keyword">global</span> <span class="keyword">user</span>.name <span class="string">"Your Name"</span></div><div class="line">git config –<span class="keyword">global</span> <span class="keyword">user</span>.email <span class="string">"you@example.com"</span></div></pre></td></tr></table></figure>
</li>
<li><p>修改到提交之间有一个缓存区</p>
<ul>
<li>提交到缓存区 <code>git add .</code> 当前所有修改提交到缓存区，也可以单独指定</li>
<li><code>git diff --cached</code> 查看缓存区和本地仓库里的差异</li>
<li><code>git diff HEAD</code>  查看已缓存和当前的区别</li>
<li><code>git diff</code> 查看当前未缓存的和本地仓库里的区别</li>
<li><code>git diff --stat</code> 显示摘要</li>
</ul>
</li>
<li><p>撤销缓存区里的一个更改，例如hello.rb     <code>git reset HEAD -- hello.rb</code></p>
</li>
<li><code>git rm file</code> 将file从文件缓存区、本地目录中移除</li>
<li><code>git rm file --cached</code> 只从缓存区移除，保存本地目录中的</li>
</ul>
<p>##分支操作</p>
<ul>
<li><code>git branch</code> 列出可用的分支</li>
<li><code>git branch jser.me</code> 创建jser.me分支</li>
<li><code>git checkout -b jser.me</code> 检查jser.me分支是否存在，不存在就创建，并且切换过去 </li>
<li><code>git branch -d jser.me</code> 删除分支jser.me</li>
<li><code>git merge</code> 其它分支合并到当前分支</li>
<li><code>git checkout -b gh-pages origin/gh-pages</code> 检出并且设置当前分支为远程分支gh-pages </li>
</ul>
<p>##Log查看</p>
<ul>
<li><code>git log --oneline</code> 紧凑查看</li>
<li><code>git log --graph</code> 图形显示</li>
<li><code>git log erlang ^master</code> 查看只在erlang分支里的修改</li>
<li><code>git log --grep</code> 正则取一个log</li>
<li><code>git shortlog master</code> 生成一个简报</li>
</ul>
<p>##里程碑</p>
<ul>
<li><code>git tag -a v1.0</code> 打上v1.0</li>
</ul>
<p>##恢复删除的文件</p>
<ul>
<li><code>git checkout commitid -- pathfile</code></li>
</ul>
<p>##与人分享</p>
<ul>
<li><code>git remote</code> 列出远端的别名</li>
<li><code>git remote add remotename remotepath</code> 以remotename命名remotepath</li>
<li><code>git remote rm remotename</code> 删除别名为remotename的远程仓库</li>
<li><code>git fetch</code> 只下载</li>
<li><code>git pull</code> 下载并更新</li>
<li><code>git push remotename branch</code> 推送本地分支branch到远程仓库remotename的branch分支</li>
</ul>
<p>##一些原则<br>新功能尽可能的开分支，但是定期合到master上来，不要把某一个分支长时间的开发<br>使用git-flow</p>
<h2 id="Git的几个关键知识点"><a href="#Git的几个关键知识点" class="headerlink" title="Git的几个关键知识点"></a>Git的几个关键知识点</h2><ul>
<li>有三种状态：<ul>
<li>暂存 staged</li>
<li>修改 modify</li>
<li>已经提交</li>
</ul>
</li>
<li>git status <ul>
<li>前面状态有两列，头一列是暂存区的改动情况，如果你commit，它会提交，第二列是当前共工作区的状态，它是不会被提交的 </li>
</ul>
</li>
</ul>
<h2 id="冲突之后的解决"><a href="#冲突之后的解决" class="headerlink" title="冲突之后的解决"></a>冲突之后的解决</h2><p>找到冲突的地方，手工解决，然后<code>git add filename; git commite</code></p>
<h2 id="只合并特定的分支特定文件"><a href="#只合并特定的分支特定文件" class="headerlink" title="只合并特定的分支特定文件"></a>只合并特定的分支特定文件</h2><ul>
<li>使用命令 <code>git cherry-pick #commitid</code></li>
<li>checkout方法 <code>git checkout branch -- filename</code></li>
</ul>
<h2 id="查看和远程分支的对比"><a href="#查看和远程分支的对比" class="headerlink" title="查看和远程分支的对比"></a>查看和远程分支的对比</h2><ul>
<li>先把远程分支搞到本地 <code>git fetch origin master:temp</code>， 从远程的origin仓库的master分支下载到本地并新建一个分支temp</li>
<li>比较分支 <code>git diff temp</code></li>
<li>合并特定的文件，参考上面的</li>
<li>删除无用的分支 <code>git branch -d temp</code></li>
</ul>
<h2 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h2><ul>
<li>只显示有对比的文件 <code>git diff 608e120 4abe32e --name-only</code></li>
<li>配合搞成压缩文件 <code>git diff 608e120 4abe32e --name-only | xargs zip update.zip</code></li>
<li>如果不是查看每个文件的详细差别，而是统计一下有哪些文件被改动，有多少行被改 动，就可以使用‘–stat’ 参数。</li>
<li>diff指定的文件 </li>
</ul>
<h2 id="查看今天的更改"><a href="#查看今天的更改" class="headerlink" title="查看今天的更改"></a>查看今天的更改</h2><ul>
<li><code>git log --since=1.days</code></li>
</ul>
<h2 id="子模块"><a href="#子模块" class="headerlink" title="子模块"></a>子模块</h2><ul>
<li>git submodule init  新拉下来的库，初始化所有的子模块</li>
<li>git submodule add submodule-git-url  local-name  给当前库添加一个子模块，路径为submodule-git-url,<br>文件夹名为local-name，一般我们把local-name和子模块的名字保持一致</li>
<li>git submodule foreach some-git-command 遍历子模块，并执行some-git-command，比如批量更新所有的子模块<code>git submodule foreach git pull origin master</code></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[前端工程师需要掌握的linux基础命令]]></title>
      <url>http://yardfarmer.github.io/2014/04/22/2014-04-22-%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9C%80%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p>最近做服务器的热备，整理了些<code>李纳斯</code>工具的适用方法。</p>
<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><ul>
<li>sleep 500 暂停</li>
<li>ctrl + z 暂停</li>
<li>progress &amp; 后台运行</li>
<li>jobs\bg\fg 查看后台任务</li>
<li>file 查看文件类型</li>
<li>cd - 上一个工作目录</li>
<li>pwd 查看当前工作目录</li>
<li>touch 创建文件或者更新文件创建时间</li>
<li>rm -i 交互式删除</li>
</ul>
<h3 id="时间相关"><a href="#时间相关" class="headerlink" title="时间相关"></a>时间相关</h3><ul>
<li>date 查看时间</li>
<li>date +%Y–%m–%d 格式化显示</li>
<li>date -s “20:20:16” 修改时间</li>
<li>hwclock 查看硬件时钟</li>
<li>cal 查看日历</li>
<li>uptime 查看系统运行时间</li>
</ul>
<h3 id="输出查看"><a href="#输出查看" class="headerlink" title="输出查看"></a>输出查看</h3><ul>
<li>echo  输出指定的字符到标准输出</li>
<li>cat   输出指定文件到标准输出</li>
<li>head -n 指定行数</li>
<li>tail<ul>
<li>-n 显示行数</li>
<li>-f 实时更新</li>
</ul>
</li>
<li>more 只能向下翻页</li>
<li>less 上下翻页</li>
</ul>
<h3 id="查看硬件信息"><a href="#查看硬件信息" class="headerlink" title="查看硬件信息"></a>查看硬件信息</h3><ul>
<li>lspci -v 查看pci设备</li>
<li>lsusb -v 查看use设备</li>
<li>lsmod 查看加载的驱动</li>
</ul>
<h3 id="关机重启"><a href="#关机重启" class="headerlink" title="关机重启"></a>关机重启</h3><ul>
<li>shutdown -h 关机</li>
<li>shutdown -h +10 10分钟后关机</li>
<li>shutdown -r 重启</li>
<li>shutdown -r now 现在重启</li>
<li>shutdown -h 20:30 20点30分关机</li>
<li>poweroff 关机</li>
<li>reboot 重启</li>
</ul>
<h3 id="归档、压缩"><a href="#归档、压缩" class="headerlink" title="归档、压缩"></a>归档、压缩</h3><ul>
<li>zip xxx.zip myfile</li>
<li><p>unzip xxx.zip</p>
</li>
<li><p>tar -xvf out.tar </p>
</li>
<li>tar -cvf out.tar myfile</li>
<li>tar -zcvf out.tar.gz myfile</li>
</ul>
<h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><ul>
<li>locate keyword 在数据库里查找</li>
<li><p>updatedb 更新数据库</p>
</li>
<li><p>find . -name “<em>aa</em>“ 查找文件名带aa的文件</p>
</li>
<li>find / -name *.conf 查找conf目录</li>
<li>find / -perm 777 查找文件模式为777的</li>
<li>find / -type d  查找文件夹</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find . -name <span class="string">"*a*"</span> -exec cat &#123;&#125; \;</div></pre></td></tr></table></figure>
<p>查找名字里带a的文件，并且cat出来，注意后面的{} \;是必须的，且中间必须有空格</p>
<ul>
<li>查找条件</li>
<li>-name</li>
<li>-perm</li>
<li>-user</li>
<li>-group</li>
<li>-ctime</li>
<li>-type</li>
<li>-size</li>
</ul>
<h2 id="常见目录及功能"><a href="#常见目录及功能" class="headerlink" title="常见目录及功能"></a>常见目录及功能</h2><ul>
<li>/opt 目录安装大型软件</li>
<li>/proc 系统实时信息，虚拟目录</li>
<li>/sbin 超级用户才能执行的命令</li>
<li>/usr 一般的软件安装</li>
<li>/var 经常变化的信息</li>
</ul>
<h2 id="BASH"><a href="#BASH" class="headerlink" title="BASH"></a>BASH</h2><ul>
<li>!! 重复执行前一个命令</li>
<li>!字符 重复前一个命令以『字符』开头的命令</li>
<li>!num 按历史纪录重复执行</li>
<li>!?ea 重复执行之前包含ea的命令</li>
<li><p>!-n  重复执行n个命令之前的那个命令</p>
</li>
<li><p>ctrl + r 在历史命令中搜索</p>
</li>
<li><p>esc . 按个esc然后再按一下. 使用上一个命令的参数</p>
</li>
<li><p>? 匹配任意一个字符</p>
</li>
<li><ul>
<li>任意一个字符</li>
</ul>
</li>
<li>[0-9] 数字</li>
<li>[abc] 任意字符</li>
<li>[^abc] 除列表以外的字符</li>
</ul>
<h2 id="VIM"><a href="#VIM" class="headerlink" title="VIM"></a>VIM</h2><p><code>:sh</code> 到BASH环境中</p>
<p><code>ctrl+d</code> 回到VIM</p>
<h2 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h2><ul>
<li>fdisk -l 列出硬盘信息</li>
<li><p>fdisk /dev/sdb  进行交互式分区</p>
<ul>
<li>m 帮助</li>
</ul>
</li>
<li><p>partprobe 更新一下分区表</p>
</li>
</ul>
<p>分区机制有MBR和GPT两种<br>MBR 使用BIOS引导方式的PC设备，目前不支持2T以上，支持分区数量有限</p>
<p>分区表只有256字节信息</p>
<p>MBR最多只能创建4个主分区，主分区可以直接使用， 更多分区使用扩展分区和逻辑分区</p>
<p>一个扩展分区会占用一个主分区位置，扩展分区不能直接用</p>
<p>基于扩展分区创建逻辑分区</p>
<p>最多支持63个IDE分区，15个SCSI分区</p>
<p>GPT EFFI引导方式</p>
<h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><p>操作系统通过文件系统管理文件及数据，磁盘或者分区需要创建文件系统后才能被操作系统使用</p>
<ul>
<li>mke2fs 创建文件系统</li>
<li><p>mke2fs -t ext4 /dev/sda3  创建文件系统类型</p>
<ul>
<li>-b 文件块大小,4k</li>
<li>-c 建立的时候检查坏损块</li>
<li>-L 建立卷标</li>
<li>-j 建立文件系统日志</li>
</ul>
</li>
<li><p>dumpe2fs 查看分区的文件系统信息</p>
</li>
<li><p>fsck 检查并且修复损坏的文件系统</p>
</li>
</ul>
<p>带有日志的文件系统有较强的恢复性</p>
<p>##　挂载分区</p>
<ul>
<li>mount /dev/sdb1 /mnt/ 挂载到指定的位置</li>
<li>mount 查看已经挂载的分区</li>
<li>lsof 查看哪些文件被使用，被谁打开</li>
<li>fuser -m /dev/sdb1 被谁使用</li>
</ul>
<p>配置/etc/fstab 自动挂载</p>
<h2 id="帮助信息"><a href="#帮助信息" class="headerlink" title="帮助信息"></a>帮助信息</h2><ul>
<li>ls –help</li>
<li>ls -h</li>
<li>man ls</li>
<li>man -k 关键字查找命令</li>
<li>info 更详细</li>
</ul>
<h2 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h2><p>root 用户 0</p>
<p>系统用户 1-499</p>
<p>普通用户 500以上</p>
<h3 id="相关文件"><a href="#相关文件" class="headerlink" title="相关文件"></a>相关文件</h3><ul>
<li>/etc/passwd 密码 </li>
<li>/etc/shadow 用户密码</li>
<li>/etc/group  保存组</li>
</ul>
<h3 id="当前用户命令"><a href="#当前用户命令" class="headerlink" title="当前用户命令"></a>当前用户命令</h3><ul>
<li>whami 当前登录用户</li>
<li>who 哪些用户</li>
<li>w 有哪些用户在干什么</li>
</ul>
<h3 id="用户操作"><a href="#用户操作" class="headerlink" title="用户操作"></a>用户操作</h3><ul>
<li>useradd 添加用户</li>
<li>usermod 修改用户</li>
<li>userdel 删除用户</li>
</ul>
<h3 id="用户组操作"><a href="#用户组操作" class="headerlink" title="用户组操作"></a>用户组操作</h3><ul>
<li>groupadd 用户组添加 </li>
<li>groupmod 用户组修改</li>
<li>groupdel 用户组删除</li>
</ul>
<h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><p>限制对特定文件的读、写、执行，每一个文件都有特定的权限<br>进程权限与运行它的用户权限相关</p>
<p>目录必须有x权限，否则不能查看内容</p>
<p>UGO: user group other</p>
<p>每三个一组r w x</p>
<p>rwxrwxrwx 三个一组</p>
<h3 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h3><ul>
<li>chown 修改拥有者 </li>
<li>chgrp 修改所有组</li>
<li><p>chmod 修改权限</p>
</li>
<li><p>u\g\o代表用户、组其它</p>
</li>
<li>a代表所有</li>
<li>+-增加或者删除</li>
<li>r\w\x 三种权限</li>
</ul>
<p>chmod g-x xxxxx 减去xxxxx的用户组执行权限</p>
<h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><p>32bit分为网络部分和主机部分<br>子网掩码用来确定网络部分的位数</p>
<ul>
<li>ifconfig -a 查看所有接口</li>
<li><p>ifconfig eth0 查看特定接口</p>
</li>
<li><p>ifup eth0 启用接口</p>
</li>
<li><p>ifdown eth0 禁用接口</p>
</li>
<li><p>setup 配置网络信息</p>
</li>
</ul>
<h2 id="网络排查相关命令"><a href="#网络排查相关命令" class="headerlink" title="网络排查相关命令"></a>网络排查相关命令</h2><ul>
<li>host 查看域名对应ip</li>
<li>dig  查看域名信息</li>
<li>ip route 查看路由表</li>
<li>traceroute 查看到达目标地址经过的路由</li>
<li>mtr 网络质量测试</li>
</ul>
<h2 id="管道和重定向"><a href="#管道和重定向" class="headerlink" title="管道和重定向"></a>管道和重定向</h2><ul>
<li>STDIN  0</li>
<li>STDOUT 1</li>
<li>STDERR 2</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt; STDOUT 重定向到文件【覆盖】</div><div class="line">&gt;&gt; STDOUT 重定向到文件，追加</div><div class="line">2&gt; STDERR 重定向到文件</div><div class="line">2&gt;&amp;1 STDERR与STDOUT结合</div><div class="line">&lt;  重定向到STDIN</div><div class="line">| 一个命令的STDOUT作为另一个命令的STDIN</div><div class="line">2&gt;/dev/null 把错误重定向到null设备</div></pre></td></tr></table></figure>
<h2 id="安装删除包"><a href="#安装删除包" class="headerlink" title="安装删除包"></a>安装删除包</h2><ul>
<li>rpm -i xxx.rpm 安装</li>
<li>rpm -e xxxx 卸载</li>
<li>rpm -U xxx 升级</li>
<li>rpm -ivh <a href="http://xxxx" target="_blank" rel="external">http://xxxx</a>  网络安装</li>
<li>rpm -qa 安装的列表</li>
<li>rpm -ql xxx  安装的东西 </li>
</ul>
<ul>
<li>yum search </li>
<li>yum list (all | installed | updates)</li>
<li>yum info packagename</li>
</ul>
<h2 id="文本处理工具"><a href="#文本处理工具" class="headerlink" title="文本处理工具"></a>文本处理工具</h2><ul>
<li><p>grep </p>
<ul>
<li>-i 忽略大小写</li>
<li>-n 显示行数</li>
<li>-v 不带关键字的行</li>
<li>-Ax 之后的x行</li>
<li>-Cx 之前之后的x行</li>
<li>-Bx 之前的x行</li>
</ul>
</li>
<li><p>cut </p>
<ul>
<li>-d 切分符号</li>
<li>-f 显示的列</li>
<li>-c 基于字符进行切割</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cut <span class="_">-d</span>: <span class="_">-f</span>1 xxx 对xx文件进行</div><div class="line">cut -c2-6 xxx 基于2到6进行切割</div></pre></td></tr></table></figure>
<ul>
<li><p>wc </p>
<ul>
<li>-l 只计行数</li>
<li>-w 只讲单词</li>
<li>-m 字符</li>
<li>-c 只计字节数</li>
</ul>
</li>
<li><p>sort 排序</p>
<ul>
<li>-r 倒序</li>
<li>-u 删除重复行</li>
<li>-tc 使用c进行分割为列进行排序</li>
</ul>
</li>
<li><p>uniq 删除重复相邻行</p>
</li>
<li><p>diff 比较文件 </p>
<ul>
<li>-b 忽略空格数量改变</li>
<li>-u 生成patch文件</li>
</ul>
</li>
<li><p>aspell 拼写检查</p>
</li>
</ul>
<h2 id="实际例子"><a href="#实际例子" class="headerlink" title="实际例子"></a>实际例子</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">tr <span class="_">-d</span> <span class="string">'apple'</span> &lt; hosts 删除hosts文件里的apple</div><div class="line">tr <span class="string">'a-z'</span><span class="string">'A-Z'</span> &lt; hosts 大小写转换</div><div class="line"></div><div class="line">sed <span class="string">'s/str/newstr/g'</span> hosts 替换hosts中的str</div><div class="line">sed <span class="string">'1,50s/str/newstr/g'</span> hosts 只替换1到50行</div><div class="line">sed <span class="_">-e</span> <span class="string">'s/linux/unix/g'</span> <span class="_">-e</span> <span class="string">'s/xxx/xsdjlfsjdf'</span> hosts  连续处理两个替换</div><div class="line"></div><div class="line">sed <span class="_">-f</span> <span class="built_in">command</span> hosts 把替换的命令放到<span class="built_in">command</span>文件里</div><div class="line"></div><div class="line">ps aux | grep xxx  查看某个进程</div><div class="line"></div><div class="line">lsof -i:portnum 查看端口被哪个进程占用</div><div class="line"></div><div class="line"><span class="built_in">kill</span> -9 pid 杀掉某个进程</div><div class="line"></div><div class="line">killall program 杀掉指定名称的所有进程</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Grunt：任务自动管理工具]]></title>
      <url>http://yardfarmer.github.io/2014/04/21/2014-04-11-grunt/</url>
      <content type="html"><![CDATA[<p>在Javascript的开发过程中，经常会遇到一些重复性的任务，比如合并文件、压缩代码、检查语法错误、将Sass代码转成CSS代码等等。通常，我们需要使用不同的工具，来完成不同的任务，既重复劳动又非常耗时。Grunt就是为了解决这个问题而发明的工具，可以帮助我们自动管理和运行各种任务。</p>
<p>简单说，Grunt是一个自动任务运行器，会按照预先设定的顺序自动运行一系列的任务。这可以简化工作流程，减轻重复性工作带来的负担。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Grunt基于Node.js，安装之前要先安装Node.js，然后运行下面的命令。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo npm install grunt-cli -g</div></pre></td></tr></table></figure>
<p>grunt-cli表示安装的是grunt的命令行界面，参数g表示全局安装。</p>
<p>Grunt使用模块结构，除了安装命令行界面以外，还要根据需要安装相应的模块。这些模块应该采用局部安装，因为不同项目可能需要同一个模块的不同版本。</p>
<p>首先，在项目的根目录下，创建一个文本文件package.json，指定当前项目所需的模块。下面就是一个例子。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"my-project-name"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"0.1.0"</span>,</div><div class="line">  <span class="string">"author"</span>: <span class="string">"Your Name"</span>,</div><div class="line">  <span class="string">"devDependencies"</span>: &#123;</div><div class="line">    <span class="string">"grunt"</span>: <span class="string">"0.x.x"</span>,</div><div class="line">    <span class="string">"grunt-contrib-jshint"</span>: <span class="string">"*"</span>,</div><div class="line">    <span class="string">"grunt-contrib-concat"</span>: <span class="string">"~0.1.1"</span>,</div><div class="line">    <span class="string">"grunt-contrib-uglify"</span>: <span class="string">"~0.1.0"</span>,</div><div class="line">    <span class="string">"grunt-contrib-watch"</span>: <span class="string">"~0.1.4"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面这个package.json文件中，除了注明项目的名称和版本以外，还在devDependencies属性中指定了项目依赖的grunt模块和版本：grunt核心模块为最新的0.x.x版，jshint插件为最新版本，concat插件不低于0.1.1版，uglify插件不低于0.1.0版，watch插件不低于0.1.4版。</p>
<p>然后，在项目的根目录下运行下面的命令，这些插件就会被自动安装在node_modules子目录。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install</div></pre></td></tr></table></figure>
<p>上面这种方法是针对已有package.json的情况。如果想要自动生成package.json文件，可以使用npm init命令，按照屏幕提示回答所需模块的名称和版本即可。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm init</div></pre></td></tr></table></figure>
<p>如果已有的package.json文件不包括Grunt模块，可以在直接安装Grunt模块的时候，加上–save-dev参数，该模块就会自动被加入package.json文件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install &lt;module&gt; --save-dev</div></pre></td></tr></table></figure>
<p>比如，对应上面package.json文件指定的模块，需要运行以下npm命令。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">npm install grunt --save-dev</div><div class="line">npm install grunt-contrib-jshint --save-dev</div><div class="line">npm install grunt-contrib-concat --save-dev</div><div class="line">npm install grunt-contrib-uglify --save-dev</div><div class="line">npm install grunt-contrib-watch --save-dev</div></pre></td></tr></table></figure>
<h2 id="命令脚本文件Gruntfile-js"><a href="#命令脚本文件Gruntfile-js" class="headerlink" title="命令脚本文件Gruntfile.js"></a>命令脚本文件Gruntfile.js</h2><p>模块安装完以后，下一步在项目的根目录下，新建脚本文件Gruntfile.js。它是grunt的配置文件，就好像package.json是npm的配置文件一样。Gruntfile.js就是一般的Node.js模块的写法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">grunt</span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// 配置Grunt各种模块的参数</span></div><div class="line">  grunt.initConfig(&#123;</div><div class="line">    <span class="attr">jshint</span>: &#123; <span class="comment">/* jshint的参数 */</span> &#125;,</div><div class="line">    <span class="attr">concat</span>: &#123; <span class="comment">/* concat的参数 */</span> &#125;,</div><div class="line">    <span class="attr">uglify</span>: &#123; <span class="comment">/* uglify的参数 */</span> &#125;,</div><div class="line">    <span class="attr">watch</span>:  &#123; <span class="comment">/* watch的参数 */</span> &#125;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="comment">// 从node_modules目录加载模块文件</span></div><div class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-jshint'</span>);</div><div class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-concat'</span>);</div><div class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-uglify'</span>);</div><div class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-watch'</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 每行registerTask定义一个任务</span></div><div class="line">  grunt.registerTask(<span class="string">'default'</span>, [<span class="string">'jshint'</span>, <span class="string">'concat'</span>, <span class="string">'uglify'</span>]);</div><div class="line">  grunt.registerTask(<span class="string">'check'</span>, [<span class="string">'jshint'</span>]);</div><div class="line"></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>上面的代码用到了grunt代码的三个方法：</p>
<ul>
<li><p><strong>grunt.initConfig</strong>：定义各种模块的参数，每一个成员项对应一个同名模块。</p>
</li>
<li><p><strong>grunt.loadNpmTasks</strong>：加载完成任务所需的模块。</p>
</li>
<li><p><strong>grunt.registerTask</strong>：定义具体的任务。第一个参数为任务名，第二个参数是一个数组，表示该任务需要依次使用的模块。default任务名表示，如果直接输入grunt命令，后面不跟任何参数，这时所调用的模块（该例为jshint，concat和uglify）；该例的check任务则表示使用jshint插件对代码进行语法检查。</p>
</li>
</ul>
<p>上面的代码一共加载了四个模块：jshint（检查语法错误）、concat（合并文件）、uglify（压缩代码）和watch（自动执行）。接下来，有两种使用方法。</p>
<p>（1）命令行执行某个模块，比如</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grunt jshint</div></pre></td></tr></table></figure>
<p>上面代码表示运行jshint模块。</p>
<p>（2）命令行执行某个任务。比如</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grunt check</div></pre></td></tr></table></figure>
<p>上面代码表示运行check任务。如果运行成功，就会显示“Done, without errors.”。</p>
<p>如果没有给出任务名，只键入grunt，就表示执行默认的default任务。</p>
<h2 id="Gruntfile-js实例：grunt-contrib-cssmin模块"><a href="#Gruntfile-js实例：grunt-contrib-cssmin模块" class="headerlink" title="Gruntfile.js实例：grunt-contrib-cssmin模块"></a>Gruntfile.js实例：grunt-contrib-cssmin模块</h2><p>下面通过cssmin模块，演示如何编写Gruntfile.js文件。cssmin模块的作用是最小化CSS文件。</p>
<p>首先，在项目的根目录下安装该模块。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install grunt-contrib-cssmin --save-dev</div></pre></td></tr></table></figure>
<p>然后，新建文件Gruntfile.js。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">grunt</span>) </span>&#123;</div><div class="line"></div><div class="line">  grunt.initConfig(&#123;</div><div class="line">    <span class="attr">cssmin</span>: &#123;</div><div class="line">      <span class="attr">minify</span>: &#123;</div><div class="line">        <span class="attr">expand</span>: <span class="literal">true</span>,</div><div class="line">		<span class="attr">cwd</span>: <span class="string">'css/'</span>,</div><div class="line">		<span class="attr">src</span>: [<span class="string">'*.css'</span>, <span class="string">'!*.min.css'</span>],</div><div class="line">		<span class="attr">dest</span>: <span class="string">'css/'</span>,</div><div class="line">		<span class="attr">ext</span>: <span class="string">'.min.css'</span></div><div class="line">	  &#125;,</div><div class="line">      <span class="attr">combine</span>: &#123;</div><div class="line">	    <span class="attr">files</span>: &#123;</div><div class="line">		  <span class="string">'css/out.min.css'</span>: [<span class="string">'css/part1.min.css'</span>, <span class="string">'css/part2.min.css'</span>]</div><div class="line">		&#125;</div><div class="line">	  &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-cssmin'</span>);</div><div class="line"></div><div class="line">  grunt.registerTask(<span class="string">'default'</span>, [<span class="string">'cssmin:minify'</span>,<span class="string">'cssmin:combine'</span>]);</div><div class="line"></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>下面详细解释上面代码中的三个方法，下面一个个来看。</p>
<p><strong>（1）grunt.loadNpmTasks</strong></p>
<p>grunt.loadNpmTasks方法载入模块文件。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">grunt.loadNpmTasks(<span class="string">'grunt-contrib-cssmin'</span>);</div></pre></td></tr></table></figure>
<p>你需要使用几个模块，这里就要写几条grunt.loadNpmTasks语句，将各个模块一一加载。</p>
<p>如果加载模块很多，这部分会非常冗长。而且，还存在一个问题，就是凡是在这里加载的模块，也同时出现在package.json文件中。如果使用npm命令卸载模块以后，模块会自动从package.json文件中消失，但是必须手动从Gruntfile.js文件中清除，这样很不方便，一旦忘记，还会出现运行错误。这里有一个解决办法，就是安装load-grunt-tasks模块，然后在Gruntfile.js文件中，用下面的语句替代所有的grunt.loadNpmTasks语句。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="built_in">require</span>(<span class="string">'load-grunt-tasks'</span>)(grunt);</div></pre></td></tr></table></figure>
<p>这条语句的作用是自动分析package.json文件，自动加载所找到的grunt模块。</p>
<p><strong>（2）grunt.initConfig</strong></p>
<p>grunt.initConfig方法用于模块配置，它接受一个对象作为参数。该对象的成员与使用的同名模块一一对应。由于我们要配置的是cssmin模块，所以里面有一个cssmin成员（属性）。</p>
<p>cssmin（属性）指向一个对象，该对象又包含多个成员。除了一些系统设定的成员（比如options），其他自定义的成员称为目标（target）。一个模块可以有多个目标（target），上面代码里面，cssmin模块共有两个目标，一个是“minify”，用于压缩css文件；另一个是“combine”，用于将多个css文件合并一个文件。</p>
<p>每个目标的具体设置，需要参考该模板的文档。就cssmin来讲，minify目标的参数具体含义如下：</p>
<ul>
<li><p><strong>expand</strong>：如果设为true，就表示下面文件名的占位符（即*号）都要扩展成具体的文件名。</p>
</li>
<li><p><strong>cwd</strong>：需要处理的文件（input）所在的目录。</p>
</li>
<li><p><strong>src</strong>：表示需要处理的文件。如果采用数组形式，数组的每一项就是一个文件名，可以使用通配符。</p>
</li>
<li><p><strong>dest</strong>：表示处理后的文件名或所在目录。</p>
</li>
<li><p><strong>ext</strong>：表示处理后的文件后缀名。</p>
</li>
</ul>
<p>除了上面这些参数，还有一些参数也是grunt所有模块通用的。</p>
<ul>
<li><p><strong>filter</strong>：一个返回布尔值的函数，用于过滤文件名。只有返回值为true的文件，才会被grunt处理。</p>
</li>
<li><p><strong>dot</strong>：是否匹配以点号（.）开头的系统文件。</p>
</li>
<li><p><strong>makeBase</strong>：如果设置为true，就只匹配文件路径的最后一部分。比如，a?b可以匹配/xyz/123/acb，而不匹配/xyz/acb/123。</p>
</li>
</ul>
<p>关于通配符，含义如下：</p>
<ul>
<li>*：匹配任意数量的字符，不包括/。</li>
<li>?：匹配单个字符，不包括/。</li>
<li>**：匹配任意数量的字符，包括/。</li>
<li>{}：允许使用逗号分隔的列表，表示“or”（或）关系。</li>
<li>!：用于模式的开头，表示只返回不匹配的情况。</li>
</ul>
<p>比如，foo/*.js匹配foo目录下面的文件名以.js结尾的文件，foo/**/*.js匹配foo目录和它的所有子目录下面的文件名以.js结尾的文件，!*.css表示匹配所有后缀名不为“.css”的文件。</p>
<p>使用通配符设置src属性的更多例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&#123;<span class="attr">src</span>: <span class="string">'foo/th*.js'</span>&#125;grunt-contrib-uglify</div><div class="line"></div><div class="line">&#123;<span class="attr">src</span>: <span class="string">'foo/&#123;a,b&#125;*.js'</span>&#125;</div><div class="line"></div><div class="line">&#123;<span class="attr">src</span>: [<span class="string">'foo/a*.js'</span>, <span class="string">'foo/b*.js'</span>]&#125;</div></pre></td></tr></table></figure>
<p>至于combine目标，就只有一个files参数，表示输出文件是css子目录下的out.min.css，输入文件则是css子目录下的part1.min.css和part2.min.css。</p>
<p>files参数的格式可以是一个对象，也可以是一个数组。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">files: &#123;</div><div class="line">        <span class="string">'dest/b.js'</span>: [<span class="string">'src/bb.js'</span>, <span class="string">'src/bbb.js'</span>],</div><div class="line">        <span class="string">'dest/b1.js'</span>: [<span class="string">'src/bb1.js'</span>, <span class="string">'src/bbb1.js'</span>],</div><div class="line">&#125;,</div><div class="line"></div><div class="line"><span class="comment">// or</span></div><div class="line"></div><div class="line">files: [</div><div class="line">        &#123;<span class="attr">src</span>: [<span class="string">'src/aa.js'</span>, <span class="string">'src/aaa.js'</span>], <span class="attr">dest</span>: <span class="string">'dest/a.js'</span>&#125;,</div><div class="line">        &#123;<span class="attr">src</span>: [<span class="string">'src/aa1.js'</span>, <span class="string">'src/aaa1.js'</span>], <span class="attr">dest</span>: <span class="string">'dest/a1.js'</span>&#125;,</div><div class="line">],</div></pre></td></tr></table></figure>
<p>如果minify目标和combine目标的属性设置有重合的部分，可以另行定义一个与minify和combine平行的options属性。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">grunt.initConfig(&#123;</div><div class="line">   <span class="attr">cssmin</span>: &#123;</div><div class="line">  <span class="attr">options</span>: &#123; <span class="comment">/* ... */</span> &#125;,</div><div class="line">     <span class="attr">minify</span>: &#123; <span class="comment">/* ... */</span> &#125;,</div><div class="line">     <span class="attr">combine</span>: &#123; <span class="comment">/* ... */</span> &#125;</div><div class="line">   &#125;</div><div class="line"> &#125;);</div></pre></td></tr></table></figure>
<p><strong>（3）grunt.registerTask</strong></p>
<p>grunt.registerTask方法定义如何调用具体的任务。“default”任务表示如果不提供参数，直接输入grunt命令，则先运行“cssmin:minify”，后运行“cssmin:combine”，即先压缩再合并。如果只执行压缩，或者只执行合并，则需要在grunt命令后面指明“模块名:目标名”。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">grunt <span class="comment"># 默认情况下，先压缩后合并</span></div><div class="line"></div><div class="line">grunt cssmin:minify <span class="comment"># 只压缩不合并</span></div><div class="line"></div><div class="line">grunt css:combine <span class="comment"># 只合并不压缩</span></div></pre></td></tr></table></figure>
<p>如果不指明目标，只是指明模块，就表示将所有目标依次运行一遍。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">grunt cssmin</div></pre></td></tr></table></figure>
<h2 id="常用模块设置"><a href="#常用模块设置" class="headerlink" title="常用模块设置"></a>常用模块设置</h2><p>grunt的<a href="http://gruntjs.com/plugins" target="_blank" rel="external">模块</a>已经超过了2000个，且还在快速增加。下面是一些常用的模块（按字母排序）。</p>
<ul>
<li><strong>grunt-contrib-clean</strong>：删除文件。</li>
<li><strong>grunt-contrib-compass</strong>：使用compass编译sass文件。</li>
<li><strong>grunt-contrib-concat</strong>：合并文件。</li>
<li><strong>grunt-contrib-copy</strong>：复制文件。</li>
<li><strong>grunt-contrib-cssmin</strong>：压缩以及合并CSS文件。</li>
<li><strong>grunt-contrib-imagemin</strong>：图像压缩模块。</li>
<li><strong>grunt-contrib-jshint</strong>：检查JavaScript语法。</li>
<li><strong>grunt-contrib-uglify</strong>：压缩以及合并JavaScript文件。</li>
<li><strong>grunt-contrib-watch</strong>：监视文件变动，做出相应动作。</li>
</ul>
<p>模块的前缀如果是grunt-contrib，就表示该模块由grunt开发团队维护；如果前缀是grunt（比如grunt-pakmanager），就表示由第三方开发者维护。</p>
<p>以下选几个模块，看看它们配置参数的写法，也就是说如何在grunt.initConfig方法中配置各个模块。</p>
<h3 id="grunt-contrib-jshint"><a href="#grunt-contrib-jshint" class="headerlink" title="grunt-contrib-jshint"></a>grunt-contrib-jshint</h3><p>jshint用来检查语法错误，比如分号的使用是否正确、有没有忘记写括号等等。它在grunt.initConfig方法里面的配置代码如下。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">jshint: &#123;</div><div class="line">	<span class="attr">options</span>: &#123;</div><div class="line">		<span class="attr">eqeqeq</span>: <span class="literal">true</span>,</div><div class="line">		<span class="attr">trailing</span>: <span class="literal">true</span></div><div class="line">	&#125;,</div><div class="line">	<span class="attr">files</span>: [<span class="string">'Gruntfile.js'</span>, <span class="string">'lib/**/*.js'</span>]</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<p>上面代码先指定jshint的<a href="http://www.jshint.com/docs/options/" target="_blank" rel="external">检查项目</a>，eqeqeq表示要用严格相等运算符取代相等运算符，trailing表示行尾不得有多余的空格。然后，指定files属性，表示检查目标是Gruntfile.js文件，以及lib目录的所有子目录下面的JavaScript文件。</p>
<h3 id="grunt-contrib-concat"><a href="#grunt-contrib-concat" class="headerlink" title="grunt-contrib-concat"></a>grunt-contrib-concat</h3><p>concat用来合并同类文件，它不仅可以合并JavaScript文件，还可以合并CSS文件。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">concat: &#123;</div><div class="line">  <span class="attr">js</span>: &#123;</div><div class="line">    <span class="attr">src</span>: [<span class="string">'lib/module1.js'</span>, <span class="string">'lib/module2.js'</span>, <span class="string">'lib/plugin.js'</span>],</div><div class="line">    <span class="attr">dest</span>: <span class="string">'dist/script.js'</span></div><div class="line">  &#125;</div><div class="line">  css: &#123;</div><div class="line">    <span class="attr">src</span>: [<span class="string">'style/normalize.css'</span>, <span class="string">'style/base.css'</span>, <span class="string">'style/theme.css'</span>],</div><div class="line">    <span class="attr">dest</span>: <span class="string">'dist/screen.css'</span></div><div class="line">  &#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<p>js目标用于合并JavaScript文件，css目标用语合并CSS文件。两者的src属性指定需要合并的文件（input），dest属性指定输出的目标文件（output）。</p>
<h3 id="grunt-contrib-uglify"><a href="#grunt-contrib-uglify" class="headerlink" title="grunt-contrib-uglify"></a>grunt-contrib-uglify</h3><p>uglify模块用来压缩代码，减小文件体积。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">uglify: &#123;</div><div class="line">  <span class="attr">options</span>: &#123;</div><div class="line">    <span class="attr">banner</span>: bannerContent,</div><div class="line">    <span class="attr">sourceMapRoot</span>: <span class="string">'../'</span>,</div><div class="line">    <span class="attr">sourceMap</span>: <span class="string">'distrib/'</span>+name+<span class="string">'.min.js.map'</span>,</div><div class="line">    <span class="attr">sourceMapUrl</span>: name+<span class="string">'.min.js.map'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">target</span> : &#123;</div><div class="line">	<span class="attr">expand</span>: <span class="literal">true</span>,</div><div class="line">	<span class="attr">cwd</span>: <span class="string">'js/origin'</span>,</div><div class="line">	<span class="attr">src</span> : <span class="string">'*.js'</span>,</div><div class="line">	<span class="attr">dest</span> : <span class="string">'js/'</span></div><div class="line">  &#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<p>上面代码中的options属性指定压缩后文件的文件头，以及sourceMap设置；target目标指定输入和输出文件。</p>
<h3 id="grunt-contrib-copy"><a href="#grunt-contrib-copy" class="headerlink" title="grunt-contrib-copy"></a>grunt-contrib-copy</h3><p><a href="https://github.com/gruntjs/grunt-contrib-copy" target="_blank" rel="external">copy模块</a>用于复制文件与目录。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">copy: &#123;</div><div class="line">  <span class="attr">main</span>: &#123;</div><div class="line">    <span class="attr">src</span>: <span class="string">'src/*'</span>,</div><div class="line">    <span class="attr">dest</span>: <span class="string">'dest/'</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<p>上面代码将src子目录（只包含它下面的第一层文件和子目录），拷贝到dest子目录下面（即dest/src目录）。如果要更准确控制拷贝行为，比如只拷贝文件、不拷贝目录、不保持目录结构，可以写成下面这样：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">copy: &#123;</div><div class="line">  <span class="attr">main</span>: &#123;</div><div class="line">    <span class="attr">expand</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">cwd</span>: <span class="string">'src/'</span>,</div><div class="line">    <span class="attr">src</span>: <span class="string">'**'</span>,</div><div class="line">    <span class="attr">dest</span>: <span class="string">'dest/'</span>,</div><div class="line">    <span class="attr">flatten</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">filter</span>: <span class="string">'isFile'</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h3 id="grunt-contrib-watch"><a href="#grunt-contrib-watch" class="headerlink" title="grunt-contrib-watch"></a>grunt-contrib-watch</h3><p><a href="https://github.com/gruntjs/grunt-contrib-watch" target="_blank" rel="external">watch模块</a>用来在后台运行，监听指定事件，然后自动运行指定的任务。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">watch: &#123;</div><div class="line">   <span class="attr">scripts</span>: &#123;</div><div class="line">    <span class="attr">files</span>: <span class="string">'**/*.js'</span>,</div><div class="line">    <span class="attr">tasks</span>: <span class="string">'jshint'</span>,</div><div class="line">	<span class="attr">options</span>: &#123;</div><div class="line">      <span class="attr">livereload</span>: <span class="literal">true</span>,</div><div class="line">    &#125;,</div><div class="line">   &#125;,</div><div class="line">   <span class="attr">css</span>: &#123;</div><div class="line">    <span class="attr">files</span>: <span class="string">'**/*.sass'</span>,</div><div class="line">    <span class="attr">tasks</span>: [<span class="string">'sass'</span>],</div><div class="line">    <span class="attr">options</span>: &#123;</div><div class="line">      <span class="attr">livereload</span>: <span class="literal">true</span>,</div><div class="line">    &#125;,</div><div class="line">   &#125;,</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<p>设置好上面的代码，打开另一个进程，运行grunt watch。此后，任何的js代码变动，文件保存后就会自动运行jshint任务；任何sass文件变动，文件保存后就会自动运行sass任务。</p>
<p>需要注意的是，这两个任务的options参数之中，都设置了livereload，表示任务运行结束后，自动在浏览器中重载（reload）。这需要在浏览器中安装<a href="http://livereload.com/" target="_blank" rel="external">livereload插件</a>。安装后，livereload的默认端口为localhost:35729，但是也可以用livereload: 1337的形式重设端口（localhost:1337）。</p>
<h3 id="其他模块"><a href="#其他模块" class="headerlink" title="其他模块"></a>其他模块</h3><p>下面是另外一些有用的模块。</p>
<p><strong>（1）grunt-contrib-clean</strong></p>
<p>该模块用于删除文件或目录。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">clean: &#123;</div><div class="line">  <span class="attr">build</span>: &#123;</div><div class="line">    <span class="attr">src</span>: [<span class="string">"path/to/dir/one"</span>, <span class="string">"path/to/dir/two"</span>]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>（2）grunt-autoprefixer</strong></p>
<p>该模块用于为CSS语句加上浏览器前缀。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">autoprefixer: &#123;</div><div class="line">  <span class="attr">build</span>: &#123;</div><div class="line">    <span class="attr">expand</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">cwd</span>: <span class="string">'build'</span>,</div><div class="line">    <span class="attr">src</span>: [ <span class="string">'**/*.css'</span> ],</div><div class="line">    <span class="attr">dest</span>: <span class="string">'build'</span></div><div class="line">  &#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<p><strong>（3）grunt-contrib-connect</strong></p>
<p>该模块用于在本机运行一个Web Server。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">connect: &#123;</div><div class="line">  <span class="attr">server</span>: &#123;</div><div class="line">    <span class="attr">options</span>: &#123;</div><div class="line">      <span class="attr">port</span>: <span class="number">4000</span>,</div><div class="line">      <span class="attr">base</span>: <span class="string">'build'</span>,</div><div class="line">      <span class="attr">hostname</span>: <span class="string">'*'</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>connect模块会随着grunt运行结束而结束，为了使它一直处于运行状态，可以把它放在watch模块之前运行。因为watch模块需要手动中止，所以connect模块也就会一直运行。</p>
<p><strong>（4）grunt-htmlhint</strong></p>
<p>该模块用于检查HTML语法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">htmlhint: &#123;</div><div class="line">    <span class="attr">build</span>: &#123;</div><div class="line">        <span class="attr">options</span>: &#123;</div><div class="line">            <span class="string">'tag-pair'</span>: <span class="literal">true</span>,</div><div class="line">            <span class="string">'tagname-lowercase'</span>: <span class="literal">true</span>,</div><div class="line">            <span class="string">'attr-lowercase'</span>: <span class="literal">true</span>,</div><div class="line">            <span class="string">'attr-value-double-quotes'</span>: <span class="literal">true</span>,</div><div class="line">            <span class="string">'spec-char-escape'</span>: <span class="literal">true</span>,</div><div class="line">            <span class="string">'id-unique'</span>: <span class="literal">true</span>,</div><div class="line">            <span class="string">'head-script-disabled'</span>: <span class="literal">true</span>,</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">src</span>: [<span class="string">'index.html'</span>]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码用于检查index.html文件：HTML标记是否配对、标记名和属性名是否小写、属性值是否包括在双引号之中、特殊字符是否转义、HTML元素的id属性是否为唯一值、head部分是否没有script标记。</p>
<p><strong>（5）grunt-contrib-sass模块</strong></p>
<p>该模块用于将SASS文件转为CSS文件。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">sass: &#123;</div><div class="line">    <span class="attr">build</span>: &#123;</div><div class="line">		<span class="attr">options</span>: &#123;</div><div class="line">            <span class="attr">style</span>: <span class="string">'compressed'</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">files</span>: &#123;</div><div class="line">            <span class="string">'build/css/master.css'</span>: <span class="string">'assets/sass/master.scss'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码指定输出文件为build/css/master.css，输入文件为assets/sass/master.scss。</p>
<p><strong>（6）grunt-markdown</strong></p>
<p>该模块用于将markdown文档转为HTML文档。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">markdown: &#123;</div><div class="line">    <span class="attr">all</span>: &#123;</div><div class="line">      <span class="attr">files</span>: [</div><div class="line">        &#123;</div><div class="line">          <span class="attr">expand</span>: <span class="literal">true</span>,</div><div class="line">          <span class="attr">src</span>: <span class="string">'*.md'</span>,</div><div class="line">          <span class="attr">dest</span>: <span class="string">'docs/html/'</span>,</div><div class="line">          <span class="attr">ext</span>: <span class="string">'.html'</span></div><div class="line">        &#125;</div><div class="line">      ],</div><div class="line">      <span class="attr">options</span>: &#123;</div><div class="line">        <span class="attr">template</span>: <span class="string">'templates/index.html'</span>,</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<p>上面代码指定将md后缀名的文件，转为docs/html/目录下的html文件。template属性指定转换时采用的模板，模板样式如下。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">%=content%</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li>Frederic Hemberger, <a href="http://frederic-hemberger.de/artikel/grunt-buildtool-for-frontend-projects/" target="_blank" rel="external">A build tool for front-end projects</a></li>
<li>Mária Jurčovičová, <a href="http://flippinawesome.org/2013/07/01/building-a-javascript-library-with-grunt-js/" target="_blank" rel="external">Building a JavaScript Library with Grunt.js</a></li>
<li>Ben Briggs，<a href="http://sixrevisions.com/javascript/grunt-tutorial-01/" target="_blank" rel="external">Speed Up Your Web Development Workflow with Grunt</a></li>
<li><a href="http://blog.grayghostvisuals.com/grunt/image-optimization/" target="_blank" rel="external">Optimizing Images With Grunt</a></li>
<li>Swapnil Mishra, <a href="http://howtonode.org/c4e0f8565942d5e6df45fb78b12d19435543c236/simplifying-chores-with-grunt" target="_blank" rel="external">Simplifying Chores with Grunt</a></li>
<li>AJ ONeal, <a href="http://blog.coolaj86.com/articles/moving-to-grunt.html" target="_blank" rel="external">Moving to GruntJS</a></li>
<li>Grunt Documentation, <a href="http://gruntjs.com/configuring-tasks" target="_blank" rel="external">Configuring tasks</a></li>
<li>Landon Schropp, <a href="http://www.sitepoint.com/writing-awesome-build-script-grunt/" target="_blank" rel="external">Writing an Awesome Build Script with Grunt</a></li>
<li>Mike Cunsolo, <a href="http://coding.smashingmagazine.com/2013/10/29/get-up-running-grunt/" target="_blank" rel="external">Get Up And Running With Grunt</a></li>
<li>Matt Bailey, <a href="http://www.gpmd.co.uk/blog/a-beginners-guide-to-using-grunt-with-magento/" target="_blank" rel="external">A Beginner’s Guide to Using Grunt With Magento</a></li>
<li>Paul Bakaus, <a href="http://www.html5rocks.com/en/tutorials/tooling/supercharging-your-gruntfile/" target="_blank" rel="external">Supercharging your Gruntfile</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[细枝末节css]]></title>
      <url>http://yardfarmer.github.io/2014/04/10/2014-04-10-cssInNote/</url>
      <content type="html"><![CDATA[<h3 id="选择器解析"><a href="#选择器解析" class="headerlink" title="选择器解析"></a>选择器解析</h3><p>浏览器解析CSS 选择器是从右往左的。这意味着，如果它看到一个如“<code>nav ul li a</code> 的规则时，它首先必须获得所有匹配a 的元素列表，然后检查看 它是不是li 的后代，再按相同规则继续检查。后代选择器虽然看起来方便，但它的性能开销是最大的。</p>
<h2 id="元素的位置"><a href="#元素的位置" class="headerlink" title="元素的位置"></a>元素的位置</h2><p>元素的 x 和 y 坐标可以相对于文档的<code>左上角</code>或者相对于在其中<code>显示文档</code>的 <code>视口</code>的左上角。</p>
<blockquote>
<p>在顶级窗口和标签页中，视口只是实际显示文档内容的一部分； 它不包括浏览器的外壳，拖动浏览器的边框，大小会跟随改变。</p>
</blockquote>
<p>无论在何种情况下，当讨论元素的位置时，必须弄清楚所使用的坐标是文档坐标还是视口坐标。如果文档比视口要小，或者说它还未出现滚动，则文档的左上角就是视口的左上角,文档和视口坐标系统是同一个。</p>
<figure class="highlight fix"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">视口坐标+滚动的偏移量 </span>=<span class="string"> 文档的坐标</span></div></pre></td></tr></table></figure>
<p>文档坐标比视口坐标更加基础，并且在用户滚动时它们不会发生变化。</p>
<p>当为鼠标事件注册事件处理程序函数时，报告的鼠标指针的坐标是在<code>视口坐标系</code>中的。</p>
<h4 id="Window-innerHeight"><a href="#Window-innerHeight" class="headerlink" title="Window.innerHeight"></a>Window.innerHeight</h4><p>window.innerHeight 是为了兼容性的考虑，IE9才开始支持。 <strong>用于窗口元素的，不是用于普通元素的</strong></p>
<p>也就是浏览器窗口的视口（viewport）高度（以像素为单位），如果存在水平滚动条，则包括滚动条.  任何窗口对象，如 window、frame、frameset 或 secondary window 都支持 <code>innerHeight</code> 属性。</p>
<p>兼容性：</p>
<pre><code>Chrome       Firefox (Gecko)       Internet Explorer Opera  Safari
    1      1.0 (1.7 or earlier)           9            9       3
</code></pre><p>想获取窗口的外层高度（outer height），即整个浏览器窗口的高度，使用 <code>window.outerHeight</code>。</p>
<h4 id="document-height"><a href="#document-height" class="headerlink" title="document.height"></a>document.height</h4><p>已废弃 用什么替代该属性</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">document<span class="selector-class">.body</span><span class="selector-class">.clientHeight</span></div><div class="line">document<span class="selector-class">.documentElement</span><span class="selector-class">.clientHeight</span></div></pre></td></tr></table></figure>
<h4 id="element-clientHeight"><a href="#element-clientHeight" class="headerlink" title="element.clientHeight"></a>element.clientHeight</h4><p>返回元素内部的高度(单位像数), 包含 padding, 但<code>不包括水平滚动条,border 和 margin</code>.</p>
<p>clientHeight 是只读的.  不是属于W3C规格。 <strong>注意</strong></p>
<p><code>clientHeight</code> 是一个非标准属性, 它从 Internet Explorer 对象模型引入. 它是<code>HTML</code>的特有属性.</p>
<h4 id="Element-scrollHeight"><a href="#Element-scrollHeight" class="headerlink" title="Element.scrollHeight"></a>Element.scrollHeight</h4><p>Element.scrollHeight 是计量元素内容高度的只读属性，包括overflow样式属性导致的视图中不可见内容。<br>没有垂直滚动条的情况下，scrollHeight值与元素视图填充所有内容所需要的最小值clientHeight相同。 包括元素的padding，但不包括元素的margin.  </p>
<h4 id="判定元素是否滚动到底"><a href="#判定元素是否滚动到底" class="headerlink" title="判定元素是否滚动到底"></a>判定元素是否滚动到底</h4><p>如果元素滚动到底，下面等式返回true，没有则返回false.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">element.scrollHeight - element.scrollTop === element.clientHeight   <span class="comment">// element 已滚动到底</span></div></pre></td></tr></table></figure>
<p>浏览器兼容性</p>
<pre><code>Browser           Lowest version
Internet Explorer    8.0
</code></pre><h4 id="Element-getBoundingClientRect"><a href="#Element-getBoundingClientRect" class="headerlink" title="Element.getBoundingClientRect()"></a>Element.getBoundingClientRect()</h4><p>相对于 <code>视口</code>，而不是 <code>文档(dom)</code></p>
<blockquote>
<p>The returned value is a TextRectangle object, which contains read-only </p>
<ul>
<li>left, </li>
<li>top, </li>
<li>right and </li>
<li>bottom<br>properties describing the border-box in pixels. top and left are relative to the top-left of the viewport.</li>
</ul>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> rect = obj.getBoundingClientRect();</div></pre></td></tr></table></figure>
<p>Browser compatibility</p>
<pre><code>Desktop 
Feature           Chrome    Firefox (Gecko) Internet Explorer    Opera    Safari
Basic support    1.0        3.0 (1.9)             4.0 [1]        (Yes)     4.0
width/height    (Yes)    3.5 (1.9.1)          9                (Yes)    (Yes)
</code></pre><h4 id="HTMLElement-offsetLeft"><a href="#HTMLElement-offsetLeft" class="headerlink" title="HTMLElement.offsetLeft"></a>HTMLElement.offsetLeft</h4><p>The HTMLElement.offsetLeft read-only method returns the number of pixels that the upper left corner of the current element is offset to the left within the <code>HTMLElement.offsetParent</code> node.</p>
<p>For block-level elements, offsetTop, offsetLeft, offsetWidth, and offsetHeight describe the border box of an element relative to the offsetParent<code>(containing box)</code>.</p>
<p>没有 OffsetRight，offsetBottom</p>
<h4 id="HTMLElement-offsetHeight"><a href="#HTMLElement-offsetHeight" class="headerlink" title="HTMLElement.offsetHeight"></a>HTMLElement.offsetHeight</h4><p>The HTMLElement.offsetHeight read-only property is the height of the element including（包括） vertical padding and borders, in pixels, as an integer.  </p>
<p>Typically, an element’s offsetHeight is a measurement which includes the element borders, the element vertical padding,<br>the element horizontal scrollbar (if present, if rendered) and the element CSS height.  (如果有滚动条，包括滚动条)</p>
<p>许多文章已经介绍了clientHeight和offsetHeight的区别，就是<code>clientHeight</code>的值不包括 scrollbar 的高度，而 <code>offsetHeight</code> 的值包括了scrollbar的高度。</p>
<p>判定一个元素的尺寸和位置最简单的方法是调用它的 <code>getBoundingClientRect()</code> 方法。该方法是在 <code>IE5</code> 中引入的，而现在当前的所有浏览器都实现了。 </p>
<p>在很多浏览器(和W3C标准)中， getBoundingClientRect() 返回的对象还包含width 和 height属性，但是在原始的IE中未实现。为了简便起见，可以这样计算元素的 width 和 height:</p>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">var</span> <span class="built_in">box</span> = e.getBoundingClientRect();</div><div class="line"><span class="built_in">var</span> w = <span class="built_in">box</span>.<span class="built_in">width</span> || (<span class="built_in">box</span>.right - <span class="built_in">box</span>.left);</div><div class="line"><span class="built_in">var</span> h = <span class="built_in">box</span>.<span class="built_in">height</span> || (<span class="built_in">box</span>.bottom - <span class="built_in">box</span>.top);</div></pre></td></tr></table></figure>
<p>除了这些名字以 <code>offset</code> 开头的属性以外，所有的文档元素定义了同时其他两组属性，其名称一组以 <code>client</code> 开头，另一组以 <code>scroll</code> 开头。即，每个HTML元素都有以下这些属性:</p>
<pre><code>offsetWidth offsetHeight offsetLeft offsetTop offsetParent    // = css.height + border*2 + padding，不受滚动条影响 

clientWidth clientHeight clientLeft clientTop \                
                                                 —— &gt; 不滚动时(但可包括滚动条)数值一样; 滚动时，scroll 包括 全部高度，而 client 只含可见高度
scrollWidth scrollHeight scrollLeft scrollTop /
</code></pre><blockquote>
<p>为了理解这些 client 和 scroll 属性，你需要知道HTML元素的实际内容有可能比分配用来容纳内容的盒子更大，因此单个元素可能有海动条.</p>
</blockquote>
<p>内容区域是视口，就像浏览器的窗口，当实际内容比视口更大时，需要把元素的滚动条位置考虑进去。</p>
<p>clientWidth 和 clientHeight 类似 offsetWidth 和 offsetHeight. 不同的是它们不包含<code>边框</code>大小，只包含内容和它的内边距。同时，如果浏览器在内边距和边框之间添加了滚动条. clientWidth 和 clientHeight 在其返回值中也不包含滚动条。</p>
<p><strong> <code>code</code>和<code>span</code>这些内联元素. clientWidth 和 clientHeight 总是返回0。</strong><br>font-size: px<br>字体用像素设定</p>
<p>其他元素与浮动元素相邻，这些元素的外边距不会与浮动元素的外边距合并。即3+2 = 5，而不是3 + 2 = 3。</p>
<p><img src="codesnip_20150110204724.jpg" alt="格式计算图"></p>
<h4 id="图片定位的百分数用法："><a href="#图片定位的百分数用法：" class="headerlink" title="图片定位的百分数用法："></a>图片定位的百分数用法：</h4><p>图片的(99.9%,99%) 这个点与.container(所在容器)的(99.9%，99%)这个点对齐。<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">background</span>-<span class="built_in">position</span>: <span class="number">99.9</span>% <span class="number">99</span>%;</div></pre></td></tr></table></figure></p>
<p>这样在使图片紧紧靠右，紧紧靠下就很简单。就使图片的（100%，100%）对准容器的（100%，100%）就可以了。</p>
<h4 id="选择器规则"><a href="#选择器规则" class="headerlink" title="选择器规则"></a>选择器规则</h4><p>浏览器解析 CSS 选择器是从右往左的。这意味着，如果它看到一个如“<code>nav ul li a</code> 的规则时，它首先必须获得所有匹配 a 的元素列表，然后检查看它是不是li 的后代，再按相同规则继续检查。后代选择器虽然看起来方便，但它的性能开销是最大的。</p>
<h2 id="盒"><a href="#盒" class="headerlink" title="盒"></a>盒</h2><p>这里的盒是个多元的概念,其中相关的有：</p>
<ul>
<li>block level boxes </li>
<li>containing block</li>
<li>block formatting context(BFC)</li>
</ul>
<p>想想浏览器怎么把一个元素”画”出来，至少要知道定位和尺寸。<strong>定位有三种 normal flow, floats 和 absolute</strong>，无论属于哪种首先要找所在的containing block(翻译为包含块)，相当于一个大箱子里摆很多小盒子，小盒子怎么摆取决于大箱子。</p>
<p>怎么确定一个元素的containing block，由position属性确定：</p>
<ol>
<li>static(默认的)/relative：简单说就是它的父元素的内容框（即去掉padding的部分）</li>
<li>absolute: 向上找最近的定位为absolute/relative的元素</li>
<li>fixed: 它的containing block一律为根元素(html/body)，根元素也是initial containing block</li>
</ol>
<p><code>block formatting context(块级格式化上下文)</code>是一种<strong>布局特性</strong>，还是往箱子里放东西，bfc可以理解为打了<strong>隔板</strong>把一组小盒子分离开。</p>
<p><code>block-level box</code>一定会产生’block formatting context’是错误的，block-level box须通过设置如overflow不为visible(IE6/7无效，可以设zoom)、float不为none等等来创建block formatting context。</p>
<p>触发了bfc的block level box，没有<strong>margin callapse</strong>的问题，并且边缘不会和<code>float</code>的box的边缘重叠，利用它可以清浮动。</p>
<blockquote>
<p>页面上任何一个元素都可以看成 box ,可分为 </p>
<ul>
<li>block-level(块级)，如  ‘block’, ‘list-item’, and ‘table’.</li>
<li>inline-level(行内)<br>和匿名的。</li>
</ul>
</blockquote>
<h3 id="关于行内框和行框的概念"><a href="#关于行内框和行框的概念" class="headerlink" title="关于行内框和行框的概念"></a>关于行内框和行框的概念</h3><p>文本行中的每个元素都会生成一个内容区。这个内容区则会生成一个行内框（inline box），当一行中的所有内容均已生成了行内框，那么接下来在行框的构造中就会考虑这些行内框，行框要包含住最高行内框的顶端和最低行内框的底端。</p>
<h2 id="元素居中"><a href="#元素居中" class="headerlink" title="元素居中"></a>元素居中</h2><p>元素居中分为固定宽度和非固定宽度</p>
<p>对于固定宽度:<br>    设定居中元素 margin: xxpx auto; // 同理适用于垂直居中</p>
<p>对于非固定宽度元素:<br>    在父元素上设定 text-align: center;<br>    在目标元素上设定  display: inline-block;</p>
<h2 id="脱离文档流"><a href="#脱离文档流" class="headerlink" title="脱离文档流"></a>脱离文档流</h2><p>也就是将元素从普通的布局排版中拿走，其他盒子在定位的时候，会当做脱离文档流的元素不存在而进行定位。需要注意的是，使用float脱离文档流时，其他盒子会无视这个元素，但其他盒子内的文本依然会为这个元素让出位置，环绕在周围。而对于使用absolute positioning脱离文档流的元素，其他盒子与其他盒子内的文本都会无视它。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何在Array.forEach的循环里break]]></title>
      <url>http://yardfarmer.github.io/2014/04/02/2014-04-02-%E5%A6%82%E4%BD%95%E5%9C%A8Array.forEach%E7%9A%84%E5%BE%AA%E7%8E%AF%E9%87%8Cbreak/</url>
      <content type="html"><![CDATA[<p>前段时间团队里讨论了一个问题，如何在forEach里实现<code>break</code>，目前有几种方案</p>
<h2 id="throw法"><a href="#throw法" class="headerlink" title="throw法"></a>throw法</h2><p>抛出一个错误，但是需要注意的是要抛出一个可以与别的错误区别开的错误，这样不会干扰别的代码抛出的错误</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> BreakException = &#123;&#125;;</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(v); <span class="comment">//只输出1,2</span></div><div class="line">        <span class="keyword">if</span> (v === <span class="number">2</span>) <span class="keyword">throw</span> BreakException;</div><div class="line">    &#125;);</div><div class="line">&#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">    <span class="keyword">if</span> (e !== BreakException) <span class="keyword">throw</span> e;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此法有点丑陋，加了不少代码</p>
<h2 id="空跑循环"><a href="#空跑循环" class="headerlink" title="空跑循环"></a>空跑循环</h2><p>在外层加一个标识，如果此标识为true，接下来的循环空跑，码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> breakFlag = <span class="literal">false</span>;</div><div class="line"></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (breakFlag === <span class="literal">true</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (v === <span class="number">2</span>) &#123;</div><div class="line">        breakFlag = <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(v) <span class="comment">//只输出1,2</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>这个在外层加了一个变量，为了不污染外层的环境，我们可以使用forEach的第二个参数context，把标识放在这里</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.breakFlag === <span class="literal">true</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (v === <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">this</span>.breakFlag = <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(v) <span class="comment">//只输出1,2</span></div><div class="line">&#125;, &#123;&#125;);</div></pre></td></tr></table></figure>
<p>这种方法不可避免的导致了不必要的运行,有点浪费cpu的感觉</p>
<h2 id="神奇改数组大法"><a href="#神奇改数组大法" class="headerlink" title="神奇改数组大法"></a>神奇改数组大法</h2><p>下面出场的这位选手，稍微有点技术含量</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line">array.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (item === <span class="number">2</span>) &#123;</div><div class="line">        array = array.concat(array.splice(index, array.length - index));</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(item); <span class="comment">//只输出1,2</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这种方法相当于改变了array，不知道大伙看出来了没有</p>
<h2 id="最应该使用的every"><a href="#最应该使用的every" class="headerlink" title="最应该使用的every"></a>最应该使用的every</h2><p>前面啰嗦了这么多，真正的主角登场，最推荐的方式呢，就是这种需要<code>break</code>的场景下，直接使用<code>every</code>或者<code>some</code>吧</p>
<ul>
<li>every: 碰到<code>return false</code>的时候，循环中止</li>
<li>some: 碰到<code>return ture</code>的时候，循环中止</li>
</ul>
<p>两者的代码分别如下</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line">a.every(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, arry</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(item); <span class="comment">//返回1,2</span></div><div class="line">    <span class="keyword">if</span> (item === <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line">a.some(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, arry</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(item); <span class="comment">//返回1,2</span></div><div class="line">    <span class="keyword">if</span> (item === <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>当然如果你能使用forEach，却发现<code>every</code>没有，那么你可能需要<a href="https://github.com/es-shims/es5-shim" target="_blank" rel="external">es5-shim</a>，<code>forEach</code>、<code>every</code>、<code>some</code>都是属于<code>es5</code>规范下的，<a href="http://kangax.github.io/es5-compat-table/" target="_blank" rel="external">这里有一个兼容列表</a></p>
<h2 id="骚年用for吧"><a href="#骚年用for吧" class="headerlink" title="骚年用for吧"></a>骚年用for吧</h2><p>群里讨论的时候</p>
<ul>
<li><a href="http://jser.net" target="_blank" rel="external">冰姐</a>: 如果forEach 都用到break了，那肯定是比较复杂的场景，那干脆写个for就行了</li>
<li><a href="http://weibo.com/dotnil" target="_blank" rel="external">逸才</a>: 是啊</li>
</ul>
<p>目睹了这些的我也觉得有些认同。</p>
<h2 id="部分参考"><a href="#部分参考" class="headerlink" title="部分参考"></a>部分参考</h2><ul>
<li><a href="http://stackoverflow.com/questions/2641347/how-to-short-circuit-array-foreach-like-calling-break" target="_blank" rel="external">http://stackoverflow.com/questions/2641347/how-to-short-circuit-array-foreach-like-calling-break</a></li>
<li><a href="http://old.doctyper.com/archives/200807/breaking-out-of-a-foreach-loop/" target="_blank" rel="external">http://old.doctyper.com/archives/200807/breaking-out-of-a-foreach-loop/</a></li>
<li><a href="https://coderwall.com/p/_ggh2w" target="_blank" rel="external">https://coderwall.com/p/_ggh2w</a></li>
<li><a href="http://www.jsnoob.com/2013/11/26/how-to-break-the-foreach/" target="_blank" rel="external">http://www.jsnoob.com/2013/11/26/how-to-break-the-foreach/</a></li>
<li><a href="http://stackoverflow.com/questions/6260756/how-to-stop-javascript-foreach" target="_blank" rel="external">http://stackoverflow.com/questions/6260756/how-to-stop-javascript-foreach</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[DOM精粹]]></title>
      <url>http://yardfarmer.github.io/2014/03/22/2014-03-22-DOM%E7%B2%BE%E7%B2%B9/</url>
      <content type="html"><![CDATA[<blockquote>
<p>The DOM originally was an application programming interface for XML documents that has been extended for use in HTML documents.</p>
</blockquote>
<h2 id="节点类型"><a href="#节点类型" class="headerlink" title="节点类型"></a>节点类型</h2><p>常见常用的 DOM 节点类型</p>
<ul>
<li><p>DOCUMENT_NODE (e.g., window.document)</p>
</li>
<li><p>ELEMENT_NODE (e.g., body, a, p, script, style, html, h1)</p>
</li>
<li><p>ATTRIBUTE_NODE (e.g., class=”funEdges”)</p>
</li>
<li><p>TEXT_NODE (e.g., text characters in an HTML document including carriage returns<br>and whitespace)</p>
</li>
<li><p>DOCUMENT_FRAGMENT_NODE (e.g., document.createDocumentFragment())</p>
</li>
<li><p>DOCUMENT_TYPE_NODE (e.g., &lt;!DOCTYPE html&gt;)</p>
</li>
</ul>
<p>类型的数值表示:</p>
<ol>
<li>ELEMENT_NODE = 1</li>
<li>ATTRIBUTE_NODE = 2</li>
<li>TEXT_NODE = 3</li>
<li>CDATA_SECTION_NODE = 4</li>
<li>ENTITY_REFERENCE_NODE = 5</li>
<li>ENTITY_NODE = 6</li>
<li>PROCESSING_INSTRUCTION_NODE = 7</li>
<li>COMMENT_NODE = 8</li>
<li>DOCUMENT_NODE = 9</li>
<li>DOCUMENT_TYPE_NODE = 10</li>
<li>DOCUMENT_FRAGMENT_NODE = 11</li>
<li><p>NOTATION_NODE = 12</p>
</li>
<li><p>DOCUMENT_POSITION_DISCONNECTED = 1</p>
</li>
<li>DOCUMENT_POSITION_PRECEDING = 2</li>
<li>DOCUMENT_POSITION_FOLLOWING = 4</li>
<li>DOCUMENT_POSITION_CONTAINS = 8</li>
<li>DOCUMENT_POSITION_CONTAINED_BY = 16</li>
<li>DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 32</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[dom 启蒙笔记]]></title>
      <url>http://yardfarmer.github.io/2014/03/20/2014-03-20-dom%E5%90%AF%E8%92%99%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>文档对象模型(Document Object Model),是个由javascript 节点对象组成的层次结构。<br>HTML 文档被浏览器解析并转换为一个由节点对象组成的以体现当前文档的树状结构。<br>DOM 的目的是使用Javascritp操作,为当前文档提供一个变成接口。</p>
<h2 id="节点类型"><a href="#节点类型" class="headerlink" title="节点类型"></a>节点类型</h2><p>DOCUMENT_NODE (window.document)<br>ELEMENT_NODE (<body>,<p>)<br>ATTRIBUTE_NODE<br>TEXT_NODE<br>DOCUMENT_FRAGMENT_NODE<br>DOCUMENT_TYPE_NODE (!DOCTYPE HTML)</p>
<h2 id="Node常量"><a href="#Node常量" class="headerlink" title="Node常量"></a>Node常量</h2><p>ELEMENT_NODE<br>ATTRIBUTE_NODE<br>TEXT_NODE<br>CDATA_SECTION_NODE<br>ENTITY_REFERENCE_NODE<br>ENTITY_NODE<br>…..</p>
</body></p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[通过例子对比grunt和gulp]]></title>
      <url>http://yardfarmer.github.io/2014/03/11/2014-03-11-%E9%80%9A%E8%BF%87%E4%BE%8B%E5%AD%90%E5%AF%B9%E6%AF%94grunt%E5%92%8Cgulp/</url>
      <content type="html"><![CDATA[<p>Grunt出来之后，nodejs里的构建工具宝座长久以来就是它的，随着新星Gulp的出现，Grunt的地位明显被削弱了。因为打算换换口味，决定对比一下它们。</p>
<p>相应的代码在<a href="https://github.com/jserme/gruntvsgulp" target="_blank" rel="external">这里</a>，不想看文章的可以自己clone一下代码，然后对比一下。</p>
<h2 id="定一下我们的任务"><a href="#定一下我们的任务" class="headerlink" title="定一下我们的任务"></a>定一下我们的任务</h2><p>用两个工具分别实现一些常见的任务，对比性能、代码</p>
<ul>
<li>分别实现合并代码，压缩代码、压缩图片</li>
<li>性能对比，代码对比</li>
</ul>
<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── Gruntfile<span class="selector-class">.js</span></div><div class="line">├── dist</div><div class="line">├── grunt<span class="selector-class">.md</span></div><div class="line">├── gulp<span class="selector-class">.md</span></div><div class="line">├── gulpfile<span class="selector-class">.js</span></div><div class="line">├── node_modules</div><div class="line">├── package<span class="selector-class">.json</span></div><div class="line">├── readme<span class="selector-class">.md</span></div><div class="line">└── src</div><div class="line">    ├── images</div><div class="line">    │   └── test<span class="selector-class">.jpg</span></div><div class="line">    └── js</div><div class="line">        ├── jquery-<span class="number">1.11</span>.<span class="number">0</span><span class="selector-class">.js</span></div><div class="line">        └── underscore.js</div></pre></td></tr></table></figure>
<h2 id="使用Grunt"><a href="#使用Grunt" class="headerlink" title="使用Grunt"></a>使用Grunt</h2><h3 id="首先安装grunt"><a href="#首先安装grunt" class="headerlink" title="首先安装grunt"></a>首先安装grunt</h3><figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> grunt</div></pre></td></tr></table></figure>
<h3 id="安装我们需要的grunt的插件"><a href="#安装我们需要的grunt的插件" class="headerlink" title="安装我们需要的grunt的插件"></a>安装我们需要的grunt的插件</h3><ul>
<li>校验代码 jshint</li>
<li>移动代码 copy</li>
<li>合并代码 concat</li>
<li>压缩代码 uglify</li>
<li>压缩图片 imagemin</li>
<li>时间分析的插件 time-grunt</li>
</ul>
<figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> grunt-contrib-jshint</div><div class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> grunt-contrib-uglify</div><div class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> grunt-contrib-imagemin</div><div class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> grunt-contrib-concat</div><div class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> grunt-contrib-copy</div></pre></td></tr></table></figure>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>然后我们来写代码，详细内容还是看<a href="https://github.com/jserme/gruntvsgulp/blob/master/Gruntfile.js" target="_blank" rel="external">Gruntfile.js</a>，下面是一张运行完后的截图</p>
<p><img src="https://raw.github.com/jserme/gruntvsgulp/master/images/grunt-result.png" alt=""></p>
<p>可以看出grunt运行时间为3.6s，相应的信息输出很详细</p>
<h2 id="使用Glup"><a href="#使用Glup" class="headerlink" title="使用Glup"></a>使用Glup</h2><h3 id="全局安装gulp"><a href="#全局安装gulp" class="headerlink" title="全局安装gulp"></a>全局安装gulp</h3><figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g --<span class="built_in">save</span>-<span class="built_in">dev</span> gulp</div></pre></td></tr></table></figure>
<h3 id="安装相关的gulp插件"><a href="#安装相关的gulp插件" class="headerlink" title="安装相关的gulp插件"></a>安装相关的<code>gulp</code>插件</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --<span class="built_in">save</span>-dev gulp-<span class="built_in">concat</span>  gulp-uglify  gulp-imagemin  gulp-jshint</div></pre></td></tr></table></figure>
<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>按照<a href="https://github.com/gulpjs/gulp/blob/master/README.md#gulp---" target="_blank" rel="external">开始教程</a>里的内容创建一个<a href="https://github.com/jserme/gruntvsgulp/blob/master/gulpfile.js" target="_blank" rel="external">gulpfile.js</a></p>
<p>运行结果，如图：</p>
<p><img src="https://raw.github.com/jserme/gruntvsgulp/master/images/gulp-result.png" alt=""></p>
<p>可以看到<code>gulp</code>代码更短，输出更简洁</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>可能由于项目比较小的原因，<code>Gulp</code>在性能上并没有领先,但是在代码清晰度和可维护性上<code>Gulp</code>绝对是完胜，还是推荐<code>Gulp</code></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Bower：客户端库管理工具]]></title>
      <url>http://yardfarmer.github.io/2014/01/01/2014-11-10-%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BA%93%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-brower/</url>
      <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>随着网页功能变得越来越复杂，同一张网页加载多个JavaScript函数库早已是家常便饭。开发者越来越需要一个工具，对浏览器端的各种库进行管理，比如搜索、自动安装\卸载、检查更新、确保依赖关系等等。Bower就是为了解决这个问题而诞生的针对浏览器端的库管理工具。</p>
<p>Bower基于node.js，所以安装之前，必须先确保已安装node.js。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo npm install bower -global</div></pre></td></tr></table></figure>
<p>运行上面的命令以后，Bower就已经安装在你的系统中了。运行帮助命令，查看Bower是否安装成功。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bower <span class="built_in">help</span></div></pre></td></tr></table></figure>
<p>下面的命令可以更新或卸载Bower。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo npm update -g bower</div><div class="line">sudo npm uninstall -global bower</div></pre></td></tr></table></figure>
<h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><h3 id="库的安装"><a href="#库的安装" class="headerlink" title="库的安装"></a>库的安装</h3><p>bower install命令用于安装某个库，需要指明库的名字。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bower install backbone</div></pre></td></tr></table></figure>
<p>Bower会使用库的名字，去在线索引中搜索该库的网址。某些情况下，如果一个库很新（或者你不想使用默认网址），可能需要我们手动指定该库的网址。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">bower install git://github.com/documentcloud/backbone.git</div><div class="line"></div><div class="line">bower install http://cdnjs.cloudflare.com/ajax/libs/backbone.js/1.0.0/backbone-min.js</div><div class="line"></div><div class="line">bower install ./some/path/relative/to/this/directory/backbone.js</div></pre></td></tr></table></figure>
<p>上面的命令说明，指定的网址可以是github地址、http网址、本地文件。</p>
<p>默认情况下，会安装该库的最新版本，但是也可以手动指定版本号。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bower install jquery-ui<span class="comment">#1.10.1</span></div></pre></td></tr></table></figure>
<p>上面的命令指定安装jquery-ui的1.10.1版。</p>
<p>如果某个库依赖另一个库，安装时默认将所依赖的库一起安装。比如，jquery-ui依赖jquery，安装时会连jquery一起安装。</p>
<p>安装后的库默认存放在项目的bower_components子目录，如果要指定其他位置，可在.bowerrc文件的directory属性设置。</p>
<h3 id="库的搜索和查看"><a href="#库的搜索和查看" class="headerlink" title="库的搜索和查看"></a>库的搜索和查看</h3><p>bower search命令用于使用关键字，从在线索引中搜索相关库。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bower search jquery</div></pre></td></tr></table></figure>
<p>上面命令会得到下面这样的结果。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Search results:</div><div class="line"></div><div class="line">    jquery git://github.com/components/jquery.git</div><div class="line">    jquery-ui git://github.com/components/jqueryui</div><div class="line">    jquery.cookie git://github.com/carhartl/jquery-cookie.git</div><div class="line">    jquery-placeholder git://github.com/mathiasbynens/jquery-placeholder.git</div><div class="line">    jquery-file-upload git://github.com/blueimp/jQuery-File-Upload.git</div><div class="line">    jasmine-jquery git://github.com/velesin/jasmine-jquery</div><div class="line">    jquery.ui git://github.com/jquery/jquery-ui.git</div><div class="line">    ...</div></pre></td></tr></table></figure>
<p>bower info命令用于查看某个库的详细信息。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bower info jquery-ui</div></pre></td></tr></table></figure>
<p>查看结果会列出该库的依赖关系（dependencies），以及可以得到的版本（Available versions）。</p>
<h3 id="库的更新和卸载"><a href="#库的更新和卸载" class="headerlink" title="库的更新和卸载"></a>库的更新和卸载</h3><p>bower update用于更新一个库，将其更新为最新版本。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bower update jquery-ui</div></pre></td></tr></table></figure>
<p>如果不给出库名，则更新所有库。</p>
<p>bower uninstall命令用于卸载指定的库。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bower uninstall jquery-ui</div></pre></td></tr></table></figure>
<p>注意，默认情况下会连所依赖的库一起卸载。比如，jquery-ui依赖jquery，卸载时会连jquery一起卸载，除非还有别的库依赖jquery。</p>
<h3 id="列出所有库"><a href="#列出所有库" class="headerlink" title="列出所有库"></a>列出所有库</h3><p>bower list或bower ls命令，用于列出项目所使用的所有库。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Bower list</div><div class="line">Bower ls</div></pre></td></tr></table></figure>
<h2 id="配置文件-bowerrc"><a href="#配置文件-bowerrc" class="headerlink" title="配置文件.bowerrc"></a>配置文件.bowerrc</h2><p>项目根目录下（也可以放在用户的主目录下）的.bowerrc文件是Bower的配置文件，它大概像下面这样。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"directory"</span> : <span class="string">"components"</span>,</div><div class="line">  <span class="string">"json"</span>      : <span class="string">"bower.json"</span>,</div><div class="line">  <span class="string">"endpoint"</span>  : <span class="string">"https://Bower.herokuapp.com"</span>,</div><div class="line">  <span class="string">"searchpath"</span>  : <span class="string">""</span>,</div><div class="line">  <span class="string">"shorthand_resolver"</span> : <span class="string">""</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中的属性含义如下。</p>
<ul>
<li>directory：存放库文件的子目录名。</li>
<li>json：描述各个库的json文件名。 </li>
<li>endpoint：在线索引的网址，用来搜索各种库。</li>
<li>searchpath：一个数组，储存备选的在线索引网址。如果某个库在endpoint中找不到，则继续搜索该属性指定的网址，通常用于放置某些不公开的库。</li>
<li>shorthand_resolver：定义各个库名称简写形式。</li>
</ul>
<h2 id="库信息文件bower-json"><a href="#库信息文件bower-json" class="headerlink" title="库信息文件bower.json"></a>库信息文件bower.json</h2><p>bower.json文件存放在库的根目录下，用于保存项目的库信息，供项目安装时使用，以及Bower的在线索引读取。</p>
<p>下面是一个典型的bower.json文件。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"app-name"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"0.1.0"</span>, </div><div class="line">  <span class="string">"main"</span>: [<span class="string">"path/to/app.html"</span>, <span class="string">"path/to/app.css"</span>, <span class="string">"path/to/app.js"</span>],</div><div class="line">  <span class="string">"ignore"</span>: [<span class="string">".jshintrc"</span>,<span class="string">"**/*.txt"</span>],</div><div class="line">  <span class="string">"dependencies"</span>: &#123;</div><div class="line">    <span class="string">"sass-bootstrap"</span>: <span class="string">"~3.0.0"</span>,</div><div class="line">    <span class="string">"modernizr"</span>: <span class="string">"~2.6.2"</span>,</div><div class="line">    <span class="string">"jquery"</span>: <span class="string">"latests"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"devDependencies"</span>: &#123;<span class="string">"qunit"</span>: <span class="string">"&gt;1.11.0"</span>&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在项目的根目录下，运行bower init命令，通过回答几个问题，就会自动生成bower.json文件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bower init</div></pre></td></tr></table></figure>
<p>有了bower.json文件以后，就可以用bower install命令，一下子安装所有库。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bower install</div></pre></td></tr></table></figure>
<p>根据bower.json文件，还可以向Bower的在线索引提交你的库。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">bower register &lt;my-package-name&gt; &lt;git-endpoint&gt;</div><div class="line"></div><div class="line">// 比如</div><div class="line">bower register jquery git://github.com/jquery/jquery</div></pre></td></tr></table></figure>
<p>注意，如果你的库与现有的库重名，就会提交失败。</p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul>
<li>Cody Lindley, <a href="http://tech.pro/tutorial/1190/package-managers-an-introductory-guide-for-the-uninitiated-front-end-developer" target="_blank" rel="external">Package Managers: An Introductory Guide For The Uninitiated Front-End Developer</a></li>
<li>Tyson Cadenhead, <a href="http://tysoncadenhead.com/blog/client-side-dependency-management-with-bower" target="_blank" rel="external">Client-Side Dependency Management with Bower</a></li>
<li>Matt West, <a href="http://blog.teamtreehouse.com/getting-started-bower" target="_blank" rel="external">Getting Started with Bower</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[WebSocket]]></title>
      <url>http://yardfarmer.github.io/2013/12/29/2013-12-29-websocket/</url>
      <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>HTTP协议是一种无状态协议，服务器端本身不具有识别客户端的能力，必须借助外部机制，比如session和cookie，才能与特定客户端保持对话。这多多少少带来一些不便，尤其在服务器端与客户端需要持续交换数据的场合（比如网络聊天），更是如此。为了解决这个问题，HTML5提出了浏览器的<a href="http://dev.w3.org/html5/websockets/" target="_blank" rel="external">WebSocket API</a>。</p>
<p>WebSocket的主要作用是，允许服务器端与客户端进行全双工（full-duplex）的通信。举例来说，HTTP协议有点像发电子邮件，发出后必须等待对方回信；WebSocket则是像打电话，服务器端和客户端可以同时向对方发送数据，它们之间存着一条持续打开的数据通道。</p>
<p>WebSocket协议完全可以取代Ajax方法，用来向服务器端发送文本和二进制数据，而且还没有“同域限制”。</p>
<p>WebSocket不使用HTTP协议，而是使用自己的协议。浏览器发出的WebSocket请求类似于下面的样子：</p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">GET</span> <span class="string">/</span> HTTP/1.1</div><div class="line"><span class="attribute">Connection</span>: Upgrade</div><div class="line"><span class="attribute">Upgrade</span>: websocket</div><div class="line"><span class="attribute">Host</span>: example.com</div><div class="line"><span class="attribute">Origin</span>: null</div><div class="line"><span class="attribute">Sec-WebSocket-Key</span>: sN9cRrP/n9NdMgdcy2VJFQ==</div><div class="line"><span class="attribute">Sec-WebSocket-Version</span>: 13</div></pre></td></tr></table></figure>
<p>上面的头信息显示，有一个HTTP头是Upgrade。HTTP1.1协议规定，Upgrade头信息表示将通信协议从HTTP/1.1转向该项所指定的协议。“Connection: Upgrade”就表示浏览器通知服务器，如果可以，就升级到webSocket协议。Origin用于验证浏览器域名是否在服务器许可的范围内。Sec-WebSocket-Key则是用于握手协议的密钥，是base64编码的16字节随机字符串。</p>
<p>服务器端的WebSocket回应则是</p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">HTTP/1.1 <span class="number">101</span> Switching Protocols</div><div class="line"><span class="attribute">Connection</span>: Upgrade</div><div class="line"><span class="attribute">Upgrade</span>: websocket</div><div class="line"><span class="attribute">Sec-WebSocket-Accept</span>: fFBooB7FAkLlXgRSz0BT3v4hq5s=</div><div class="line"><span class="attribute">Sec-WebSocket-Origin</span>: null</div><div class="line"><span class="attribute">Sec-WebSocket-Location</span>: ws://example.com/</div></pre></td></tr></table></figure>
<p>服务器端同样用“Connection: Upgrade”通知浏览器，需要改变协议。Sec-WebSocket-Accept是服务器在浏览器提供的Sec-WebSocket-Key字符串后面，添加“258EAFA5-E914-47DA-95CA-C5AB0DC85B11” 字符串，然后再取sha-1的hash值。浏览器将对这个值进行验证，以证明确实是目标服务器回应了webSocket请求。Sec-WebSocket-Location表示进行通信的WebSocket网址。</p>
<blockquote>
<p>请注意，WebSocket协议用ws表示。此外，还有wss协议，表示加密的WebSocket协议，对应HTTPs协议。</p>
</blockquote>
<p>完成握手以后，WebSocket协议就在TCP协议之上，开始传送数据。</p>
<p>WebSocket协议需要服务器支持，目前比较流行的实现是基于node.js的<a href="http://socket.io/" target="_blank" rel="external">socket.io</a>，更多的实现可参阅<a href="http://en.wikipedia.org/wiki/WebSocket#Server_side" target="_blank" rel="external">Wikipedia</a>。至于浏览器端，目前主流浏览器都支持WebSocket协议（包括IE 10+），仅有的例外是手机端的Opera Mini和Android Browser。</p>
<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>浏览器端对WebSocket协议的处理，无非就是三件事：</p>
<ul>
<li>建立连接和断开连接</li>
<li>发送数据和接收数据</li>
<li>处理错误</li>
</ul>
<h3 id="建立连接和断开连接"><a href="#建立连接和断开连接" class="headerlink" title="建立连接和断开连接"></a>建立连接和断开连接</h3><p>首先，客户端要检查浏览器是否支持WebSocket，使用的方法是查看window对象是否具有WebSocket属性。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.WebSocket != <span class="literal">undefined</span>) &#123;</div><div class="line">	<span class="comment">// WebSocket代码</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后，开始与服务器建立连接（这里假定服务器就是本机的1740端口，需要使用ws协议）。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.WebSocket != <span class="literal">undefined</span>) &#123;</div><div class="line">	<span class="keyword">var</span> connection = <span class="keyword">new</span> WebSocket(<span class="string">'ws://localhost:1740'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>建立连接以后的WebSocket实例对象（即上面代码中的connection），有一个readyState属性，表示目前的状态，可以取4个值：</p>
<ul>
<li><strong>0</strong>： 正在连接</li>
<li><strong>1</strong>： 连接成功</li>
<li><strong>2</strong>： 正在关闭</li>
<li><strong>3</strong>： 连接关闭</li>
</ul>
<p>握手协议成功以后，readyState就从0变为1，并触发open事件，这时就可以向服务器发送信息了。我们可以指定open事件的回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">connection.onopen = wsOpen;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">wsOpen</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'Connected to: '</span> + event.currentTarget.URL);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>关闭WebSocket连接，会触发close事件。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">connection.onclose = wsClose;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">wsClose</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"Closed"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">connection.close();</div></pre></td></tr></table></figure>
<h3 id="发送数据和接收数据"><a href="#发送数据和接收数据" class="headerlink" title="发送数据和接收数据"></a>发送数据和接收数据</h3><p>连接建立后，客户端通过send方法向服务器端发送数据。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">connection.send(message);</div></pre></td></tr></table></figure>
<p>除了发送字符串，也可以使用 Blob 或 ArrayBuffer 对象发送二进制数据。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 使用ArrayBuffer发送canvas图像数据</span></div><div class="line"><span class="keyword">var</span> img = canvas_context.getImageData(<span class="number">0</span>, <span class="number">0</span>, <span class="number">400</span>, <span class="number">320</span>);</div><div class="line"><span class="keyword">var</span> binary = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(img.data.length);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; img.data.length; i++) &#123;</div><div class="line">	binary[i] = img.data[i];</div><div class="line">&#125;</div><div class="line">connection.send(binary.buffer);</div><div class="line"></div><div class="line"><span class="comment">// 使用Blob发送文件</span></div><div class="line"><span class="keyword">var</span> file = <span class="built_in">document</span>.querySelector(<span class="string">'input[type="file"]'</span>).files[<span class="number">0</span>];</div><div class="line">connection.send(file);</div></pre></td></tr></table></figure>
<p>客户端收到服务器发送的数据，会触发message事件。可以通过定义message事件的回调函数，来处理服务端返回的数据。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">connection.onmessage = wsMessage;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">wsMessage</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(event.data);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码的回调函数wsMessage的参数为事件对象event，该对象的data属性包含了服务器返回的数据。</p>
<p>如果接收的是二进制数据，需要将连接对象的格式设为blob或arraybuffer。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">connection.binaryType = <span class="string">'arraybuffer'</span>;</div><div class="line"></div><div class="line">connection.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(e.data.byteLength); <span class="comment">// ArrayBuffer对象有byteLength属性</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="处理错误"><a href="#处理错误" class="headerlink" title="处理错误"></a>处理错误</h3><p>如果出现错误，浏览器会触发WebSocket实例对象的error事件。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">connection.onerror = wsError;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">wsError</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"Error: "</span> + event.data);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h2><p>服务器端需要单独部署处理WebSocket的代码。下面用node.js搭建一个服务器环境。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;&#125;);</div></pre></td></tr></table></figure>
<p>假设监听1740端口。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">server.listen(<span class="number">1740</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log((<span class="keyword">new</span> <span class="built_in">Date</span>()) + <span class="string">' Server is listening on port 1740'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>接着启动WebSocket服务器。这需要加载websocket库，如果没有安装，可以先使用npm命令安装。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> WebSocketServer = <span class="built_in">require</span>(<span class="string">'websocket'</span>).server;</div><div class="line"><span class="keyword">var</span> wsServer = <span class="keyword">new</span> WebSocketServer(&#123;</div><div class="line">    <span class="attr">httpServer</span>: server</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>WebSocket服务器建立request事件的回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> connection;</div><div class="line"></div><div class="line">wsServer.on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req</span>)</span>&#123;</div><div class="line">    connection = req.accept(<span class="string">'echo-protocol'</span>, req.origin);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面代码的回调函数接受一个参数req，表示request请求对象。然后，在回调函数内部，建立WebSocket连接connection。接着，就要对connection的message事件指定回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">wsServer.on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">r</span>)</span>&#123;</div><div class="line">    connection = req.accept(<span class="string">'echo-protocol'</span>, req.origin);</div><div class="line"></div><div class="line">	connection.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">message</span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> msgString = message.utf8Data;</div><div class="line">		connection.sendUTF(msgString);</div><div class="line">	&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>最后，监听用户的disconnect事件。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">connection.on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">reasonCode, description</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(connection.remoteAddress + <span class="string">' disconnected.'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="Socket-io简介"><a href="#Socket-io简介" class="headerlink" title="Socket.io简介"></a>Socket.io简介</h2><p><a href="http://socket.io/" target="_blank" rel="external">Socket.io</a>是目前最流行的WebSocket实现，包括服务器和客户端两个部分。它不仅简化了接口，使得操作更容易，而且对于那些不支持WebSocket的浏览器，会自动降为Ajax连接，最大限度地保证了兼容性。</p>
<p>第一步，在服务器端的项目根目录下，安装socket.io模块。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">npm install socket.io</div></pre></td></tr></table></figure>
<p>第二步，在根目录下建立app.js，并写入以下代码（假定使用了Express框架）。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> app = <span class="built_in">require</span>(<span class="string">'express'</span>)();</div><div class="line"><span class="keyword">var</span> server = <span class="built_in">require</span>(<span class="string">'http'</span>).createServer(app);</div><div class="line"><span class="keyword">var</span> io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>).listen(server);</div><div class="line"></div><div class="line">server.listen(<span class="number">80</span>);</div><div class="line"></div><div class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  res.sendfile(__dirname + <span class="string">'/index.html'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面代码表示，先建立并运行HTTP服务器。Socket.io的运行建立在HTTP服务器之上。</p>
<p>第三步，将Socket.io插入客户端网页。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/socket.io/socket.io.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后，在客户端脚本中，建立WebSocket连接。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> socket = io.connect(<span class="string">'http://localhost'</span>);</div></pre></td></tr></table></figure>
<p>由于本例假定WebSocket主机与客户端是同一台机器，所以connect方法的参数是<code>http://localhost</code>。接着，指定news事件（即服务器端发送news）的回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">socket.on(<span class="string">'news'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>)</span>&#123;</div><div class="line">   <span class="built_in">console</span>.log(data);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>最后，用emit方法向服务器端发送信号，触发服务器端的anotherNews事件。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">socket.emit(<span class="string">'anotherNews'</span>);</div></pre></td></tr></table></figure>
<blockquote>
<p>请注意，emit方法可以取代Ajax请求，而on方法指定的回调函数，也等同于Ajax的回调函数。</p>
</blockquote>
<p>第四步，在服务器端的app.js，加入以下代码。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">io.sockets.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">socket</span>) </span>&#123;</div><div class="line">  socket.emit(<span class="string">'news'</span>, &#123; <span class="attr">hello</span>: <span class="string">'world'</span> &#125;);</div><div class="line">  socket.on(<span class="string">'anotherNews'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(data);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面代码的io.sockets.on方法指定connection事件（WebSocket连接建立）的回调函数。在回调函数中，用emit方法向客户端发送数据，触发客户端的news事件。然后，再用on方法指定服务器端anotherNews事件的回调函数。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[angular入门]]></title>
      <url>http://yardfarmer.github.io/2013/12/26/2013-12-26-angular%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>作用域（scope）是构成AngularJS应用的核心基础，在整个框架中都被广泛使用，因此了解<br>它如何工作是非常重要的。</p>
<p><code>$scope</code> 对象是定义应用业务逻辑、控制器方法和视图属性的地方。</p>
<p>作用域是应用状态的基础。基于动态绑定，我们可以依赖视图在修改数据时立刻更新$scope，<br>也可以依赖$scope在其发生变化时立刻重新渲染视图。</p>
<p>AngularJS将$scope设计成和DOM类似的结构，因此$scope可以进行嵌套，也就是说我们可以引用父级$scope中的属性。</p>
<p>作用域提供了监视数据模型变化的能力。它允许开发者使用其中的apply机制，将数据模型的变化在整个应用范围内进行通知。我们在作用域的上下文中定义和执行表达式，同时它也是将事件通知给另一个控制器和应用其他部分的中介。</p>
<p>AngularJS启动并生成视图时，会将根ng-app元素同$rootScope进行绑定。$rootScope是所有$scope对象的最上层。</p>
<p>$rootScope是AngularJS中最接近全局作用域的对象。在$rootScope上附加太多业<br>务逻并不是好主意，这与污染JavaScript的全局作用域是一样的。</p>
<p>$scope对象在AngularJS中充当数据模型，但与传统的数据模型不一样，$scope并不负责处<br>理和操作数据，它只是视图和HTML之间的桥梁，它是视图和控制器之间的胶水。</p>
<p>$scope的所有属性，都可以自动被视图访问到。假设我们有如下的HTML：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如果希望变量是本地$scope的一个属性:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">'myApp'</span>, [])</div><div class="line">	.run(<span class="function"><span class="keyword">function</span>(<span class="params">$rootScope</span>) </span>&#123;</div><div class="line">		$rootScope.name = <span class="string">"World"</span>;</div><div class="line">	&#125;);</div></pre></td></tr></table></figure></p>
<p>因为把所有变量全部设置在 $rootScope 上容易产生命名冲突且不是那么优雅，可以</p>
<p>神奇的 $scope:</p>
<ol>
<li>$scope 是一个 POJO （Plain Old Javascript Object）</li>
<li>$scope 提供了一些工具方法 $watch(), $apply()</li>
<li>$scope 是表达式的执行环境（或者说是作用域）</li>
<li>$scope 是一个树形结构，与 DOM 标签平行</li>
<li>子 $scope 会继承父 $scope 上的属性和方法</li>
<li>每一个 angular 应用只有一个 根$scope 对象，一般位于 ng-app 上</li>
<li>$scope 可以传播事件，类似 dom事件，可以向上也可以向下</li>
<li>$scope 不仅是 MVC 的基础，也是实现双向数据绑定的基础</li>
</ol>
<h2 id="inbox"><a href="#inbox" class="headerlink" title="inbox"></a>inbox</h2><p>正如ng-app 声明所有被它包含的元素都属于AngularJS 应用一样，DOM元素上的 ng-controller声明所有被它包含的元素都属于某个控制器。</p>
<p>$rootScope , $scope 类似 javascript 中的原型查找， 在内层$scope 中查找不到，去外层查找$rootScope.</p>
<p>事件传播： emmit 向上传播，冒泡； broadcast： 向下传播，类似捕获。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[css核心概念]]></title>
      <url>http://yardfarmer.github.io/2013/12/24/2013-12-24-css%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</url>
      <content type="html"><![CDATA[<h2 id="Visual-formatting-Context"><a href="#Visual-formatting-Context" class="headerlink" title="Visual formatting Context"></a>Visual formatting Context</h2><p>在常规流中的框（boxes，元素形成的矩形区域），都属于一个格式化的上下文中，可能是块(block)的，也可能是行内(inline)的，但不可能同时是行内的又是块的。块框(block box)参与块格式化上下文(formatting context)。行内框(inline box)参与行内格式化上下文。</p>
<h3 id="包含块-containing-block-简介"><a href="#包含块-containing-block-简介" class="headerlink" title="包含块(containing block)简介"></a>包含块(containing block)简介</h3><p>在CSS2.1中，很多box的定位和尺寸的计算，都取决于一个矩形的边界，这个矩形，就被称作是包含块(containing block)。一般来说，(元素)生成的box会扮演它子孙元素包含块的角色；我们称之为：一个(元素的)box为它的子孙节点建造了包含块。包含块是一个相对的概念。<br>比如：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">table</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>hi<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>div 和 table 都是包含块。div 是 table 的包含块，同时table又是 td 的包含块，不是绝对的。<br>“一个box的包含块”，指的是“该box所存在的那个包含块”，并不是它建造的包含块。比如，上述代码中，table 的包含块，说的是 div 建造的包含块，而不是table自身建造的包含块。table 建造的包含块，可以称作 td 的包含块。</p>
<p>每个box关于它的包含块都有一个位置，但是它不会被包含块限制；它可以溢出(包含块)。包含块上可以通过设置 overflow 特性达到处理溢出的子孙元素的目的。</p>
<h3 id="行内级别元素和行内框"><a href="#行内级别元素和行内框" class="headerlink" title="行内级别元素和行内框"></a>行内级别元素和行内框</h3><p>行内元素是源文档中那些不形成新的内容块的元素；内容在行内分布（如，段落内着重的文本，行内图形等等）。某些’display’特性的值形成行内元素：’inline’，’inline-table’，’run-in’。行内级别元素生成行内框。</p>
<h3 id="匿名行内框"><a href="#匿名行内框" class="headerlink" title="匿名行内框"></a>匿名行内框</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">P</span>&gt;</span>Some <span class="tag">&lt;<span class="name">EM</span>&gt;</span>emphasized<span class="tag">&lt;/<span class="name">em</span>&gt;</span> text<span class="tag">&lt;/<span class="name">P</span>&gt;</span></div></pre></td></tr></table></figure>
<p>P元素生成一个块控制框，其内还有几个行内框。”emphasized”的框是一个行内元素（em）产生的行内框，而其它的框（”Some”和”text”）是块级元素（P）产生的行内框。后者就称为匿名行内控制框，因为它们没有与之相关的行内元素，所以，这些框被叫做匿名行内框。</p>
<h3 id="块格式化上下文-Block-formatting-contexts"><a href="#块格式化上下文-Block-formatting-contexts" class="headerlink" title="块格式化上下文(Block formatting contexts)"></a>块格式化上下文(Block formatting contexts)</h3><p>把context翻译成”上下文”，是因为，它强调框存在的环境。所谓上下文，有活动范围，有效区域的意思。</p>
<blockquote>
<p>The hasLayout property conflicts with a number of normative CSS rules, although it is similar in concept to block formatting contexts.</p>
</blockquote>
<h2 id="haslayout"><a href="#haslayout" class="headerlink" title="haslayout"></a>haslayout</h2><p>haslayout 是Windows Internet Explorer渲染引擎的一个内部组成部分。在Internet Explorer中，一个元素要么自己对自身的内容进行计算大小和组织，要么依赖于父元素来计算尺寸和组织内容。为了调节这两个不同的概念，渲染引擎采用了 hasLayout 的属性，属性值可以为true或false。当一个元素的 hasLayout 属性值为true时，我们说这个元素有一个布局（layout）.</p>
<p>hasLayout 属性与许多 css 的标准相冲突. 即使它在概念上与 BFC 很像.</p>
<p>In IE7 mode, only elements that have layout can be containing blocks, which conflicts with CSS2.1 normative definition (see 10.1). Not all block elements have layout by default, yet block elements should be the containing blocks of all their children that have relative or static positioning.</p>
<p>有 layout 的元素才能容纳块状元素, 这与 CSS2.1 标准相冲突. 不是所有的块状元素默认就拥有 layout, 而是块状元素应该作为所有具有相对或静态定位的子元素的包含块.</p>
<p>对于并非所有的元素都默认有布局，微软给出的主要原因是“性能和简洁”。如果所有的元素都默认有布局，会对性能和内存使用上产生有害的影响。</p>
<h3 id="如何激发-haslayout？"><a href="#如何激发-haslayout？" class="headerlink" title="如何激发 haslayout？"></a>如何激发 haslayout？</h3><p>大部分的 IE 显示错误，都可以通过激发元素的 haslayout 属性来修正。可以通过设置 css 尺寸属性(width/height)等来激发元素的 haslayout，使其“拥有布局”。如下所示，通过设置以下 css 属性即可。</p>
<ul>
<li>display: inline-block</li>
<li>height: (任何值除了auto)</li>
<li>float: (left 或 right)</li>
<li>position: absolute</li>
<li>width: (任何值除了auto)</li>
<li>writing-mode: tb-rl</li>
<li>zoom: (除 normal 外任意值)</li>
</ul>
<h2 id="Block-Formatting-Context-块格式化上下文"><a href="#Block-Formatting-Context-块格式化上下文" class="headerlink" title="Block Formatting Context (块格式化上下文)"></a>Block Formatting Context (块格式化上下文)</h2><p>块格式化上下文是 W3C css2.1 规范中的一个概念,它决定了元素如何<br>对其内容进行定位,以及与其他元素的关系和相互作用.</p>
<p>在创建了 Block Formatting Context 的元素中, 其子元素会一个接一个的放置<br>.垂直方向上它们的起点是一个包含块的顶部. 两个相邻元素之间的<br>距离取决于’margin’ 特性. </p>
<p>在 Block Formatting Context 中,相邻的块级元素的垂直边距会折叠.<br>(collapse).</p>
<p>在 BFC 中,每一个元素左外边与包含块的左边相接触,即使存在浮动也是如此<br>. 除非这个元素也创建了一个新的 BFC.</p>
<p>浮动元素,绝对定位元素, inline-block, table-cells, table-captions 以及<br><code>overflow</code> 值不是 <code>visible</code> 的元素, 会创建block formatting context.</p>
<p>hasLayout 和 block formatting context 是对同一类事物的不同理解.</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>可视化结构的基础就是由大大小小的 box(盒) 组成的. 每个盒子有自己的盒模型 </p>
<p>在现实布局上,又分为块框(block box)和行内框(inline box).</p>
<p>盒子之间的关系就是涉及到了格式化上下文, Block Formatting Context 和 Inline Formatting Context&gt;</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://bbs.csdn.net/topics/340237864" target="_blank" rel="external">http://bbs.csdn.net/topics/340237864</a><br><a href="http://bbs.csdn.net/topics/340219127" target="_blank" rel="external">http://bbs.csdn.net/topics/340219127</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[flexbox布局]]></title>
      <url>http://yardfarmer.github.io/2013/12/14/2013-12-14-flexbox%E5%B8%83%E5%B1%80/</url>
      <content type="html"><![CDATA[<p>#Flex基本概念</p>
<p>##主轴和侧轴<br>主轴:用户代理沿着一个伸缩容器的主轴配置伸缩项目,主轴是主轴方向的延伸.</p>
<p>##基本使用</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">display: box | inline-box</div><div class="line"></div><div class="line">/* 方向 */</div><div class="line">box-orient: horizontal | vertical | inline-axis | block-axis</div><div class="line"></div><div class="line"></div><div class="line">/* 顺序 */</div><div class="line">box-direction: normal | reverse</div><div class="line"></div><div class="line"></div><div class="line">/* 伸缩换行 */</div><div class="line">box-lines: single | multiple</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[vim-vundle]]></title>
      <url>http://yardfarmer.github.io/2013/12/09/2014-12-09-vim-vundle/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Vundle is Vim bundle Manager</p>
</blockquote>
<h2 id="Vundle-是什么"><a href="#Vundle-是什么" class="headerlink" title="Vundle 是什么"></a>Vundle 是什么</h2><p>Vundle 是 vim 上的一款插件管理工具, 能帮助统一管理 vim 插件.</p>
<ol>
<li>simplel config  # 只需配置 .vimrc</li>
<li>install </li>
<li>update </li>
<li>search</li>
<li>clean </li>
</ol>
<h2 id="安装-Vundle"><a href="#安装-Vundle" class="headerlink" title="安装 Vundle"></a>安装 Vundle</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/gmarik/Vundle.<span class="keyword">vim</span>.git ~/.<span class="keyword">vim</span>/bundle/Vundle.<span class="keyword">vim</span></div></pre></td></tr></table></figure>
<h2 id="vimrc-配置"><a href="#vimrc-配置" class="headerlink" title=".vimrc 配置"></a>.vimrc 配置</h2><p>只需在现有 ~/.vimrc 文件之上加入这些配置.</p>
<p>Plugin ‘Valloric/MatchTagAlways’,格式通常是 作者名/插件名,插件可以去 github 搜.</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">set</span> nocompatible              <span class="comment">" be iMproved, required</span></div><div class="line"><span class="keyword">filetype</span> off                  <span class="comment">" required</span></div><div class="line"></div><div class="line"><span class="comment">" set the runtime path to include Vundle and initialize</span></div><div class="line"><span class="keyword">set</span> rtp+=~/.<span class="keyword">vim</span>/bundle/Vundle.<span class="keyword">vim</span></div><div class="line"></div><div class="line"><span class="keyword">call</span> vundle#begin()</div><div class="line"><span class="comment">" alternatively, pass a path where Vundle should install plugins</span></div><div class="line"><span class="comment">"call vundle#begin('~/some/path/here')</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">" let Vundle manage Vundle, required</span></div><div class="line">Plugin <span class="string">'gmarik/Vundle.vim'</span></div><div class="line"></div><div class="line"><span class="comment">" The following are examples of different formats supported.</span></div><div class="line"><span class="comment">" Keep Plugin commands between vundle#begin/end.</span></div><div class="line"></div><div class="line"><span class="comment">" plugin on GitHub repo</span></div><div class="line">Plugin <span class="string">'tpope/vim-fugitive'</span></div><div class="line">Plugin <span class="string">'git://git.wincent.com/command-t.git'</span></div><div class="line">Plugin <span class="string">'rstacruz/sparkup'</span>, &#123;<span class="string">'rtp'</span>: <span class="string">'vim/'</span>&#125;</div><div class="line"></div><div class="line"><span class="comment">" Avoid a name conflict with L9</span></div><div class="line"><span class="comment">" Plugin 'user/L9', &#123;'name': 'newL9'&#125;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">" Tags Match Plugin</span></div><div class="line">Plugin <span class="string">'Valloric/MatchTagAlways'</span></div><div class="line"></div><div class="line"><span class="comment">" All of your Plugins must be added before the following line</span></div><div class="line"></div><div class="line"><span class="keyword">call</span> vundle#end()            <span class="comment">" required</span></div><div class="line"><span class="keyword">filetype</span> plugin <span class="built_in">indent</span> <span class="keyword">on</span>    <span class="comment">" required</span></div><div class="line"></div><div class="line"><span class="comment">" To ignore plugin indent changes, instead use:</span></div><div class="line"><span class="comment">"filetype plugin on</span></div><div class="line"></div><div class="line"><span class="comment">" Brief help</span></div><div class="line"><span class="comment">" :PluginList       - lists configured plugins</span></div><div class="line"><span class="comment">" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate</span></div><div class="line"><span class="comment">" :PluginSearch foo - searches for foo; append `!` to refresh local cache</span></div><div class="line"><span class="comment">" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal</span></div><div class="line"><span class="comment">"</span></div><div class="line"><span class="comment">" see :h vundle for more details or wiki for FAQ</span></div><div class="line"><span class="comment">" Put your non-Plugin stuff after this line</span></div></pre></td></tr></table></figure>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>开启 Vim, 执行:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-pseudo">:PluginInstall</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[emmet&vim]]></title>
      <url>http://yardfarmer.github.io/2013/12/09/2013-12-09-emmet&vim/</url>
      <content type="html"><![CDATA[<h1 id="Emmet-使用方法不完全介绍"><a href="#Emmet-使用方法不完全介绍" class="headerlink" title="Emmet 使用方法不完全介绍"></a>Emmet 使用方法不完全介绍</h1><h2 id="Lorem据生成器"><a href="#Lorem据生成器" class="headerlink" title="Lorem据生成器"></a>Lorem据生成器</h2><figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">lorem<span class="comment">(默认30)</span></div><div class="line">lor<span class="name">m100</span> <span class="comment">(生成100单词)</span></div></pre></td></tr></table></figure>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">p*<span class="number">4</span>&gt;lorem</div></pre></td></tr></table></figure>
<h2 id="Child-gt"><a href="#Child-gt" class="headerlink" title="Child: &gt;"></a>Child: &gt;</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">div</span>&gt;ul&gt;li</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Sibling"><a href="#Sibling" class="headerlink" title="Sibling: +"></a>Sibling: +</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">div</span>+p+bq</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Climb-up"><a href="#Climb-up" class="headerlink" title="Climb-up: ^"></a>Climb-up: ^</h2><p>jQuery -&gt; end()</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">div</span>+<span class="keyword">div</span>&gt;p&gt;span+em</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">div</span>+<span class="keyword">div</span>&gt;p&gt;span+em^bq</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">blockquote</span>&gt;</span><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">div</span>+<span class="keyword">div</span>&gt;p&gt;span+em^^^bq</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Multiplication"><a href="#Multiplication" class="headerlink" title="Multiplication: *"></a>Multiplication: *</h2><p>With * operator you can define how many times element should be outputted:</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ul&gt;li*<span class="number">5</span></div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Grouping"><a href="#Grouping" class="headerlink" title="Grouping: ()"></a>Grouping: ()</h2><figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">div&gt;<span class="comment">(header&gt;ul&gt;li*2&gt;a)</span>+footer&gt;p</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(<span class="keyword">div</span>&gt;<span class="built_in">dl</span>&gt;(<span class="built_in">dt</span>+<span class="built_in">dd</span>)*<span class="number">3</span>)+footer&gt;p</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">div#header+<span class="selector-tag">div</span>.page+div<span class="selector-id">#footer</span><span class="selector-class">.class1</span><span class="selector-class">.class2</span><span class="selector-class">.class3</span></div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"header"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"footer"</span> <span class="attr">class</span>=<span class="string">"class1 class2 class3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ul&gt;<span class="selector-tag">li</span>.item$*<span class="number">5</span></div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item1"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item2"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item3"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item4"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item5"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ul&gt;li.item<span class="symbol">$</span><span class="symbol">$</span><span class="symbol">$</span>*<span class="number">5</span></div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item001"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item002"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item003"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item004"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item005"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Changing numbering base and direction<br>With @ modifier, you can change numbering direction (ascending or descending) and base (e.g. start value).</p>
<p>For example, to change direction, add @- after $:</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ul&gt;<span class="selector-tag">li</span>.item$@-*<span class="number">5</span></div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item5"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item4"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item3"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item2"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item1"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<p>To change counter base value, add @N modifier to $:</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ul&gt;li.item$@<span class="number">3</span>*<span class="number">5</span></div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item3"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item4"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item5"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item6"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item7"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<p>You can use these modifiers together:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ul&gt;li.item$@<span class="number">-3</span>*<span class="number">5</span></div></pre></td></tr></table></figure></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item7"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item6"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item5"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item4"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item3"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Text: {}<br>You can use curly braces to add text to element:</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a&#123;Click <span class="keyword">me</span>&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(<span class="selector-tag">header</span> &gt; <span class="selector-tag">ul</span><span class="selector-class">.nav</span> &gt; li*<span class="number">5</span>) + footer</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jQuery源码中的正则表达式学习笔记]]></title>
      <url>http://yardfarmer.github.io/2013/11/30/2013-11-30-jQuery%E6%BA%90%E7%A0%81%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>说明这些正则里充斥了大量 (?:) 这样的表达式, 语法规则是这样的: </p>
<p><code>()</code>代表分组,就是多字符匹配,团结的像一个似的. 分组还有个作用: <code>捕获</code>. 就是说()匹配的内容, 会给个号码然后将其缓存起来, 后面的表达式语句能使用号码引用匹配到的文本(见号如见匹配文本)。 作用上，像oracle里的 <code>with</code> 关键字。</p>
<p>再说点题外话:关于行结束符</p>
<ul>
<li>mac:    \r     回车</li>
<li>unix:   \n     换行</li>
<li>window: \r\n   回车换行 </li>
</ul>
<p>换行符起源于机械打字机,当打字机的笔尖走到行末时,有两个动作,回车,return到行首,接着\n,换到下一行。</p>
<p>举例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> quickExpr = <span class="regexp">/^(?:[^#&lt;]*(&lt;[\w\W]+&gt;)[^&gt;]*$|#([\w\-]*)$)/</span></div></pre></td></tr></table></figure>
<p>分组,外层为第一层分组, 因采用(?:) 匹配但不捕获,没有分组好, 所有最终拿到手的只有两组分组.<br>最外层分组匹配的是选择器selector,可为html标签,或id选择器.  分组 1 匹配标签名,标签内的字符串,不带左右尖括号. 分组2匹配id选择器名,不带#号.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> rnotwhite = <span class="regexp">/\S/</span></div></pre></td></tr></table></figure>
<p>匹配任意非空字符,空格,tab,回车等统统不匹配</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> trimLeft = <span class="regexp">/^\s+/</span></div></pre></td></tr></table></figure>
<p>Used for trimming whitespace, 匹配以空白符开始的行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> trimRight = <span class="regexp">/\s+$/</span></div></pre></td></tr></table></figure>
<p>匹配以空白符结尾的行,阿里的笔试题就有这个</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> rsingleTag = <span class="regexp">/^&lt;(\w+)\s*\/?&gt;(?:&lt;\/\1&gt;)?$/</span></div></pre></td></tr></table></figure>
<p>Match a standalone tag<br>\w 匹配数字字母下划线<br>第二个分组匹配不捕获(它调用了第一组的捕获内容)没了分组号,最终只剩第一个分组号,用于匹配标签名,这货匹配一组单独标签,闭合单标签或闭合双标签</p>
<p>JSON RegExp<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> rvalidchars = <span class="regexp">/^[\],:&#123;&#125;\s]*$/</span></div></pre></td></tr></table></figure></p>
<p>匹配任意多个  ],:{}和空格,干啥使得后面再说</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> rvalidescape = <span class="regexp">/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]&#123;4&#125;)/g</span></div></pre></td></tr></table></figure>
<p>匹配JSON合理的取值<br>“[^”\\n\r]*” 匹配被双引号包着的字符 双引号抱着的内容不能有(双引号,换行符,回车符,转义符)<br>也匹配为 true或false或null的值<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-?\d+(?:\.\d*)?(?:[<span class="string">eE</span>][<span class="symbol">+\-</span>]?\d+)</div></pre></td></tr></table></figure></p>
<p>可匹配负值,可匹配带小数的,还匹配科学计数法<br>强大!</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> rvalidtokens = <span class="regexp">/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g</span></div></pre></td></tr></table></figure>
<p>匹配  [  或 , [ 或 :[ </p>
<p>(?:^|:|,) 这货差点让我看走眼,匹配三个 空或:或, ^ 匹配字符串的开始,紧接着就是或,所以它匹配空,这个表达式看起来像 json的左括号</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> rvalidbraces = <span class="regexp">/(?:^|:|,)(?:\s*\[)+/g</span></div></pre></td></tr></table></figure>
<p>Useragent RegExp<br>UserAgent 就是浏览器的标识</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">webkit/ab.c</div><div class="line">var rwebkit = /(webkit)[<span class="string"> \/</span>](<span class="link">[\w.]+</span>)/</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ropera = <span class="regexp">/(opera)(?:.*version)?[ \/]([\w.]+)/</span>,</div><div class="line"><span class="keyword">var</span> rmsie = <span class="regexp">/(msie) ([\w.]+)/</span>,</div><div class="line"></div><div class="line"><span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:29.0) Gecko/20100101 Firefox/29.0"</span></div><div class="line"><span class="keyword">var</span> rmozilla = <span class="regexp">/(mozilla)(?:.*? rv:([\w.]+))?/</span>,</div><div class="line"></div><div class="line">Matches dashed string <span class="keyword">for</span> camelizing</div><div class="line"><span class="keyword">var</span> rdashAlpha = <span class="regexp">/-([a-z]|[0-9])/ig</span></div></pre></td></tr></table></figure>
<p>微软前缀<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> rmsPrefix = <span class="regexp">/^-ms-/</span>,</div></pre></td></tr></table></figure></p>
<p>匹配大括号和中括号,中间内容不限<br><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var rbrace = /^(?:<span class="symbol">\&#123;</span>.*<span class="symbol">\&#125;</span>|<span class="symbol">\[</span>.*<span class="symbol">\]</span>)$/</div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> rmultiDash = <span class="regexp">/([A-Z])/g</span></div></pre></td></tr></table></figure>
<p>匹配换行,回车,制表符<br><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var rclass = /[<span class="symbol">\n</span><span class="symbol">\t</span><span class="symbol">\r</span>]/g</div></pre></td></tr></table></figure></p>
<p>匹配空格<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> rspace = <span class="regexp">/\s+/</span></div></pre></td></tr></table></figure></p>
<p>匹配回车<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> rreturn = <span class="regexp">/\r/g</span>,</div></pre></td></tr></table></figure></p>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">var</span> r<span class="keyword">type</span> = /^(?:button|input)$/i,</div></pre></td></tr></table></figure>
<p>能被focus的, 即按tab可focus的,涨姿势了<br><figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var rfocusable = /^(?:button|<span class="type">input</span>|<span class="type">object</span>|<span class="type">select</span>|<span class="type">textarea</span>)$/i,</div></pre></td></tr></table></figure></p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">var rclickable</span> = /^a(<span class="meta">?:rea)?</span>$/i,</div></pre></td></tr></table></figure>
<p>取值为布尔值的<br><figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var rboolean = /^(?:autofocus|<span class="type">autoplay</span>|<span class="type">async</span>|<span class="type">checked</span>|<span class="type">controls</span>|<span class="type">defer</span>|<span class="type">disabled</span>|<span class="type">hidden</span>|<span class="type">loop</span>|<span class="type">multiple</span>|<span class="type">open</span>|<span class="type">readonly</span>|<span class="type">required</span>|<span class="type">scoped</span>|<span class="type">selected</span>)$/i,</div></pre></td></tr></table></figure></p>
<p>form元素<br><figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var rformElems = /^(?:textarea|<span class="type">input</span>|<span class="type">select</span>)$/i,</div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> rtypenamespace = <span class="regexp">/^([^\.]*)?(?:\.(.+))?$/</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> rhoverHack = <span class="regexp">/\bhover(\.\S+)?\b/</span>,</div><div class="line"></div><div class="line"><span class="keyword">var</span> rkeyEvent = <span class="regexp">/^key/</span>,</div></pre></td></tr></table></figure>
<p>点击事件 mouse或contextmenu再无前缀,click可有<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> rmouseEvent = <span class="regexp">/^(?:mouse|contextmenu)|click/</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> rfocusMorph = <span class="regexp">/^(?:focusinfocus|focusoutblur)$/</span>,</div><div class="line"></div><div class="line"><span class="keyword">var</span> rquickIs = <span class="regexp">/^(\w*)(?:#([\w\-]+))?(?:\.([\w\-]+))?$/</span>,</div></pre></td></tr></table></figure></p>
<p>这里是sezzle中的核心<br>大块儿头,分而治之</p>
<figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">var c = </div><div class="line"></div><div class="line">/(        			(?#分组1)</div><div class="line">	(?:   			</div><div class="line">		  <span class="symbol">\(</span>(?:<span class="symbol">\(</span>[^()]+<span class="symbol">\)</span>(?#分组3)|[^()]+)+<span class="symbol">\)</span>|    (?#分组2,函数式过滤块儿)</div><div class="line">	      <span class="symbol">\[</span>(?:<span class="symbol">\[</span>[^<span class="symbol">\[</span><span class="symbol">\]</span>]*<span class="symbol">\]</span>|['"][^'"]*['"]|[^<span class="symbol">\[</span><span class="symbol">\]</span>'"]+)+<span class="symbol">\]</span>| (?#属性选择块儿)</div><div class="line">	      <span class="symbol">\\</span>.| </div><div class="line">	      [^ &gt;+~,(<span class="symbol">\[</span><span class="symbol">\\</span>]+ </div><div class="line">	)+|</div><div class="line">    [&gt;+~] (?#层级选择块)</div><div class="line"> )   </div><div class="line"></div><div class="line">(<span class="symbol">\s</span>*,<span class="symbol">\s</span>*)?((?:.|<span class="symbol">\r</span>|<span class="symbol">\n</span>)*)   /g,</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">var chunker = /((?:<span class="symbol">\(</span>(?:<span class="symbol">\(</span>[^()]+<span class="symbol">\)</span>|[^()]+)+<span class="symbol">\)</span>|<span class="symbol">\[</span>(?:<span class="symbol">\[</span>[^<span class="symbol">\[</span><span class="symbol">\]</span>]*<span class="symbol">\]</span>|['"][^'"]*['"]|[^<span class="symbol">\[</span><span class="symbol">\]</span>'"]+)+<span class="symbol">\]</span>|<span class="symbol">\\</span>.|[^ &gt;+~,(<span class="symbol">\[</span><span class="symbol">\\</span>]+)+|[&gt;+~])(<span class="symbol">\s</span>*,<span class="symbol">\s</span>*)?((?:.|<span class="symbol">\r</span>|<span class="symbol">\n</span>)*)/g,</div><div class="line"> </div><div class="line">ID: /#((?:[<span class="symbol">\w</span><span class="symbol">\u</span>00c0-<span class="symbol">\u</span>FFFF<span class="symbol">\-</span>]|<span class="symbol">\\</span>.)+)/,</div><div class="line"></div><div class="line">CLASS: /<span class="symbol">\.</span>((?:[<span class="symbol">\w</span><span class="symbol">\u</span>00c0-<span class="symbol">\u</span>FFFF<span class="symbol">\-</span>]|<span class="symbol">\\</span>.)+)/,</div><div class="line">NAME: /<span class="symbol">\[</span>name=['"]*((?:[<span class="symbol">\w</span><span class="symbol">\u</span>00c0-<span class="symbol">\u</span>FFFF<span class="symbol">\-</span>]|<span class="symbol">\\</span>.)+)['"]*<span class="symbol">\]</span>/,</div><div class="line">ATTR: /<span class="symbol">\[</span><span class="symbol">\s</span>*((?:[<span class="symbol">\w</span><span class="symbol">\u</span>00c0-<span class="symbol">\u</span>FFFF<span class="symbol">\-</span>]|<span class="symbol">\\</span>.)+)<span class="symbol">\s</span>*(?:(<span class="symbol">\S</span>?=)<span class="symbol">\s</span>*(?:(['"])(.*?)<span class="symbol">\3</span>|(#?(?:[<span class="symbol">\w</span><span class="symbol">\u</span>00c0-<span class="symbol">\u</span>FFFF<span class="symbol">\-</span>]|<span class="symbol">\\</span>.)*)|)|)<span class="symbol">\s</span>*<span class="symbol">\]</span>/,</div><div class="line">TAG: /^((?:[<span class="symbol">\w</span><span class="symbol">\u</span>00c0-<span class="symbol">\u</span>FFFF<span class="symbol">\*</span><span class="symbol">\-</span>]|<span class="symbol">\\</span>.)+)/,</div><div class="line">CHILD: /:(only|nth|last|first)-child(?:<span class="symbol">\(</span><span class="symbol">\s</span>*(even|odd|(?:[+<span class="symbol">\-</span>]?<span class="symbol">\d</span>+|(?:[+<span class="symbol">\-</span>]?<span class="symbol">\d</span>*)?n<span class="symbol">\s</span>*(?:[+<span class="symbol">\-</span>]<span class="symbol">\s</span>*<span class="symbol">\d</span>+)?))<span class="symbol">\s</span>*<span class="symbol">\)</span>)?/,</div><div class="line">POS: /:(nth|eq|gt|lt|first|last|even|odd)(?:<span class="symbol">\(</span>(<span class="symbol">\d</span>*)<span class="symbol">\)</span>)?(?=[^<span class="symbol">\-</span>]|$)/,</div><div class="line">PSEUDO: /:((?:[<span class="symbol">\w</span><span class="symbol">\u</span>00c0-<span class="symbol">\u</span>FFFF<span class="symbol">\-</span>]|<span class="symbol">\\</span>.)+)(?:<span class="symbol">\(</span>(['"]?)((?:<span class="symbol">\(</span>[^<span class="symbol">\)</span>]+<span class="symbol">\)</span>|[^<span class="symbol">\(</span><span class="symbol">\)</span>]*)+)<span class="symbol">\2</span><span class="symbol">\)</span>)?/</div></pre></td></tr></table></figure>
<h2 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> match = <span class="regexp">/^(\w+$)|^\.([\w\-]+$)|^#([\w\-]+$)/</span>.exec( query );</div><div class="line"></div><div class="line">				   </div><div class="line"><span class="keyword">var</span> runtil = <span class="regexp">/Until$/</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> rparentsprev = <span class="regexp">/^(?:parents|prevUntil|prevAll)/</span>,</div></pre></td></tr></table></figure>
<p>Note: This RegExp should be improved, or likely pulled from Sizzle<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> rmultiselector = <span class="regexp">/,/</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> isSimple = <span class="regexp">/^.[^:#\[\.,]*$/</span>,</div></pre></td></tr></table></figure></p>
<p>h5标签全家福<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">var nodeNames</span> = <span class="string">"abbr|article|aside|audio|canvas|datalist|details|figcaption|figure|footer|"</span> +</div><div class="line">				<span class="string">"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video"</span>;</div></pre></td></tr></table></figure></p>
<p>匹配jQuery的”uuid”<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> rinlinejQuery = / jQuery\d+=<span class="string">"(?:\d+|null)"</span>/g</div><div class="line"></div><div class="line"><span class="selector-tag">var</span> rleadingWhitespace = /^\s+/</div></pre></td></tr></table></figure></p>
<p>good: (?!exp)    匹配后面跟的不是exp的位置<br><figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var rxhtmlTag = /&lt;(?!area|<span class="type">br</span>|<span class="type">col</span>|<span class="type">embed</span>|<span class="type">hr</span>|<span class="type">img</span>|<span class="type">input</span>|<span class="type">link</span>|<span class="type">meta</span>|<span class="type">param</span>)(([\w:]+)[^&gt;]*)\/&gt;/ig</div><div class="line"></div><div class="line">var rtagName = /&lt;([\w:]+)/</div><div class="line">var rtbody = /&lt;tbody/i</div><div class="line">var rhtml = /&lt;|<span class="type">&amp;#?\w</span>+;/ // &lt; 或者 &amp;nbsp; &amp;#xxx;</div><div class="line">var rnoInnerhtml = /&lt;(?:script|<span class="type">style</span>)/i</div></pre></td></tr></table></figure></p>
<p>html代码中不能含有这些标签,加入dom缓存<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> rnocache = <span class="regexp">/&lt;(?:script|object|embed|option|style)/i</span>,       </div><div class="line"></div><div class="line">checked=<span class="string">"checked"</span> <span class="keyword">or</span> checked</div><div class="line"><span class="keyword">var</span> rchecked = <span class="regexp">/checked\s*(?:[^=]|=\s*.checked.)/i</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> rscriptType = <span class="regexp">/\/(java|ecma)script/i</span></div><div class="line"><span class="keyword">var</span> rcleanScript = <span class="regexp">/^\s*&lt;!(?:\[CDATA\[|\-\-)/</span></div><div class="line">								  </div><div class="line"><span class="keyword">var</span> <span class="keyword">var</span> ralpha = <span class="regexp">/alpha\([^)]*\)/i</span></div><div class="line"><span class="keyword">var</span> ropacity = <span class="regexp">/opacity=([^)]*)/</span></div><div class="line"></div><div class="line">fixed <span class="keyword">for</span> IE9, see <span class="comment">#8346</span></div><div class="line"><span class="keyword">var</span> rupper = <span class="regexp">/([A-Z]|^ms)/g</span></div><div class="line"><span class="keyword">var</span> rnumpx = <span class="regexp">/^-?\d+(?:px)?$/i</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> rnum = <span class="regexp">/^-?\d/</span>,</div><div class="line"><span class="keyword">var</span> rrelNum = <span class="regexp">/^([\-+])=([\-+.\de]+)/</span>,</div></pre></td></tr></table></figure></p>
<p>编码后的空格<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> r20 = <span class="regexp">/%20/g</span>,</div><div class="line"><span class="keyword">var</span> rbracket = <span class="regexp">/\[\]$/</span>,</div></pre></td></tr></table></figure></p>
<p>表示 \r,\n 或 \r\n<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> rCRLF = <span class="regexp">/\r?\n/g</span>,</div></pre></td></tr></table></figure></p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> rhash = /<span class="meta">#.*$/,</span></div></pre></td></tr></table></figure>
<p>IE leaves an \r character at EOL<br><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var rheaders = /^(.*?):[ <span class="symbol">\t</span>]*([^<span class="symbol">\r</span><span class="symbol">\n</span>]*)<span class="symbol">\r</span>?$/mg,</div></pre></td></tr></table></figure></p>
<p>可输入的标签<br><figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var rinput = /^(?:color|<span class="type">date</span>|<span class="type">datetime</span>|<span class="type">datetime</span>-local|<span class="type">email</span>|<span class="type">hidden</span>|<span class="type">month</span>|<span class="type">number</span>|<span class="type">password</span>|<span class="type">range</span>|<span class="type">search</span>|<span class="type">tel</span>|<span class="type">text</span>|<span class="type">time</span>|<span class="type">url</span>|<span class="type">week</span>)$/i</div></pre></td></tr></table></figure></p>
<p><code>#7653, #8125, #8152</code>: local protocol detection<br>访问本地资源时,浏览器地址栏可使用的schema<br><figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var rlocalProtocol = /^(?:about|<span class="type">app</span>|<span class="type">app</span>\-storage|<span class="type">.+\-extension</span>|<span class="type">file</span>|<span class="type">res</span>|<span class="type">widget</span>):$/</div><div class="line"></div><div class="line">var rnoContent = /^(?:GET|<span class="type">HEAD</span>)$/</div></pre></td></tr></table></figure></p>
<p>匹配 // </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> rprotocol = <span class="regexp">/^\/\//</span></div><div class="line"><span class="keyword">var</span> rquery = <span class="regexp">/\?/</span></div></pre></td></tr></table></figure>
<p>\b代表单词的开头或结尾,也就是单词的分界处<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> rscript = <span class="regexp">/&lt;script\b[^&lt;]*(?:(?!&lt;\/script&gt;)&lt;[^&lt;]*)*&lt;\/script&gt;/gi</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> rselectTextarea = <span class="regexp">/^(?:select|textarea)/i</span></div><div class="line"><span class="keyword">var</span> rspacesAjax = <span class="regexp">/\s+/</span></div><div class="line"><span class="keyword">var</span> rts = <span class="regexp">/([?&amp;])_=[^&amp;]*/</span></div><div class="line"><span class="keyword">var</span> rurl = <span class="regexp">/^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+))?)?/</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> rfxtypes = <span class="regexp">/^(?:toggle|show|hide)$/</span></div><div class="line"><span class="keyword">var</span> rfxnum = <span class="regexp">/^([+\-]=)?([\d+.\-]+)([a-z%]*)$/i</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> rtable = <span class="regexp">/^t(?:able|d|h)$/i</span></div><div class="line"><span class="keyword">var</span> rroot = <span class="regexp">/^(?:body|html)$/i</span>;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[What is ARIA]]></title>
      <url>http://yardfarmer.github.io/2013/11/07/2013-11-07-waht%20-is-aria/</url>
      <content type="html"><![CDATA[<blockquote>
<p>WAI-ARIA (Web Accessibility Initiative’s Accessible Rich Internet App)</p>
</blockquote>
<p>无障碍网页倡议-无障碍的富互联网应用,一种技术规范.旨在提高 html 的语义性.</p>
<p>让页面具有无障碍访问功能,现有的 html 标记还不够.</p>
<ol>
<li><p>role=”banner”（横幅）</p>
<p> 面向全站的内容，通常包含网站标志、网站赞助者标志、 全站搜索工具等。横幅通常显示在页面的顶端，而且通 常横跨整个页面的宽度 将其添加到页面级的header 元素，每个页面只用一次</p>
</li>
<li><p>role=”navigation”（导航） </p>
<p> 文档内不同部分或相关文档的导航性元素（通常为链接） 的集合 与nav 元素是对应关系。应将其添加到每个nav 元素， 或其他包含导航性链接的容器。这个角色可在每个页面 上使用多次，但是同nav 一样，不要过度使用该属性</p>
</li>
<li><p>role=”main”（主体）</p>
<p> 文档的主要内容,与main 元素是对应关系。最好将其添加到main 元素， 也可以添加到其他表示主体内容的元素（可能是div）。 在每个页面仅使用一次</p>
</li>
<li><p>role=”complementary”（补充性内容） </p>
<p> 文档中作为主体内容补充的支撑部分。它对区分主体内 容是有意义的 与aside 元素是对应关系。应将其添加到aside 或div 元 素（前提 是该div 仅包含补充性内容）。可以在一个页 面里包含多个complementary 角色，但不要过度使用</p>
</li>
<li><p>role=”contentinfo”（内容信息）</p>
<p> 包含关于文档的信息的大块可感知区域这类信息的例子 包括版权声明和指向隐私权声明的链接等 将其添加至整个页面的页脚（通常为footer 元素）。每 个页面仅使用一次.</p>
<p> o</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[探究浏览器的存储能力]]></title>
      <url>http://yardfarmer.github.io/2013/08/12/2014-11-01-%E6%8E%A2%E7%A9%B6%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%AD%98%E5%82%A8/</url>
      <content type="html"><![CDATA[<p>##cookie</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">document.cookie</div></pre></td></tr></table></figure>
<p>返回所有作用在当前文档的所有 cookie ，多个 cookie 的集合的字符串形式。</p>
<p><code>RFC 2965</code>规定 cookie 不超过300个，为每个Web服务器保存的cookie数不能超过<code>20</code>个,数据不能超过 <code>4KB</code> 现代浏览器允许 cookie 超过300个 。<br>要给当前文档设置 cookie 值，非常简单，只须将cookie属性设置为一个字符串形式的值</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.cookie=<span class="string">'name_self=abc'</span>;</div><div class="line"><span class="built_in">document</span>.cookie=<span class="string">'name_self=abc;max-age=10'</span>; <span class="comment">// 10秒后过期</span></div><div class="line"><span class="built_in">document</span>.cookie=<span class="string">"name_self=abc;max-age=10;path='/path';domain='http://.domain.com';"</span>; <span class="comment">// 10秒后过期,由于设置了 domain 不限于 domain.com/path/xx  path 目录及其子目录的访问，其他子域名也可访问 cookie。</span></div></pre></td></tr></table></figure>
<p>##get/post</p>
<pre><code>Http    Get方法提交的数据大小长度并没有限制，HTTP协议规范没有对URL长度进行限制。这个限制是特定的浏览器及服务器对它的限制。
IE      限制为2083个字符，如果超过这个数字，提交按钮没有任何反应。
Firefox 对于Firefox浏览器URL的长度限制为65,536个字符。
Safari  URL最大长度限制为 80,000个字符。
Opera   URL最大长度限制为190,000个字符。
Google  URL最大长度限制为8182个字符。
Apache  能接受最大url长度为8,192个字符。
</code></pre><p>Post 长度限制</p>
<p>在Tomcat下取消POST大小的限制（Tomcat默认2M）；</p>
<pre><code>打开tomcat目录下的conf目录，打开server.xml 文件，修改maxPostSize
</code></pre><p>##localStorage<br>User agents should limit the total amount of space allowed for storage areas.</p>
<p>主观上推荐大多数的浏览器的存储限制设为 <code>5M字节/域</code>，根据使用效果的反馈，未来会有相对的变更。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[javascript 权威指南笔记]]></title>
      <url>http://yardfarmer.github.io/2013/06/30/2013-06-30-javascript%20%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="第1章-概述"><a href="#第1章-概述" class="headerlink" title="第1章 概述"></a>第1章 概述</h2><h2 id="第2章-词法结构"><a href="#第2章-词法结构" class="headerlink" title="第2章 词法结构"></a>第2章 词法结构</h2><p>所谓直接量(literal) .就是程序中直接使用的数据值</p>
<h2 id="第3章-类型、值和变量"><a href="#第3章-类型、值和变量" class="headerlink" title="第3章 类型、值和变量"></a>第3章 类型、值和变量</h2><p>Javascript 是一种面向对象的语言。<br>这意味着不再需要定义全局的函数去操作不同类型的值——数据类型本身可以定义方法来使用值。</p>
<p>数字、布尔值、null和undefined属于不可变类型</p>
<p>JavaScript变量是无类型的(untyped)，变量可以被赋予任何类型的值</p>
<p>JavaScript采用词法作用域(lexical scoping)。<br>不在任何函数内声明的变量称做全局变量(global variable) ，它在JavaScript程序中的任何地方都是可见的.</p>
<p>JavaScript中的所有数字均用浮点数值表示。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Math</span>.pow(<span class="number">2</span> , <span class="number">53</span>) =&gt; <span class="number">90199254740992</span>: <span class="number">2</span> 的<span class="number">53</span>次</div><div class="line">   <span class="built_in">Math</span>.round(<span class="number">.6</span>) =&gt; 四舍五入 </div><div class="line"><span class="built_in">Math</span>.ceil(<span class="number">.6</span>) =&gt; 向上求整 </div><div class="line"><span class="built_in">Math</span>.f1oor(. <span class="number">6</span>) =&gt; 向下取整</div><div class="line"><span class="built_in">Math</span>.abs(<span class="number">-5</span>) =&gt; 求绝对值</div><div class="line"><span class="built_in">Math</span>.max(x,y,z,e,f) =&gt; 所有参数中的最大值</div><div class="line">   <span class="built_in">Math</span>.min(x,y,z) =&gt; 所有参数中的最小值</div><div class="line"><span class="built_in">Math</span>.random() =&gt; 生成一个大于等于<span class="number">0</span> 小于<span class="number">1.</span> <span class="number">0</span>的伪随机数</div><div class="line"><span class="built_in">Math</span>.PI</div><div class="line"><span class="built_in">Math</span>.E</div><div class="line"><span class="built_in">Math</span>.sqrt(<span class="number">3</span>)</div><div class="line"><span class="built_in">Math</span>.pow(<span class="number">3</span> ， <span class="number">1</span>/<span class="number">3</span>)</div></pre></td></tr></table></figure>
<p>JavaScript中的非数字(NaN)值有一点特殊:它和任何值都不相等，包括自身 NaN != NaN</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">//当前日期和时间</span></div><div class="line"><span class="keyword">var</span> elapsed = now - then; <span class="comment">//日期减法 计算时间间隔的毫秒数</span></div></pre></td></tr></table></figure>
<p>字符串(string) 是一组由16位值组成的不可变的有序序列，每个字符通常来自于 Unicode字符集,比如cant,Reillys 。因为撇号和单引号是同一个字符，所以必须使用反斜线来转义</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s = <span class="string">"hello， world"</span></div><div class="line">s.charAt(o);</div><div class="line">s.charAt(s.length<span class="number">-1</span>)</div><div class="line">s.substring(startIndex,endIndex) </div><div class="line">s.substr(startIndex,length)</div><div class="line">s.slice(<span class="number">1</span>,<span class="number">4</span>)</div><div class="line">s.slice(<span class="number">-3</span>)</div><div class="line">s.indexOf(<span class="string">"l"</span>)</div><div class="line">s.lastlndexOf(<span class="string">"l"</span>)</div><div class="line">s.indexOf(<span class="string">"l"</span>, <span class="number">3</span>)</div><div class="line">s.split(<span class="string">", "</span>) 字符串分割成数组,相对于 <span class="built_in">Array</span>.join()</div><div class="line"></div><div class="line"><span class="comment">//下面这些值可以被转换成 false</span></div><div class="line"><span class="literal">undefined</span></div><div class="line"><span class="literal">null</span></div><div class="line"><span class="number">0</span></div><div class="line"><span class="number">-0</span></div><div class="line"><span class="literal">NaN</span></div><div class="line"><span class="string">""</span> <span class="comment">// 空字符串</span></div></pre></td></tr></table></figure>
<h2 id="第4章-表达式和运算符"><a href="#第4章-表达式和运算符" class="headerlink" title="第4章 表达式和运算符"></a>第4章 表达式和运算符</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a,b = <span class="number">0</span>;</div><div class="line">(a = b) == <span class="number">0</span>  <span class="comment">// =&gt; true</span></div><div class="line">先执行括号内的赋值语句, 后进行相等判断</div><div class="line"></div><div class="line">赋值操作的结合性是从右到左</div><div class="line">所以,可以</div><div class="line">i = j = k = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="string">`data[i++] = data[i++] *2 `</span></div></pre></td></tr></table></figure>
<p>由于所有 对象和数组 的typeof运算结果是”object” 而不是”function”，因此它对于<br>区分对象和其他原始值来说是很有帮助的, function 的 typeof 才是 “function”。</p>
<p>如果想区分对象的类，则需要使用其他的手段，如使用instanceof运算符</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</div><div class="line"><span class="keyword">delete</span> a[<span class="number">3</span>];  =&gt;  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="literal">undefined</span> × <span class="number">1</span>]</div><div class="line">a.length =&gt; <span class="number">4</span>;</div><div class="line"><span class="comment">// 只是在原位置抹去了，但空位置还留着,长度不变</span></div></pre></td></tr></table></figure>
<p>通过 var 声明的变量是不能删除的，所以 没 var 生成的变量是可删除的。</p>
<h2 id="第5章-语句"><a href="#第5章-语句" class="headerlink" title="第5章 语句"></a>第5章 语句</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//适用空语句，初始化一个数组a</span></div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; a.length; a[i++] = <span class="number">0</span>) ;</div></pre></td></tr></table></figure>
<p>变量声明语句会被 “提前”(hoisting) 至脚本或者函数的顶部。但是初始化的操作则还在原来var语句的位置执行，在声明语句之前变量的值是undefined 。</p>
<p>注意，多次声明同一个变量是无所谓的。<br>先声明且赋值后，再次声明时值不会被 undefined 定义。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line"><span class="keyword">var</span> a;  <span class="comment">// =&gt; a == 1</span></div></pre></td></tr></table></figure>
<p>函数定义不能出现在if语句、while循环或其他任何语句中.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(initialize ; test ; increment)</div></pre></td></tr></table></figure>
<h2 id="第6章-对象"><a href="#第6章-对象" class="headerlink" title="第6章 对象"></a>第6章 对象</h2><p>对象直接量是一个表达式，这个表达式的每次运算都创建井初始化一个新的对象。<br>如果在一个重复调用的函数中的循环体内使用了对象直接量，它将创建很多新对象，井且每次创建的对象 的属性值也有可能不同。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o  = <span class="built_in">Object</span>.create(<span class="literal">null</span>);  <span class="comment">// =&gt; 会创建一个完全的空对象，没有从 Object 继承来的方法</span></div><div class="line"><span class="keyword">var</span> o1 = &#123;&#125;;	<span class="comment">// =&gt; 存在原型链，带有继承的方法</span></div><div class="line"></div><div class="line"><span class="comment">// 下面这两个效果一样</span></div><div class="line"><span class="keyword">var</span> o2 = <span class="built_in">Object</span>.create(&#123;&#125;);</div><div class="line"><span class="keyword">var</span> o3 = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.prototype);</div></pre></td></tr></table></figure>
<h3 id="Object"><a href="#Object" class="headerlink" title="Object()"></a>Object()</h3><p>Object() 函数将各种值，转化为对应的对象</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>(<span class="number">1</span>)</div><div class="line"><span class="built_in">Number</span> &#123;[[PrimitiveValue]]: <span class="number">1</span>&#125;</div><div class="line"></div><div class="line"><span class="built_in">Object</span>(<span class="string">"a"</span>)</div><div class="line"><span class="built_in">String</span> &#123;<span class="number">0</span>: <span class="string">"a"</span>, <span class="attr">length</span>: <span class="number">1</span>, [[PrimitiveValue]]: <span class="string">"a"</span>&#125;</div></pre></td></tr></table></figure>
<h3 id="Object-keys-Object-getOwnPropertyNames-区别"><a href="#Object-keys-Object-getOwnPropertyNames-区别" class="headerlink" title="Object.keys,Object.getOwnPropertyNames() 区别"></a>Object.keys,Object.getOwnPropertyNames() 区别</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">	<span class="keyword">var</span> o = &#123;</div><div class="line">		<span class="attr">p1</span>: <span class="number">12</span>,</div><div class="line">		<span class="attr">p5</span>: <span class="string">"ok"</span>,</div><div class="line">		<span class="attr">p6</span>: <span class="string">"ok"</span></div><div class="line">    &#125;		</div><div class="line">	<span class="built_in">Object</span>.keys(o)</div><div class="line">	<span class="comment">// ["p1","p5","p6"]</span></div><div class="line"></div><div class="line">	<span class="built_in">Object</span>.getOwnPropertyNames(o);</div><div class="line">	<span class="comment">// ["p1","p5","p6"]</span></div><div class="line"></div><div class="line"><span class="comment">// 对于一般对象来说，这两个方法返回的结果是一样的，只有涉及枚举，不可枚举的属性时才会有不同结果。</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> a = [<span class="string">"hello"</span>,<span class="string">"world"</span>];</div><div class="line"></div><div class="line"><span class="built_in">Object</span>.keys(a);</div><div class="line"></div><div class="line"><span class="comment">// ["0","1"]</span></div><div class="line"></div><div class="line"><span class="built_in">Object</span>.getOwnPropertyNames(a)</div><div class="line"><span class="comment">// ["0","1","length"]</span></div><div class="line"></div><div class="line"><span class="comment">// lenght 是不可枚举属性，所以只出现在 getOwnPropertyNames 下.</span></div></pre></td></tr></table></figure>
<p>那么，问题来了，Object(对象呢？)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>(&#123;<span class="string">"a"</span>:<span class="number">1</span>&#125;)</div><div class="line"><span class="comment">// =&gt; 传对象反对象</span></div><div class="line"><span class="built_in">Object</span> &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;	</div><div class="line"></div><div class="line"><span class="comment">// 用处：</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObject</span>(<span class="params">target</span>) </span>&#123;</div><div class="line">	<span class="comment">// 只有对象被返回原对象时还是自身</span></div><div class="line">	<span class="keyword">return</span> target === <span class="built_in">Object</span>(target);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="第7章-数组"><a href="#第7章-数组" class="headerlink" title="第7章 数组"></a>第7章 数组</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</div><div class="line">a.length = <span class="number">0</span>;  <span class="comment">// 删除其余元素</span></div><div class="line">a =&gt; []</div></pre></td></tr></table></figure>
<p>如果想跳过”不存在”的元素而仍然要处理存在的 undefined（元素存在，只是没有赋值） 的元素，则</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, i &lt; a.length; i++ ) &#123;</div><div class="line">	<span class="keyword">if</span>(!(i <span class="keyword">in</span> a)) <span class="keyword">continue</span>; <span class="comment">// 跳过不存在的元素</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>即，判断属性存在不存在用‘’in’</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">a.join() <span class="comment">// 方法将数组中所有元素都转化为字符串井连接在一起，返回最后生成的字 符串。可以指定一个可选的字符串在生成的字符串中来分隔数组的各个元素</span></div><div class="line"></div><div class="line"><span class="built_in">Array</span>.reverse();  <span class="comment">// 逆向</span></div><div class="line"></div><div class="line"><span class="comment">// 假设第一个参数应该在前，则比较函数应该 return 一个小于0的数.</span></div><div class="line"><span class="built_in">Array</span>.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">true</span>/<span class="literal">false</span>;</div><div class="line">	&#125;);</div><div class="line"></div><div class="line"><span class="built_in">Array</span>.concat <span class="comment">// 方法创建井返回一个新数组，它的元素包括调用concat() 的原始数组的 元素和concat() 的每个参数。</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line">a.concat(<span class="number">5</span>,<span class="number">6</span>); =&gt; [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> b = [<span class="number">2</span>,<span class="number">5</span>];</div><div class="line">b.concat[<span class="number">6</span>,[<span class="number">8</span>,[<span class="number">9</span>]]] =&gt; 创建并返回一个新数组 [<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,[<span class="number">9</span>]]; 元素组不变.</div><div class="line"></div><div class="line">Array.slice(startIndex,endIndex) <span class="comment">// 返回指定数组的一个片段或子数组。</span></div><div class="line">	</div><div class="line"><span class="built_in">Array</span>.splice 删除或插入数组</div><div class="line"></div><div class="line"><span class="comment">// 在尾部插入删除</span></div><div class="line"><span class="built_in">Array</span>.push(); <span class="comment">// 数组末尾添加，返回最新长度 return length</span></div><div class="line"><span class="built_in">Array</span>.pop(); <span class="comment">// 删掉并返回末尾值</span></div><div class="line"></div><div class="line"><span class="comment">// 在头部插入删除</span></div><div class="line"><span class="built_in">Array</span>.unshift(); <span class="comment">// 在头部插入，并返回新长度</span></div><div class="line"><span class="built_in">Array</span>.shift();  <span class="comment">// 在头部删除并返回头部值</span></div><div class="line"></div><div class="line">forEach</div><div class="line"></div><div class="line">map <span class="comment">// 老值对新值 即为 map</span></div><div class="line"></div><div class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];                              ==&gt; [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line"></div><div class="line">b = a.map( <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> x*x; &#125;); ==&gt; [<span class="number">1</span>,<span class="number">4</span>,<span class="number">9</span>]</div><div class="line">==&gt; map</div><div class="line"></div><div class="line"></div><div class="line">fliter() 方法返回的数组元素是调用的数组的一个子集。</div><div class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</div><div class="line">a.filter(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> x &lt; <span class="number">3</span>;&#125;); =&gt;  [<span class="number">1</span>,<span class="number">2</span>]</div><div class="line"></div><div class="line">every() 和some()方法是数组的逻辑判定:它们对数组元素应用指定的函数进行判定，返</div><div class="line">回<span class="literal">true</span>或<span class="literal">false</span> 。</div><div class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line">a.every(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> x &lt; <span class="number">10</span>; &#125;) <span class="comment">// =&gt;true: 所有的值&lt;10</span></div><div class="line">a.every(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> x % <span class="number">2</span> === <span class="number">0</span>; &#125;) <span class="comment">// =&gt; false: 不是所有的值都是偶数 一旦everyO 和someO 确认该返回什么值它们就会停止遍历数组元素</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 检测是否数组</span></div><div class="line"><span class="built_in">Array</span>.isArray([])</div></pre></td></tr></table></figure>
<p>使用instanceof的问题是在Web浏览器中有可能有多个窗口或窗体(frame) 存在。每个<br>窗口都有自己的JavaScript环境，有自己的全局对象。<br>因此一个窗体中的对象将不可能是另外窗体中的构造函数的实例.<br>跨窗体的问题。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.prototype.toString.call([]);  =&gt; <span class="string">"[object Array]"</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(&#123;&#125;);  =&gt; <span class="string">"[object Object]"</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="string">''</span>);  =&gt; <span class="string">"[object String]"</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">Date</span>) =&gt; <span class="string">"[object Date]"</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">null</span>) =&gt;  <span class="string">"[object Null]"</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">undefined</span>) =&gt; <span class="string">"[object Undefined]"</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(alert) =&gt; <span class="string">"[object Function]"</span></div></pre></td></tr></table></figure>
<p>一种常常完全合理的看法把拥有一个数值length属性和对应非负整数属性的对象看<br>做一种类型的数组。</p>
<p>虽然不能在它们之上直接调用数组方能或者期望length属性有什么特殊的行为，但是仍然可以用针对真正数组遍历的代码来遍历它们。<br>既然类数组对象没有继承自Array.prototype ，那就不能在它们上面接调用数组方法。尽管如此，可以间接地使用Function.call方单调用:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"abc"</span>;</div><div class="line">str.charAt(<span class="number">0</span>); =&gt; <span class="string">"a"</span></div><div class="line">str[<span class="number">0</span>];        =&gt; <span class="string">"a"</span></div></pre></td></tr></table></figure>
<p>字符串的行为类似于数组的事实使得通用的数组方撞可以应用到字符串上。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s = <span class="string">"javascript"</span></div><div class="line"><span class="built_in">Array</span>.prototype.join.call(s,<span class="string">'-'</span>); =&gt; <span class="string">"j-a-v-a-s-c-r-i-p-t"</span> <span class="comment">//NB!</span></div></pre></td></tr></table></figure>
<p>// 字符串是不可变值,把它们当做数组看时,它们是只读的,更改无效</p>
<h2 id="第8章-函数"><a href="#第8章-函数" class="headerlink" title="第8章 函数"></a>第8章 函数</h2><h2 id="第9章-类和模块"><a href="#第9章-类和模块" class="headerlink" title="第9章 类和模块"></a>第9章 类和模块</h2><h2 id="第10章-正则"><a href="#第10章-正则" class="headerlink" title="第10章 正则"></a>第10章 正则</h2><h2 id="第11章"><a href="#第11章" class="headerlink" title="第11章"></a>第11章</h2><h2 id="第12章"><a href="#第12章" class="headerlink" title="第12章"></a>第12章</h2><h2 id="第13章"><a href="#第13章" class="headerlink" title="第13章"></a>第13章</h2><h2 id="第14章"><a href="#第14章" class="headerlink" title="第14章"></a>第14章</h2><p>一个Web浏览器窗口可能在桌面上包含多个标签页。每一个标签页都是独立的”浏览上下文” (browsing context) ，每一个上下文都有独立的Window对象，而且相互之间互不干扰。</p>
<p>一个窗口或标签页中的脚本可以打开新的窗口或标签页，当一个脚本这样做时，这样多个窗口或窗口与另一个窗口的文档之间就可 以互操作.</p>
<p><iframe>所创建的嵌套浏览上下文是用它自己的Window对象所表示的。</iframe></p>
<p>对于客户端 JavaScript来说，窗口、标签页、iframe和框架都是浏览上下文, 对于JavaScript来说，它<br>们都是Window对象。和相互独立的标签页不同，嵌套的浏览上下文之间井不是相互独 立的。在一个窗体中运行的JavaScript程序总是可以看到它的祖先和子孙窗体，尽管脚本 查看这些窗体中的文档受到同据策略的限制。</p>
<p>因为Window是客户端JavaScript的全局对象，每个窗口或窗体都包含独立的JavaScript执行上下文。</p>
<p>open() 的第一个参数是要在新窗口中显示的文档的URL。<br>open() 的第二个参数是新打开的窗口的名字。如果指定的是一个已经存在的窗口的名字<br>(井且脚本允许跳转到那个窗口) ，会直接使用已存在的窗口</p>
<p>在 iframe 中，可以使用保留的名字”_top” (顶级祖先窗口)和”_parent” (直接父级窗口)来获取彼此的浏览上下文。</p>
<p>窗口的名字是非常重要的，因为它允许openO 方法引用已存在的窗口，并同时可以<br>作为<a>和dorm&gt; 元素上HTML target属性的佳，用来表示引用的文档(或表羊提<br>交结果)应该显示在命名的窗口中。这个target属性的值可以设直为”_blank” 、<br>“_parent” 或”_top” ，从而使引用的文档显示在新的空白窗口、父窗口/窗体或<br>顶层窗口中。</a></p>
<p>open() 的第三个可选参数是一个以逗号分隔的列表，包含大小和各种属a性</p>
<p>Window对象的方法 open() 返回代表新创建的窗口的Window对象。而且<br>这个新窗口具有opener属性，该属性可以打开它的原始窗口</p>
<p>top属性是一个通用的快捷方式，无论一个窗体被嵌套了几层，它的top属性引用的都是指向包含它的顶级窗口</p>
<p>窗体是通过<iframe>元素创建的.</iframe></p>
<p><iframe>元素有contentWindow属性，引用该窗体的Window对象，所以此窗体的Window 对象就是:<br>var childFrame = document.getElementById(“fl”).contentWindow;</iframe></p>
<p>每个Window对象都有一个frames属性，它引用自身包含的窗口或窗体的子<br>窗体。frames属a性引用的是类数组对象，井可以通过数字或窗体名进行索引。</p>
<p>每个Window都有自己的原型对象，这意味着instanceof操作符不能跨窗口<br>工作。</p>
<p>我们称为”Window对象”的对象实际上不是全局对象，而<br>是全局对象的一个代理。</p>
<p>前段时间我还给人讲过一句话：<br>为了玩刀而上战场的人大都死于刀下，临死时怪自己的刀没有选好。<br>为了杀人而上战场的人大都成了将军，临死时放下屠刀立地成佛了。<br>所以，程序员要想成佛，不但要追求编程境界，还要学会在残酷的现实中拼杀，解决具体的问题才行。</p>
<h2 id="第15章"><a href="#第15章" class="headerlink" title="第15章"></a>第15章</h2><h2 id="第16章"><a href="#第16章" class="headerlink" title="第16章"></a>第16章</h2><h2 id="第17章"><a href="#第17章" class="headerlink" title="第17章"></a>第17章</h2><h2 id="第18章"><a href="#第18章" class="headerlink" title="第18章"></a>第18章</h2><h2 id="第19章"><a href="#第19章" class="headerlink" title="第19章"></a>第19章</h2><h2 id="第20章"><a href="#第20章" class="headerlink" title="第20章"></a>第20章</h2><h2 id="第21章"><a href="#第21章" class="headerlink" title="第21章"></a>第21章</h2><h2 id="第22章"><a href="#第22章" class="headerlink" title="第22章"></a>第22章</h2><p>既然类数组对象没有继承自Array.prototype ，那就不能在它们上面直</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mustache模板引擎]]></title>
      <url>http://yardfarmer.github.io/2013/02/23/2014-12-23-mustache%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/</url>
      <content type="html"><![CDATA[<blockquote>
<p>What could be more logical awesome than no logic at all?</p>
</blockquote>
<p>mustache.js 是 mustache 模板引擎的 js 实现. mustache 支持多种语言,包括 java,php 等. </p>
<p>mustache 的特点是没有复杂的流程控制语句,模板整体看起来清爽自然, 使用数据模型对模板中的标签进行替换.</p>
<p>文件加载,mustache.js 依赖于 jQuery</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bower_components/jquery/dist/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bower_components/mustache/mustache.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>使用示例</p>
<ul>
<li>demo_1</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- demo_1 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"target_1"</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">"template_1"</span> <span class="attr">type</span>=<span class="string">"x-tmpl-mustache"</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></div><div class="line">    Hello <span class="template-variable">&#123;&#123; name &#125;&#125;</span><span class="xml"></span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">loadUser</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> template = $(<span class="string">"#template_1"</span>).html();</div><div class="line">        Mustache.parse(template);</div><div class="line"></div><div class="line">        <span class="keyword">var</span> rendered = Mustache.render(template, &#123;</div><div class="line">            <span class="attr">name</span>: <span class="string">"xin"</span></div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        $(<span class="string">"#target_1"</span>).html(rendered);</div><div class="line">    &#125;</div><div class="line">    loadUser();</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>demo_2 </li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">&lt;!-- demo_2 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"target_2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> view = &#123;</div><div class="line">        <span class="attr">title</span>: <span class="string">"Codinglion"</span>,</div><div class="line">        <span class="attr">languages</span>: &#123;</div><div class="line">            <span class="attr">JAVA</span>: <span class="string">'know it'</span>,</div><div class="line">            <span class="attr">JS</span>: <span class="string">'expert'</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">score</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">90</span> + <span class="number">3</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">var</span> output = Mustache.render(<span class="string">"&#123;&#123; title &#125;&#125; learn: &#123;&#123;languages.JAVA&#125;&#125;, &#123;&#123;languages.JS&#125;&#125;. &#123;&#123;score&#125;&#125; score"</span>, view);</div><div class="line">    $(<span class="string">"#target_2"</span>).html(output);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>demo_3 </li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">   <span class="comment">&lt;!-- demo_3 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- model 加入控制 --&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"target_3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">       <span class="keyword">var</span> tags = &#123;</div><div class="line">           <span class="string">"beatles"</span>: [&#123;</div><div class="line">               <span class="string">"firstName"</span>: <span class="string">"John"</span>,</div><div class="line">               <span class="string">"lastName"</span>: <span class="string">"Lennon"</span></div><div class="line">           &#125;, &#123;</div><div class="line">               <span class="string">"firstName"</span>: <span class="string">"Paul"</span>,</div><div class="line">               <span class="string">"lastName"</span>: <span class="string">"McCartney"</span></div><div class="line">           &#125;, &#123;</div><div class="line">               <span class="string">"firstName"</span>: <span class="string">"George"</span>,</div><div class="line">               <span class="string">"lastName"</span>: <span class="string">"Harrison"</span></div><div class="line">           &#125;, &#123;</div><div class="line">               <span class="string">"firstName"</span>: <span class="string">"Ringo"</span>,</div><div class="line">               <span class="string">"lastName"</span>: <span class="string">"Starr"</span></div><div class="line">           &#125;],</div><div class="line">           <span class="string">"name"</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">               <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">" "</span> + <span class="keyword">this</span>.lastName;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">var</span> output = Mustache.render(<span class="string">" &#123;&#123;#beatles&#125;&#125;	* &#123;&#123;name&#125;&#125;&lt;br&gt; &#123;&#123;/beatles&#125;&#125; "</span>, tags);</div><div class="line">       $(<span class="string">"#target_3"</span>).html(output);</div><div class="line">   <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[html5待完善笔记]]></title>
      <url>http://yardfarmer.github.io/2012/12/30/2012-12-30-html5%E5%BE%85%E5%AE%8C%E5%96%84%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="H5的组成"><a href="#H5的组成" class="headerlink" title="H5的组成"></a>H5的组成</h2><ol>
<li>语义(semanic),新增 header、footer、nav、section 等含有语义的标签，以及一系列含有语义的标签属性。</li>
<li>离线&amp;存储(offline&amp;storage),主要包括 LocalStorage、IndexDB、FileAPI。</li>
<li>设备访问(Device Access)，定位信息已经应用，其他还有视频、音频流（语音流），移动设备的传感器(如方向出传感器)。</li>
<li>网络连接(Connectivity),增加 Web Socket，服务器数据推送。</li>
<li>多媒体(Multimedia), 增加 video、audio 标签，提供了原生的视频、音频访问。</li>
<li>图形接口，增加了 canvas，提供了2d，3d GDI，现已有第三方 WebGL 可以提供 3D 加速渲染。</li>
<li>性能整合(Performance &amp; Integration), WebWorkers 实现脚本后台运行，并提供前后台交互接口， XMLHttpRequest 2 提供更好的网路 IO；</li>
<li>CSS3。</li>
</ol>
<p>##语义元素</p>
<p>构造网页的新方式。要想要网页的结构更加清晰，需要适用 html5 中的新的语义元素（semantic element）。这些内容为它们标注的内容赋予了额外的含义。</p>
<p>最关键的是要理解<time>元素没有任何内置的样式。它包含的内容与普通文本没有区别。HTML5 新增的大部分元素都是语义元素。</time></p>
<p>既然它们不会改变网页的外观为什么适用呢？</p>
<ol>
<li>容易维护和修改。语义化标记可以传到结构信息。</li>
<li>无障碍性。</li>
<li>搜索引擎优化。</li>
</ol>
<p>HTML5 是指网页超文本技术工作小组（WHATWG）规定的标记语言和API 集合。HTML5 已经成为一套标准化技术和新兴技术的代名词。这个新兴技术极大地拓展了传统的Web 堆栈”（HTML，CSS 和JavaScript）。</p>
<p>触摸和移动东西，是人类做的最基本的事情之一。</p>
<p>这是人们所期望使用触摸界面的方法。</p>
<p>WHATWG 决定不定义HTML5 的正式版本。</p>
<p>我会想，用户界面只需让人感觉快，而无需真的快。只需及时响应—立即响应用户，让他知道有反应了。</p>
<p>用户在屏幕上用手势操作时，不能等到手势完毕再做反馈，因为根据用户的了解，它们甚至会认为手势没有生效！</p>
<p>但只用HTML5 就足以在触屏设备上做出优秀的用户界面。</p>
<p>这种设计理念仅仅是一个观念，即首先针对移动设备设计，然后通过调整使它适应桌面设备。<br>（Luke Wroblewski 的书《Mobile First》是一部伟大的开山之作.</p>
<p>Internet Explorer 8 不支持媒体查询. =&gt; response.js</p>
<p>浏览器解析 CSS 选择器是从右往左的。这意味着，如果它看到一个如“nav ul li a”的规则时，它首先必须获得所有匹配a 的元素列表，然后检查看它是不是li 的后代，再按相同规则继续检查。后代选择器虽然看起来方便，但它的性能开销是最大的。</p>
<h3 id="关于-session，cookie，jsessionid-的关系。"><a href="#关于-session，cookie，jsessionid-的关系。" class="headerlink" title="关于 session，cookie，jsessionid 的关系。"></a>关于 session，cookie，jsessionid 的关系。</h3><p>session 就是 httpsession，服务器端的，cookie 就是浏览器端的。</p>
<p>在 servlet 里使用了         </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">HttpSession session = request.getSession();</div><div class="line">String sessionid = session.getId();</div></pre></td></tr></table></figure>
<p>获取了 session ，即使没有在 session 里设置数据，那么在响应里也会去设置 cookie。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">Server:</span>Apache-Coyote/<span class="number">1.1</span></div><div class="line">Set-<span class="string">Cookie:</span>JSESSIONID=<span class="number">3</span>B44FEAE6B662D94F4F23DD8EC2D2697; Path=<span class="regexp">/nodeA/</span>; HttpOnly</div></pre></td></tr></table></figure></p>
<p>并且有意思的是：如果在浏览器里把 cookie 删掉，那么下一次给服务器发请求，那么必然不会带着 cookie。所以服务器在没有 cookie 的请求中会在响应(因为没有把 cookie 中的 sessionid 带上，那么服务器认为这个客户端还没有对应的 session，于是发一个 session 给这个客户端，并且在返回响应的时候顺便设置在 cookie 上)的时候给带上 cookie（sessionid）。<br>如果客户端在请求的时候把 cookie(seessionid)带上了，那么服务器就不会在响应中设置 cookie 了。</p>
<p>如果浏览器把 cookie 禁用了，那么新的 cookie 是存不到浏览器的，响应的时候带着 cookie 也不管用，存不上。  但是禁用cookie 后，浏览器中存储的囤积的还是可以发送出去的。 </p>
<p>那么问题来了，浏览器把 cookie 禁用了怎么办？ 请求的时候把 sessionid 存放到,貌似没有什么好办法，因为禁用 cookie，服务器的 sessionid 传不进来。<br>在禁用 cookie 的情况下，taobao 登陆不上去，页面显示有问题。 amazon，jd 直接在登陆界面提示，不设置 cookie 登陆不进去。</p>
<p>Rails创始人DHH在Twitter上问：JavaScript 不能获得 HTTP header 有什么历史原因？然后被人转给了 JavaScript 的作者 Brendan。Brendan回答说没什么原因，当时我没时间写了。<br>可以确定的是，XHR（2）可以获得 header。</p>
<p>使用报头，缓存代理会被告知在保持状态和重新获取新内容之前，需要缓存保留该资源多长时间。最简单的处理方法是使用Expires 报头。<br>Expires: Thu, 15 Apr 2025 20:00:00 GMT它的意图是使浏览器（或一个可缓存的代理）将文件保存下来，直到超过缓存大小的上限。<br>浏览器可以发出一个包含If-Modified-Since 报头的请求。如果服务器上的文件没有发生改变服务器就会发送一个304 Not Modified 的响应，这样浏览器就会使用缓存中已存在的文件，而不是从服务器重新获取。</p>
<p>ETag 是一种唯一标识符，一般通过哈希算出。它只需要比较一段简短的字符，就能在没有日期信息的情况下验证缓存是否与服务器上的文件相同。</p>
<p>localStorage 大小限制：</p>
<blockquote>
<p>User agents should limit the total amount of space allowed for storage areas.</p>
</blockquote>
<p>o</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[css的居中问题]]></title>
      <url>http://yardfarmer.github.io/2012/11/12/2012-11-12-css%E7%9A%84%E5%B1%85%E4%B8%AD%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h1 id="html-居中问题"><a href="#html-居中问题" class="headerlink" title="html 居中问题"></a>html 居中问题</h1><h2 id="文本居中"><a href="#文本居中" class="headerlink" title="文本居中"></a>文本居中</h2><p>设置文字内容元素的 height 与 ine-height 属性。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.text</span> &#123;</div><div class="line">	<span class="attribute">height</span>: <span class="number">25px</span>;</div><div class="line">	<span class="attribute">line-height</span>: <span class="number">25px</span>;</div><div class="line">	<span class="attribute">text-align</span>: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="已知宽高的居中"><a href="#已知宽高的居中" class="headerlink" title="已知宽高的居中"></a>已知宽高的居中</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.popup</span> &#123;</div><div class="line">    <span class="attribute">height</span>: <span class="number">400px</span>;</div><div class="line">	<span class="attribute">line-height</span>: <span class="number">400px</span>; <span class="comment">/* 文本垂直居中 */</span></div><div class="line">	<span class="attribute">text-align</span>:center;  <span class="comment">/* 文本水平居中*/</span></div><div class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;	</div><div class="line">	<span class="comment">/*</span></div><div class="line">	   不管屏幕多大，先找到中心，然后上挪自己高度的一半</div><div class="line">	 */</div><div class="line">    <span class="attribute">top</span>: <span class="number">50%</span>; </div><div class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">margin-top</span>: -<span class="number">200px</span>;</div><div class="line">    <span class="attribute">margin-left</span>: -<span class="number">250px</span>;</div><div class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid red;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"popup"</span>&gt;</span> 自古逢秋悲寂寥，我言秋日胜春朝 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[base64编码]]></title>
      <url>http://yardfarmer.github.io/2012/11/12/2012-11-12-base64/</url>
      <content type="html"><![CDATA[<h2 id="什么是-base64？"><a href="#什么是-base64？" class="headerlink" title="什么是 base64？"></a>什么是 base64？</h2><p>Base64是一种基于64个可打印字符来表示二进制数据的表示方法。<strong>由于2的6次方等于64，所以每6个比特为一个单元，对应某个可打印字符。三个字节有24个比特，对应于4个Base64单元，即3个字节需要用4个<code>可打印字符</code>来表示。</strong>它可用来作为电子邮件的传输编码。在Base64中的可打印字符包括字母A-Z、a-z、数字0-9，这样共有62个字符，此外两个可打印符号在不同的系统中而不同。一些如uuencode的其他编码方法，和之后binhex的版本使用不同的64字符集来代表6个二进制数字，但是它们不叫Base64。</p>
<p>Base64索引表：</p>
<pre><code>数 字符         
0    A    16    Q    32    g    48    w
1    B    17    R    33    h    49    x
2    C    18    S    34    i    50    y
3    D    19    T    35    j    51    z
4    E    20    U    36    k    52    0
5    F    21    V    37    l    53    1
6    G    22    W    38    m    54    2
7    H    23    X    39    n    55    3
8    I    24    Y    40    o    56    4
9    J    25    Z    41    p    57    5
10    K    26    a    42    q    58    6
11    L    27    b    43    r    59    7
12    M    28    c    44    s    60    8
13    N    29    d    45    t    61    9
14    O    30    e    46    u    62    +
15    P    31    f    47    v    63    /
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[float and absoulte]]></title>
      <url>http://yardfarmer.github.io/2012/10/30/2012-10-30-float-and-absolute/</url>
      <content type="html"><![CDATA[<h2 id="float-amp-absolute-共性："><a href="#float-amp-absolute-共性：" class="headerlink" title="float &amp; absolute 共性："></a>float &amp; absolute 共性：</h2><ol>
<li><p>包裹性<br> 包裹性换种说法就是让元素inline-block化，例如一个div标签默认宽度是100% 显示的，但是一旦被absolute属性缠上，则100%默认宽度就会变成自适应内部元素的宽度。</p>
</li>
<li><p>兼容 IE 半透明<br>background:rgba(0,0,0,0.5);<br>filter: progid:DXImageTransform.Microsoft.gradient(startcolorstr=#7F000000,endcolorstr=#7F000000);</p>
</li>
</ol>
<ol>
<li>位置<br>　　position:relative和position:absolute都可以改变元素在文档中的位置，都能激活元素的left、top、right、bottom和z-index属性。（默认这些属性未激活，设置了也无效）</li>
</ol>
<p>　　设置position:relative和position:absolute都会让元素浮起来，会改变正常情况下的文档流。</p>
<p>　　不同：</p>
<p>　　position : relative 会保留自己在z-index:0层的占位，left、top、right、bottom值是相对于自己在z-index层的位置。</p>
<p>　　position : absolute 会完全脱离文档流，不在z-index:0层保留占位符，其left、top、right、bottom值是相对于自己最近的一个设置了position:relative或position:absolute的祖先元素的，如果祖先元素全都没有设置，那么就相对于body元素。</p>
<p>　　float 也能改变文档流，不同的是，float不会让元素浮到另一个元素上面，它仍然让元素在z-index:0层排列，只能通过float:left和float:right来控制元素在同一层里”左浮”和”右浮”。float会改变正常的文档流排列，影响周围元素。</p>
<p>　　position : absolute 和 float 会隐式的改变 display 类型，不论之前什么类型的元素（display:none除外）,只要设置了position:absolute和float中任何一个，都会让元素以display:inline-block的方式显示：可以设置长宽，默认宽度并不占满父元素。<br>就算显示的设置display:inline或者display:block，也仍然无效（IE6双倍边距BUG利用display:inline解决）。</p>
<p>　  position:relative 却不会隐式改变display类型。</p>
<h3 id="浮动的详细内幕"><a href="#浮动的详细内幕" class="headerlink" title="浮动的详细内幕"></a>浮动的详细内幕</h3><p>理解浮动，要理解包含块(containing block), 浮动元素的包含块是其最近的块级祖先元素。</p>
<p>动元素会生成一个块级框，而不论这个元素本身是什么。如果让一个链接浮动，即使该链接元素本身是行内元素，通常会生成一个（===行内框===），但只要它是浮动的，就会生成一个块级框。</p>
<ol>
<li>浮动元素的左(右) 外边界不能超出其包含在包含块的左(或右)内边界。</li>
<li>如果一个元素已经浮动，而另一个元素已经在那个位置，则后放置的元素则挨着前一个浮动元素的右外边界放置。</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[javascript读书笔记]]></title>
      <url>http://yardfarmer.github.io/2012/10/02/2012-10-02-javascript%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>##typeof<br>typeof null =&gt; “object”</p>
<p>null 是一个特殊的对象值，含义是”非对象”。实际上，通常认为 null 是它自有类型的唯一一个成员。<br>undefined 用未定义标识更深层次的“空值”,它是变量的一种取值，标识变量没有初始化。<br>undefined 是预定义的全局变量， 它和 null 不一样，null是关键字。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span> =》 <span class="literal">undefined</span> 标识这个值是这个类型的唯一成员。</div><div class="line"><span class="literal">undefined</span> == <span class="literal">null</span> =》 <span class="literal">true</span></div></pre></td></tr></table></figure>
<p>或许认为undefined是表示系统级的、出乎意料的或类似错误的值的空缺，而null是表示程序级的、正常的或在意料之中的值的空缺</p>
<p>##全局对象是window</p>
<p>对象的比较并非值的比较，对象值都是引用，对象的比较均是引用的比较。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> s = <span class="built_in">String</span>(<span class="string">'abc'</span>);</div><div class="line">s.a = <span class="number">1</span>;  <span class="comment">// 临时对象,随机销毁</span></div><div class="line">s = &gt; <span class="string">"abc"</span> </div><div class="line"></div><div class="line"><span class="keyword">var</span> S = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'abc'</span>);</div><div class="line">S.a = <span class="number">3</span>;</div><div class="line">S = &gt; &#123;<span class="attr">a</span>: <span class="number">3</span>&#125;</div></pre></td></tr></table></figure>
<p>表达式(expression) JavaScript 中的一个短语， JavaScript解释器会将其计算(evaluate) 出一个结果。程序中的常量是最简单的一类表达式。<br>变量名也是一种简单的表达式，它的值就是赋值给变量的值。</p>
<p>##数组初始化</p>
<p>会为空缺的位置赋值undefined</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var a = [<span class="number">1</span>,,<span class="number">3</span>];  <span class="comment">// a.lengh = 3;</span></div></pre></td></tr></table></figure>
<p>留下单个逗号，这时并不会创建一个新的值为undefined的元素。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,,<span class="number">3</span>,]; <span class="comment">// a.length = 3;</span></div><div class="line"></div><div class="line">a[<span class="number">100</span>] = <span class="number">1</span>; <span class="comment">// a.length = 101;</span></div></pre></td></tr></table></figure>
<p>函数定义表达式可以称为“函数直接量”，对象初始化表达式也可以称为“对象直接量”</p>
<p>在”.”和”[“之前的表达式总是会首先计算。如果计算结果是null或者undefined ，表达式会抛出一个类型错误异常。</p>
<p>当对调用表达式进行求值的时候，首先计算函数表达式，然后计算参数表达式，得到一组参数值。<br>如果函数表达式的值不是一个可调用的对象，则抛出一个类型错误异常。</p>
<p>传入函数的对象实参，在函数内部是可以修改的。<br>实参与形参 === true</p>
<p>对象创建表达式(object creation expression) 创建一个对象井调用一个函数(这个函数称做构造函数)初始化新对象的属性。</p>
<p>对象创建表达式和函数调用表达式非常类似，只是对象创建表达式之前多了一个关键字new:</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> <span class="type">Object</span>()</div><div class="line"><span class="keyword">new</span> <span class="type">Point</span>(<span class="number">2</span> ,<span class="number">3</span>)</div></pre></td></tr></table></figure>
<p>如果一个对象创建表达式不需要传入任何参数给构造函数的话，那么这对空圆括号是可以省略掉的:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> <span class="built_in">Object</span></div><div class="line"><span class="keyword">new</span> <span class="built_in">Date</span></div></pre></td></tr></table></figure></p>
<p>lval是left-value的简写，意思是”左值”  在左边被赋给值的</p>
<p>逗号表达式<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var a  = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>); <span class="comment">// =&gt; a = 3; 返回最后一个值</span></div></pre></td></tr></table></figure></p>
<h2 id="iframe-跨域自动调整高度"><a href="#iframe-跨域自动调整高度" class="headerlink" title="iframe 跨域自动调整高度"></a>iframe 跨域自动调整高度</h2><p>获得父页面的地址栏的绝对地址。然后，就是改变父页面的地址：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> hostUrl = <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>);</div><div class="line">hostUrl += <span class="string">"#height="</span> + <span class="number">1294</span>;</div><div class="line"><span class="built_in">window</span>.top.location = hostUrl;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> l= <span class="built_in">document</span>.body.scrollLeft &gt; <span class="number">0</span> ?</div><div class="line">	   <span class="built_in">document</span>.body.scrollLeft : </div><div class="line">	   <span class="built_in">document</span>.documentElement.scrollLeft;<span class="comment">//获取鼠标所在地的左偏移</span></div></pre></td></tr></table></figure>
<p>Request Headers:<br>Provisional(暂时的，临时的) headers are shown</p>
<p>出现在这个语句是因为去获取该资源的请求其实还没有真的发生，所以 Header 里显示的是临时的伪信息，直到服务器真的有响应返回，这里的 Header 信息才会被更新为真实的。</p>
<p>网络工具：<br>chrome://net-internals/</p>
<h2 id="offset"><a href="#offset" class="headerlink" title="offset"></a>offset</h2><p>抵消，补偿</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">offsetHeight = <span class="number">2</span>*border+content+scrollbar; </div><div class="line"></div><div class="line">offset 位置相对于文档，positon 相对于父元素。</div><div class="line"></div><div class="line">jQ:</div><div class="line">stringObject.replace(regexp/sbustr,replacement);</div><div class="line"></div><div class="line">contents()/contentDocument</div></pre></td></tr></table></figure>
<h2 id="关于距离"><a href="#关于距离" class="headerlink" title="关于距离"></a>关于距离</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">x = e.pageX;</div><div class="line">y = e.pageY;</div><div class="line">$(<span class="string">"span"</span>).text(<span class="string">"pageX:"</span>+x+<span class="string">", pageY:"</span>+y+<span class="string">", clientX:"</span>+e.clientX+<span class="string">", clientY:"</span>+e.clientY+<span class="string">", screenX:"</span>+e.screenX+<span class="string">", screenY"</span>+e.screenY);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pageX/pageY:      相对于视口，出现了滚动条，滚上去的部分也计算。</div><div class="line">clientX/clientY： 可看到的部分的距离，滚上去的部分不算，只算到浏览器窗口的上檐。</div><div class="line">screenX/screenY:  相对于显示器屏幕的左上角计算</div></pre></td></tr></table></figure>
<h3 id="Element-clientHeight"><a href="#Element-clientHeight" class="headerlink" title="Element.clientHeight"></a>Element.clientHeight</h3><blockquote>
<p>The Element.clientHeight read-only property returns the inner height<br>of an element in pixels,包括padding，但是没有水平的滚动条，没有 border，没有 margin。</p>
</blockquote>
<p>element.innerHeight 兼容性考虑，ie9开始支持。</p>
<h2 id="box-sizing"><a href="#box-sizing" class="headerlink" title="box-sizing"></a>box-sizing</h2><p>box-sizing: border-box;  添加border 不会往外涨</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$( <span class="built_in">window</span> ).height();  <span class="comment">// returns height of browser viewport, 即使有滚动部分，也不算上</span></div><div class="line">$( <span class="built_in">document</span>).height(); <span class="comment">// returns height of HMTL document height,带滚动部分的高度</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;   <span class="comment">// 由于 js 执行环境的不确定，可能是 es3/es5, 可能支持标准特性的 js 引擎也可能不支持标准特性的 js 引擎。所以适用</span></div><div class="line"><span class="meta">"use strict"</span> 可以禁用一些容易受限或出问题的特性。</div></pre></td></tr></table></figure>
<p>事实上. JavaScript 中所有的数字都是双精度浮点数。64位的。</p>
<p>位算术运算符比较特殊，隐式地转换为32 位整数后进行运算。</p>
<p>(8).toString(8);  // =&gt; “10” 转8进制<br>(8).toString(2);  // =&gt; “1000” 转2进制</p>
<p>只有整数数字才能比相等。</p>
<p>在对象字面量和数组字面量的基础上，JSON格式的语法具有很强的表达能力，但对其中的值也有一定的限制。例如，JSON规定所有对象键以及所有字符串值，都必须包含在双引号中。而且，函数也不是有效的JSON值。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 通过 xmlhttprequest 获得 header 响应。</span></div><div class="line"><span class="keyword">var</span> client = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">client.open(<span class="string">"GET"</span>,<span class="string">'xx.txt'</span>,<span class="literal">true</span>); <span class="comment">// (method, url [, async = true]) 默认采用异步</span></div><div class="line">client.send();</div><div class="line">client.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span>(<span class="keyword">this</span>.readyState == <span class="number">2</span>) &#123;</div><div class="line">		<span class="keyword">var</span> contentType = client.getResponseHeader(<span class="string">"Content-Type"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>事件处理中 return false 意味着同时调用event.preventDefault()和event.<br>stopPropagation()。因此要想停止事件冒泡，我们还得再调用后者。</p>
<p>位运算符要求它的操作数是整数，这些整数表示为32位整型而不是64位浮点型。必要<br>时，位运算符首先将操作数转换为数字，井将数字强制表示为32位整型。</p>
<p>当一个 Ajax 请示被发送，所有的请求都会附带主域的cookie 信息一起发送。，对于远程服务来讲，请求如果是来自于登录后的用户，若没有同源策略的限制，攻击者就有可能获取你的数据。</p>
<p>同源：域名，子域名，端口。</p>
<p>HttpRequest</p>
<p>Refer: 请求从哪哪来</p>
<p>CORS</p>
<p>在跨域中，Ajax 提出了 CORS( cross-origin resource sharing ), CORS 打破同源策略的限制，赋予了前端代码访问可信的远程服务的权限。加上这个可以跨域，但是发送请求时不会带上 cookie。</p>
<p>HTML5 本地存储的规范源自HTML5 Web Storage specification（<a href="http://www.w3.org/" target="_blank" rel="external">http://www.w3.org/</a><br>TR/webstorage），其中包含两类：local storage 和session storage。浏览器关闭后local<br>storage 数据也能够保持，而session storage 数据则不存在了。浏览器端所存储的数据是<br>以域名分隔开的，某个域中的脚本存储的数据只能被这个域读取。<br>如果你存储的数据超出了上限（通常是每个域名5MB）。</p>
<p>如果传入一个函数，则在document 上绑定一个ready 事件监听函数，当DOM 结构加载完成时执行。<br>ready 触发要早于load 事件。ready 事件是 DOMContentLoaded 事件、onreadystatechange 事件和函数doScrollCheck() 的统称.</p>
<p>如果传入一个 jQuery 对象，则创建一个 jQ 对象副本，副本与源对象引用相同的 dom 元素。</p>
<p>一旦单一的事件有着多重的后果，这种“一事一处理”的方式将迫使处理器规模急剧膨胀。</p>
<p>topic = id &amp;&amp; topics[ id ];</p>
<p>Deferred 就是Promise！更准确地说，Deferred 是Promise 的超集，它比Promise 多了一项关键特性：<br>可以直接触发。纯 Promise 实例只允许添加多个调用，而且必须由其他什么东西来触发这些调用。<br>它们的底层是 Callbacks.</p>
<p>Promise 对象会一直保持挂起状态，直到被执行或拒绝。</p>
<p>简单总结一下，Promise 对象接受 3 种回调形式：done、fail 和 progress。<br>执行(resolve) Promise 对象时，运行的是done 回调；拒绝(reject) Promise 对象时，运行的是fail 回调;<br>对处于挂起状态的Deferred 对象调用 notify 时，运行的是progress 回调.</p>
<p>获得jQuery 中的Promise 对象：或者生成一个$.Deferred 实例，或者进行一次可返回 Promise 对象的 API 调用。</p>
<p>“请针对这个 Promise(getPromise) 对象给我一个回调，我会归还一个 Promise (postPromise) 对象以表示回调运行的结果”</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> getPromise = $.get(<span class="string">'/query'</span>);</div><div class="line"><span class="keyword">var</span> postPromise = getPromise.pipe(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;	<span class="keyword">return</span> $.post(<span class="string">'/search'</span>, data);&#125;);</div></pre></td></tr></table></figure>
<p>// deep: 是否克隆子节点，true 克隆子节点，false 只克隆指定节点。<br>var dupNode = node.cloneNode(deep);</p>
<p>// Returns an object reference to the window object.<br>// 真的有这个属性<br>window.self</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">XMLHttpRequest cannot <span class="keyword">load</span> <span class="keyword">http</span>://localhost:<span class="number">8080</span>/nodeA/Here. <span class="keyword">No</span> <span class="string">'Access-Control-Allow-Origin'</span> header <span class="keyword">is</span> <span class="keyword">present</span> <span class="keyword">on</span> the requested resource. Origin <span class="string">'null'</span> <span class="keyword">is</span> therefore <span class="keyword">not</span> allowed access.</div></pre></td></tr></table></figure>
<h2 id="viewport-width-device-width"><a href="#viewport-width-device-width" class="headerlink" title="viewport width=device-width;"></a>viewport width=device-width;</h2><p>android 360px;</p>
<p>所以，一个完全缩小的网站将会仍然以(iphone)320个CSS像素的形式进行展示，一个CSS像素等于多少个设备像素对于我们来说不重要。 起源于 iphone3gs，像素玻璃的宽认定为320px，然而浏览器冒称960px。所以针对 css 的像素，安卓就是360，ip 为320，对应多少个实际的设备像素就忽略了。</p>
<h2 id="虚拟像素"><a href="#虚拟像素" class="headerlink" title="虚拟像素"></a>虚拟像素</h2><p>在移动设备的屏幕上看到的像素与桌面设备上不同。这意味着，在iPhone 上，无法拿出显微镜来验证一个元素是否是300px 宽。<br>在一个没有viewport 元信息的页面上，视图会默认设定宽度为980px，则宽度为300px 的元素表示的宽度为300 虚拟像素宽.</p>
<p>如果声明 <code>&lt;meta name=&quot;viewport&quot; content=&quot;width=600&quot;&gt;</code>那么一个在CSS 中被定义宽度为600px 的元素在页面加载初始化时将会横向充满屏.</p>
<p>在安卓上 width=device-width; 又因为 Android 的 device-width 设为了 360px； 所以窗口的虚拟像素的 360px 宽。</p>
<p>为了让Web 开发者的思维保持清晰，苹果公司决定继续在iPhone 4 上返回320 的设备宽度，尽管屏幕物理像素为640。</p>
<p>安卓上的Chrome 有一个不是很有用的target-density dpi 的viewport 属性来支持它</p>
<p>第一次加载速度是用“首字节的时间”测量的，即从用户请求该页面到第一个字节从服务器下载下来的这段时间.</p>
<p>第一次加载缓慢的真正原因。真正的原因通常在于前端。PageSpeed 、YSlow 和其他无数的工具和服务可以用来解决这些问题。</p>
<p>window.innerHeiht 就是页面部分，不包括收藏栏，标题栏，菜单栏(包括这些的叫window.outerHeight).</p>
<p>json2.js 补充JSON.parse JSON.stringify 两个json序列化反序列化方法.<br>respond.js可以让IE6-8支持 css的media query 响应式方案。</p>
]]></content>
    </entry>
    
  
  
</search>
